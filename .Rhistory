<<<<<<< HEAD
#################################
library(ggplot2)
library(dplyr)
library(tidyr)
# cargamos los datos
tickets <- readRDS("Datos\\Transformados\\tickets_Reducidos.rds")
clusteres <- readRDS("Datos\\Transformados\\df_con_clusteres.rds")
productos <- readRDS("Datos\\Originales\\maestroestr.RDS")
# para poder hacer la matriz, añadimos la COLUMNA DE CLUSTERES al data frame original
df <- left_join(tickets,clusteres,by="id_cliente_enc")
df <- df[,-c(5,6,7)]
# por otro lado, agregamos una columna con el producto en general, y el producto en especifico
# ------- PRODUCTO GENERAL
df <- df %>%
mutate(
cod_est = as.character(cod_est),  # Asegura que tenga formato string
producto_general = case_when(
grepl("^010\\d+", cod_est) ~ "Fruta y verdura",
grepl("^0125\\d+", cod_est) ~ "Legumbres y frutos secos a granel",
grepl("^02\\d+", cod_est) ~ "Carniceria",
grepl("^03\\d+", cod_est) ~ "Congelados",
grepl("^04\\d+", cod_est) ~ "Charcuteria",
grepl("^050\\d+", cod_est) ~ "Lacteos",
grepl("^051\\d+", cod_est) ~ "Lacteos y postres",
grepl("^052\\d+", cod_est) ~ "Huevos y leche fresco",
grepl("^06\\d+", cod_est) ~ "Panaderia",
grepl("^07\\d+", cod_est) ~ "Carniceria",
grepl("^081\\d+", cod_est) ~ "Latas o mermeladas",
grepl("^082\\d+", cod_est) ~ "Latas",
grepl("^083140\\d+", cod_est) ~ "Conservas",
grepl("^083145\\d+", cod_est) ~ "Alimentacion animales",
grepl("^0833\\d+", cod_est) ~ "Snacks",
grepl("^084\\d+", cod_est) ~ "Snacks",
grepl("^080\\d+", cod_est) ~ "Snacks",
grepl("^090\\d+", cod_est) ~ "Salsas y arroces/pastas",
grepl("^091\\d+", cod_est) ~ "Salsas y arroces/pastas",
grepl("^092\\d+", cod_est) ~ "Frigorifico (sin productos de origen animal)",
grepl("^093\\d+", cod_est) ~ "Especies",
grepl("^10\\d+", cod_est) ~ "Panaderia",
grepl("^11\\d+", cod_est) ~ "Alcoholes",
grepl("^1213\\d+", cod_est) ~ "Higiene",
grepl("^13\\d+", cod_est) ~ "Higiene",
grepl("^14\\d+", cod_est) ~ "Platos preparados",
TRUE ~ "Otros"
)
)
# ---------- PRODUCTO ESPECIFICO (del df maestrostr)
df <- left_join(df,productos,by="cod_est")
# ------------- PARA LA CARACTERIZACIÓN DE CLUSTERES
productos_generales_menos_comprados <- df %>%
group_by(cluster,producto_general) %>%
summarise(cantidad_producto = n()) %>%
slice_min(order_by = cantidad_producto, n = 5, with_ties = F)
gf_productos_generales_menos_comprados<-ggplot(productos_generales_menos_comprados, aes(x = cantidad_producto, y = reorder(producto_general, cantidad_producto))) +
geom_segment(aes(x = 0, xend = cantidad_producto, yend = producto_general), color = "#0074B5",size= 1.5) +
geom_point(color =  "#E10A23", size = 5) +
facet_wrap(~ cluster, scales = "free_y") +
labs(
title = "Productos generales menos comprados por cluster",
x = "Cantidad",
y = "Productos generales"
) +
theme_minimal()
ggsave("Graficos/gf_productos_generales_menos_comprados.png", plot = gf_productos_generales_menos_comprados,width = 10, height = 6, dpi = 300)
productos_generales_mas_comprados <- df %>%
group_by(cluster,producto_general) %>%
summarise(cantidad_producto = n()) %>%
slice_max(order_by = cantidad_producto, n = 5, with_ties = F)
gf_productos_generales_mas_comprados<-ggplot(productos_generales_mas_comprados, aes(x = cantidad_producto, y = reorder(producto_general, cantidad_producto))) +
geom_segment(aes(x = 0, xend = cantidad_producto, yend = producto_general), color = "#0074B5",size= 1.5) +
geom_point(color =  "#E10A23", size = 5) +
facet_wrap(~ cluster, scales = "free_y") +
labs(
title = "Productos generales más comprados por cluster",
x = "Cantidad",
y = "Productos generales"
) +
theme_minimal()
ggsave("Graficos/gf_productos_generales_mas_comprados.png", plot = gf_productos_generales_mas_comprados,width = 10, height = 6, dpi = 300)
productos_menos_comprados <- df %>%
group_by(cluster,descripcion) %>%
summarise(cantidad_producto = n()) %>%
slice_min(order_by = cantidad_producto, n = 5, with_ties = F)
gf_productos_menos_comprados<-ggplot(productos_menos_comprados, aes(x = cantidad_producto, y = reorder(descripcion, cantidad_producto))) +
geom_segment(aes(x = 0, xend = cantidad_producto, yend = descripcion), color = "#0074B5",size= 1.5) +
geom_point(color =  "#E10A23", size = 5) +
facet_wrap(~ cluster, scales = "free_y") +
labs(
title = "Productos menos comprados por cluster",
x = "Cantidad",
y = "Productos"
) +
theme_minimal()
ggsave("Graficos/gf_productos_menos_comprados.png", plot = gf_productos_menos_comprados,width = 10, height = 6, dpi = 300)
productos_mas_comprados <- df %>%
group_by(cluster,descripcion) %>%
summarise(cantidad_producto = n()) %>%
slice_max(order_by = cantidad_producto, n = 5, with_ties = F)
gf_productos_mas_comprados<-ggplot(productos_mas_comprados, aes(x = cantidad_producto, y = reorder(descripcion, cantidad_producto))) +
geom_segment(aes(x = 0, xend = cantidad_producto, yend = descripcion), color = "#0074B5",size= 1.5) +
geom_point(color =  "#E10A23", size = 5) +
facet_wrap(~ cluster, scales = "free_y") +
labs(
title = "Productos más comprados por cluster",
x = "Cantidad",
y = "Productos"
) +
theme_minimal()
ggsave("Graficos/gf_productos_mas_comprados.png", plot = gf_productos_mas_comprados,width = 10, height = 6, dpi = 300)
top20_productos <- df %>%
count(descripcion, sort = TRUE) %>%
slice_max(n, n = 20) %>%
pull(descripcion)  # Vector con nombres
productos_mas_comprados <- df %>%
group_by(cluster,descripcion) %>%
summarise(cantidad_producto = n())
top20_cluster <- productos_mas_comprados %>%
filter(descripcion %in% top20_productos)
top20prods_total_por_cluster<-ggplot(top20_cluster, aes(x = cantidad_producto, y = reorder(descripcion, cantidad_producto), fill = cluster)) +
geom_col(position = "stack") +
labs(
title = "Top 20 productos más vendidos y su distribución por cluster",
x = "Cantidad total",
y = "Producto"
) +
scale_fill_manual(values = c("#E10A23",  "#F0928E", "#0074B5","#A2CBE8")) +
theme_minimal()
ggsave("Graficos/top20prods_total_por_cluster.png", plot = top20prods_total_por_cluster,width = 10, height = 6, dpi = 300)
producto_mas_comprado <- df %>%
group_by(id_cliente_enc, producto_general,num_ticket) %>%
summarise(veces_comprado = n(), .groups = "drop") %>%
=======
<<<<<<< HEAD
=======
<<<<<<< HEAD
# guardamos en un data frame con el nombre del producto
objetivo3_resultado <- as.data.frame(lista_3)
colnames(objetivo3_resultado) <- "cod_est"
objetivo3_resultado <- rownames_to_column(objetivo3_resultado, var = "Id_cliente")
objetivo3_resultado <- inner_join(objetivo3_resultado,productos,by="cod_est")
saveRDS(objetivo3_resultado,"Datos\\Resultados\\Objetivo3_resultado.rds")
################################# OBJETIVO 4 ###################################
obj4<-objetivos[[4]]$obj
tickets_filtrados <- tickets[tickets$id_cliente_enc %in% obj4, ]
ultimos_tickets <- tickets_filtrados %>%
>>>>>>> 354dac80bbd3d1accc5f0a3f4a4fbdba41e8b6ba
group_by(id_cliente_enc) %>%
slice_max(order_by = veces_comprado, n = 1, with_ties = FALSE)
producto_mas_comprado <- producto_mas_comprado %>%
select(id_cliente_enc,producto_general)
############################### CREACION MATRIZ ################################
# VAMOS A HACER UNA MATRIZ POR CLUSTER PARA QUE LAS RECOMENDACIONES SEAN MÁS ESPECIFICAS
str(df)
cluster1 <- df %>%
filter(cluster == 1) %>%
group_by(id_cliente_enc,cod_est) %>%
summarise(Cantidad = n())
matriz1 <- pivot_wider(cluster1,
names_from = cod_est,
values_from = Cantidad)
cluster2 <- df %>%
filter(cluster == 2) %>%
group_by(id_cliente_enc,cod_est) %>%
summarise(Cantidad = n())
matriz2 <- pivot_wider(cluster2,
names_from = cod_est,
values_from = Cantidad)
cluster3 <- df %>%
filter(cluster == 3) %>%
group_by(id_cliente_enc,cod_est) %>%
summarise(Cantidad = n())
matriz3 <- pivot_wider(cluster3,
names_from = cod_est,
values_from = Cantidad)
cluster4 <- df %>%
filter(cluster == 4) %>%
group_by(id_cliente_enc,cod_est) %>%
summarise(Cantidad = n())
matriz4 <- pivot_wider(cluster4,
names_from = cod_est,
values_from = Cantidad)
# --------------------------------- MATRIZ CON TODOS LOS DATOS
general <- df %>%
group_by(id_cliente_enc,cod_est) %>%
summarise(Cantidad = n())
matriz_general <- pivot_wider(general,
names_from = cod_est,
values_from = Cantidad)
matriz_general <- as.matrix(matriz_general)
saveRDS(matriz_general,"Datos/Resultados/Matriz.rds")
# ------------------------- MATRIZ SIN NA'S
matriz_general <- readRDS("Datos\\Resultados\\Matriz.rds")
rownames(matriz_general) <- matriz_general[,1]
matriz_general <- matriz_general[,-c(1)]
# ------------ cambiamos los NA's por 0
matriz_general <- as(matriz_general, "matrix")
matriz_general[is.na(matriz_general)] <- 0
saveRDS(matriz_general,"Datos\\Resultados\\Matriz_sinNA.rds")
matriz_general
library(recommenderlab)
library(dplyr)
library(tidyr)
library(rsparse)
library(ggplot2)
library(Matrix)
library(stringr)
library(tibble)
# cargamos los datos
tickets <- readRDS("Datos\\Transformados\\tickets_Reducidos.rds")
clusteres <- readRDS("Datos\\Transformados\\df_con_clusteres.rds")
productos <- readRDS("Datos\\Originales\\maestroestr.RDS")
objetivos <- readRDS("Datos\\Originales\\objetivos.RDS")
##################################### OBJETIVO 1 ###############################
objetivo1 <- as.data.frame(objetivos[[1]])
objetivo2 <- as.data.frame(objetivos[[2]])
# ------------------------ como en este caso lo que queremos es recomendar a los 10
# usuarios mas relevantes un producto en especifico, el proceso a seguir es este:
# Entrenar el modelo
# cargar la matriz
matriz_general <- readRDS("Datos\\Resultados\\Matriz.rds")
rownames(matriz_general) <- matriz_general$id_cliente_enc
matriz_general <- matriz_general[,-1]
matriz_general <- as.matrix(matriz_general)
matriz_rec <- as(matriz_general,"realRatingMatrix")
############################### OBJETIVO 1 #####################################
# Creamos el modelo WRMF -------------------------------------------------------
matriz_general <- readRDS("Datos\\Resultados\\Matriz_sinNA.rds")
storage.mode(matriz_general) <- "numeric"
# para el objetivo 1 cambiamos filas por columnas
matriz_alreves <- t(matriz_general)
# -- MODELO:
modelo_wrmf_alreves <- WRMF$new(rank = 10L, lambda = 0.1, feedback = 'implicit')
modelo_wrmf_alreves$fit_transform(matriz_alreves, n_iter = 1000L, convergence_tol=0.000001)
matriz_obj1 <- matriz_alreves[rownames(matriz_alreves) %in% objetivos$objetivo1$obj, , drop=F]
library(recommenderlab)
library(dplyr)
library(tidyr)
library(rsparse)
library(ggplot2)
library(Matrix)
library(stringr)
library(tibble)
# cargamos los datos
tickets <- readRDS("Datos\\Transformados\\tickets_Reducidos.rds")
clusteres <- readRDS("Datos\\Transformados\\df_con_clusteres.rds")
productos <- readRDS("Datos\\Originales\\maestroestr.RDS")
objetivos <- readRDS("Datos\\Originales\\objetivos.RDS")
# para el objetivo 1 cambiamos filas por columnas
matriz_alreves <- t(matriz_general)
# -- MODELO:
modelo_wrmf_alreves <- WRMF$new(rank = 10L, lambda = 0.1, feedback = 'implicit')
modelo_wrmf_alreves$fit_transform(matriz_alreves, n_iter = 1000L, convergence_tol=0.000001)
matriz_obj1 <- matriz_alreves[rownames(matriz_alreves) %in% objetivos$objetivo1$obj, , drop=F]
matriz_obj1 <- as(matriz_obj1,"sparseMatrix")
preds_1 <- modelo_wrmf_alreves$predict(matriz_obj1, k = 10) # para que nos de 10 usuarios
preds_1
lista_1 <- attr(preds_1,'ids')
# guardamos el df en resultados
objretivo1_resultado <- as.data.frame(lista_1)
rownames(objretivo1_resultado)<- c("MASAS DE PIZZA")
saveRDS(objretivo1_resultado, "Datos\\Resultados\\Objetivo1_resultado.rds")
################################## OBJETIVO 2 ##################################
# modelo para el objetivo 2 y 4:
modelo_wrmf <- WRMF$new(rank = 10L, lambda = 0.1, feedback = 'implicit')
modelo_wrmf$fit_transform(matriz_general, n_iter = 1000L, convergence_tol=0.000001)
matriz_obj2 <- matriz_general[rownames(matriz_general) %in% objetivos$objetivo2$obj,]
matriz_obj2 <- as(matriz_obj2,"sparseMatrix")
preds_2 <- modelo_wrmf$predict(matriz_obj2, k = 1, not_recommend = matriz_obj2)
preds_2
lista_2 <- attr(preds_2,'ids')
# guardamos en un data frame
objetivo2_resultado <- as.data.frame(lista_2)
colnames(objetivo2_resultado) <- "cod_est"
objetivo2_resultado <- rownames_to_column(objetivo2_resultado, var = "Id_cliente")
objetivo2_resultado <- inner_join(objetivo2_resultado,productos,by="cod_est")
saveRDS(objetivo2_resultado,"Datos\\Resultados\\Objetivo2_resultado.rds")
################################# OBJETIVO 3 ###################################
# el modelo es el mismo que para el objetivo 1
matriz_obj3 <- matriz_general
matriz_obj3 <- as(matriz_obj3,"sparseMatrix")
# cogemos los items que no queremos que recomiente para el predict
matriz_no_recomendados <- matriz_general [,!colnames(matriz_general) %in% objetivos$objetivo3$obj]
items_no_recomendados <- colnames(matriz_no_recomendados)
preds_3 <- modelo_wrmf$predict(matriz_obj3, k = 1, items_exclude = items_no_recomendados)
preds_3
lista_3 <- attr(preds_3,'ids')
# guardamos en un data frame con el nombre del producto
objetivo3_resultado <- as.data.frame(lista_3)
colnames(objetivo3_resultado) <- "cod_est"
objetivo3_resultado <- rownames_to_column(objetivo3_resultado, var = "Id_cliente")
objetivo3_resultado <- inner_join(objetivo3_resultado,productos,by="cod_est")
saveRDS(objetivo3_resultado,"Datos\\Resultados\\Objetivo3_resultado.rds")
################################# OBJETIVO 4 ###################################
obj4<-objetivos[[4]]$obj
tickets_filtrados <- tickets[tickets$id_cliente_enc %in% obj4, ]
ultimos_tickets <- tickets_filtrados %>%
group_by(id_cliente_enc) %>%
filter(dia == max(dia)) %>%
ungroup()
historial_tickets <- anti_join(tickets_filtrados, ultimos_tickets, by = "num_ticket")
tickets_matriz_agrupado <- historial_tickets %>%
group_by(id_cliente_enc, cod_est) %>%
summarise(N_compras = n(), .groups = "drop")
df_matriz <- pivot_wider(
tickets_matriz_agrupado,
names_from = "cod_est",
values_from = "N_compras",
values_fill = 0,
names_prefix = "id_"
)
matriz_sparse_o4 <- as(as.matrix(df_matriz[,-1]), "dgCMatrix")
rownames(matriz_sparse_o4) <- df_matriz$id_cliente_enc
modelo_wrmf_o4 <- WRMF$new(rank = 10L, lambda = 0.1, feedback = 'implicit')
modelo_wrmf_o4$fit_transform(matriz_sparse_o4, n_iter = 1000L, convergence_tol = 1e-6)
preds_o4 <- modelo_wrmf_o4$predict(matriz_sparse_o4, k = 1)
clientes <- rownames(matriz_sparse_o4)
productos_predichos <- attr(preds_o4, "ids")
recomendaciones_o4 <- data.frame(
id_cliente_enc = clientes,
producto_olvidado = productos_predichos
)
recomendaciones_o4 <- recomendaciones_o4 %>%
mutate(cod_est = str_remove(producto_olvidado, "id_")) %>%
left_join(productos %>% select(cod_est, descripcion), by = "cod_est") %>%
select(id_cliente_enc, cod_est, descripcion)
# guardamos el df
saveRDS(recomendaciones_o4,"Datos\\Resultados\\Objetivo4_resultado.rds")
# Creo una lista vacia y en el bucle itero cada usuario del objetivo buscando
# la última compra realizada y guardando en la lista un df con la cantidad de
# cada producto comprado ese dia
ultimas_compras <- list()
for (c in obj4) {
tickets_matriz <- tickets %>%
filter(id_cliente_enc == c) %>%
filter(dia == max(dia))
tickets_matriz_agrupado <- tickets_matriz %>%
group_by(cod_est) %>%
summarise(dia, N_compras = n()) %>%
select(cod_est, N_compras)
ultimas_compras[[c]] <- tickets_matriz_agrupado
}
# Creo una matriz vacia con las mismas columnas que se ha entrenado el modelo
# y le pongo los nombres de las columnas y filas que les corresponden
mo4 <- matrix(0, ncol = ncol(matriz_general), nrow = length(obj4))
colnames(mo4) <- colnames(matriz_general)
rownames(mo4) <- obj4
# Con un for hago que para cada cliente y para cada producto comprado, ponga en
# la matriz en la fila y columna correspondiente la cantidad comprada
for (cliente in obj4) {
compra <- ultimas_compras[[cliente]]
for (prod in compra$cod_est) {
producto <- filter(compra, cod_est == prod)
mo4[cliente, prod] <- producto$N_compras
}
}
mo4 <- as(mo4, "sparseMatrix")
preds_o4 <- modelo_wrmf$predict(mo4, k = 1, not_recommend = mo4)
preds_o4
attr_preds_o4 <- attr(preds_o4,'ids')
preds_o4_df <- data.frame(id_cliente_enc = rownames(attr_preds_o4),
cod_est = attr_preds_o4, row.names = c())
preds_o4_nombres <- inner_join(preds_o4_df, productos, by = "cod_est")
preds_o4_nombres
<<<<<<< HEAD
saveRDS(preds_o4_nombres, "Datos/Resultados/Objetivo4_resultado.rds")
preds_o4_nombres
View(preds_o4_nombres)
View(matriz_general)
View(tickets)
View(tickets_matriz_agrupado)
View(clusteres)
=======
################################# OBJETIVO 4 ###################################
obj4<-objetivos[[4]]$obj
tickets_filtrados <- tickets[tickets$id_cliente_enc %in% obj4, ]
ultimos_tickets <- tickets_filtrados %>%
group_by(id_cliente_enc) %>%
filter(dia == max(dia)) %>%
=======
<<<<<<< HEAD
library(RColorBrewer)
# Agrupar y seleccionar top 5 por día
top5_dia <- ventas_dia_producto %>%
group_by(dia_semana) %>%
slice_max(order_by = cantidad_vendida, n = 5) %>%
>>>>>>> bf95276ae28ccb01f7e6717dd36278695d97aded
ungroup()
# Paleta de colores brillantes
colores_vivos <- brewer.pal(n = 8, name = "Set2")
# Gráfico final
ggplot(top5_dia, aes(x = dia_semana, y = cantidad_vendida, fill = producto_general)) +
geom_col() +
coord_flip() +
labs(
title = "Top 5 productos más vendidos por día de la semana",
x = "Día de la semana",
y = "Cantidad vendida",
fill = "Producto general"
) +
scale_fill_manual(values = colores_vivos) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
df <- df %>%
mutate(
dia_semana = wday(dia, label = TRUE, abbr = FALSE, week_start = 1),
dia_semana = factor(dia_semana, levels = c("lunes", "martes", "miércoles", "jueves", "viernes", "sábado", "domingo"))
) %>%
filter(dia_semana != "domingo")  # 🔥 Filtramos domingos
# Gráfico final
ggplot(top5_dia, aes(x = dia_semana, y = cantidad_vendida, fill = producto_general)) +
geom_col() +
coord_flip() +
labs(
title = "Top 5 productos más vendidos por día de la semana",
x = "Día de la semana",
y = "Cantidad vendida",
fill = "Producto general"
) +
scale_fill_manual(values = colores_vivos) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
df <- df %>%
mutate(
dia_semana = wday(dia, label = TRUE, abbr = FALSE, week_start = 1),
dia_semana = factor(dia_semana, levels = c("lunes", "martes", "miércoles", "jueves", "viernes", "sábado", "domingo"))
) %>%
filter(dia_semana != "domingo")  # 🔥 Filtramos domingos
df <- df %>%
mutate(
dia_semana = wday(dia, label = TRUE, abbr = FALSE, week_start = 1),
dia_semana = factor(dia_semana, levels = c("lunes", "martes", "miércoles", "jueves", "viernes", "sábado", "domingo"))
) %>%
filter(dia_semana != "domingo")  #  Filtramos domingos
# Asegurarse de que los códigos son texto
Maestroestr$cod_est <- as.character(Maestroestr$cod_est)
lineas$cod_est <- as.character(lineas$cod_est)
# Renombrar columnas si es necesario
colnames(lineas) <- c("fecha", "ticket", "cod_est", "id_cliente")
# Procesar tabla de líneas
lineas <- lineas %>%
mutate(
fecha = ymd(fecha),
dia_semana = wday(fecha, label = TRUE, abbr = FALSE, week_start = 1),  # lunes a domingo
prefix2 = str_sub(cod_est, 1, 2)
)
<<<<<<< HEAD
matriz_sparse_o4 <- as(as.matrix(df_matriz[,-1]), "dgCMatrix")
rownames(matriz_sparse_o4) <- df_matriz$id_cliente_enc
modelo_wrmf_o4 <- WRMF$new(rank = 10L, lambda = 0.1, feedback = 'implicit')
modelo_wrmf_o4$fit_transform(matriz_sparse_o4, n_iter = 1000L, convergence_tol = 1e-6)
preds_o4 <- modelo_wrmf_o4$predict(matriz_sparse_o4, k = 1)
clientes <- rownames(matriz_sparse_o4)
productos_predichos <- attr(preds_o4, "ids")
recomendaciones_o4 <- data.frame(
id_cliente_enc = clientes,
producto_olvidado = productos_predichos
)
recomendaciones_o4 <- recomendaciones_o4 %>%
mutate(cod_est = str_remove(producto_olvidado, "id_")) %>%
left_join(productos %>% select(cod_est, descripcion), by = "cod_est") %>%
select(id_cliente_enc, cod_est, descripcion)
recomendaciones_o4
library(plumber)
r <- plumb("Api.R")
r$run(port=8000)
=======
# Asegurarse de que los días están en orden (lunes a domingo)
top_prefix_por_dia$dia_semana <- factor(top_prefix_por_dia$dia_semana,
levels = c("lunes", "martes", "miércoles", "jueves", "viernes", "sábado", "domingo"))
# Graficar con etiquetas
ggplot(top_prefix_por_dia, aes(x = dia_semana, y = cantidad_vendida, fill = prefix2)) +
geom_col() +
geom_text(aes(label = prefix2), vjust = -0.5, size = 5, color = "black") +
labs(
title = "Prefijo de producto más vendido por día de la semana",
x = "Día de la semana",
y = "Número de productos vendidos",
fill = "Prefix2"
) +
theme_minimal()
# Gráfico final
ggplot(top5_dia, aes(x = dia_semana, y = cantidad_vendida, fill = producto_general)) +
geom_col() +
coord_flip() +
labs(
title = "Top 5 productos más vendidos por día de la semana",
x = "Día de la semana",
y = "Cantidad vendida",
fill = "Producto general"
) +
scale_fill_manual(values = colores_vivos) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Gráfico final
ggplot(top5_dia, aes(x = dia_semana, y = cantidad_vendida, fill = producto_general)) +
geom_col() +
coord_flip() +
labs(
title = "Top 5 productos más vendidos por día de la semana",
x = "Día de la semana",
y = "Cantidad vendida",
fill = "Producto general"
) +
scale_fill_manual(values = colores_vivos) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(ventas_por_semana, aes(x = semana, y = n)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(
title = "Productos vendidos por semana del año"
x = "Semana (fecha de inicio)",
ggplot(ventas_por_semana, aes(x = semana, y = n)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(
title = "Productos vendidos por semana del año",
x = "Semana (fecha de inicio)",
y = "Cantidad de productos"
) +
theme_minimal()
# Productos vendidos por semana
# Mutar la columna para que 'semana' sea el número de la semana del año
datos <- datos %>%
mutate(semana = floor_date(fecha, unit = "week", week_start = 1),
semana_numero = format(semana, "%U"))  # Esto extrae el número de semana del año
# Crear el gráfico
ventas_por_semana <- datos %>%
count(semana)
ggplot(ventas_por_semana, aes(x = semana, y = n)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(
title = "Productos vendidos por semana del año",
x = "Semana (fecha de inicio)",
y = "Cantidad de productos"
) +
theme_minimal() +
scale_x_date(labels = scales::date_format("%U"), breaks = "1 week") # Muestra el número de la semana
library(recommenderlab)
library(dplyr)
library(tidyr)
library(rsparse)
library(ggplot2)
# cargamos los datos
tickets <- readRDS("Datos\\Transformados\\tickets_Reducidos.rds")
clusteres <- readRDS("Datos\\Transformados\\df_con_clusteres.rds")
productos <- readRDS("Datos\\Originales\\maestroestr.RDS")
objetivos <- readRDS("Datos\\Originales\\objetivos.RDS")
##################################### OBJETIVO 1 ###############################
objetivo1 <- as.data.frame(objetivos[[1]])
objetivo2 <- as.data.frame(objetivos[[2]])
# ------------------------ como en este caso lo que queremos es recomendar a los 10
# usuarios mas relevantes un producto en especifico, el proceso a seguir es este:
# Entrenar el modelo
# cargar la matriz
matriz_general <- readRDS("Datos\\Resultados\\Matriz.rds")
rownames(matriz_general) <- matriz_general$id_cliente_enc
matriz_general <- matriz_general[,-1]
matriz_rec <- as.matrix(matriz_general)
matriz_rec <- as(matriz_rec,"realRatingMatrix")
# --------------------- ESTADÍSTICOS DE LA MATRIZ
matriz <- as(matriz_general,"matrix")
recuentoF <- rowCounts(matriz_rec) # cuantas celditas de una fila son diferentes de NA (cuantas pelis ha valorado cada usuario)
recuentoC <- colCounts(matriz_rec) # cuantas celditas de una columna son diferentes de NA
max(matriz,na.rm=T) ; min(matriz, na.rm=T)
# MEDIAS
media_columnas <- colMeans(matriz_rec,na.rm=T)
media_filas <- rowMeans(matriz_rec,na.rm=T)
hist(media_filas)
hist(media_columnas)
# PARA SABER EL GOODRATING Y EL GIVEN
min(recommenderlab::rowCounts(matriz_rec,na.rm=T))
######################### RECOMENDADORES CON RECOMMENDERLAB ####################
set.seed(8)
# --------------------------- TRAIN Y TEST
eval_scheme <- evaluationScheme(matriz_rec, method = "split",
train = 0.8, given= 1,
goodRating = 2)
# -------------------------- ENTRENAR MODELOS :
algos <- list("random" = list(name = "RANDOM", param = NULL),
"UBCF_10nn" = list(name = "UBCF", param = list(nn = 10)), # vecinos mas cercanos
"UBCF_50nn" = list(name = "UBCF", param = list(nn = 50)),
"IBCF_Pearson" = list(name = "IBCF", param = list(method = "Pearson")),
"popular" = list(name = "POPULAR" , param = NULL),
"svdf_50" = list(name = "SVDF",param = list(k=50)),
"svdf_100" = list(name = "SVDF",param = list(k=100)),
"svdf_200" = list(name = "SVDF",param = list(k=200)))
# ----------- TOPNLIST
eval <- evaluate(eval_scheme, algos, type = "topNList", n = c(1,3,5,10,15,20))
plumber::plumb(file='Api.R')$run()
plumber::plumb(file='Api.R')$run()
library(dplyr)
library(lubridate)
library(stringr)
library(tidyr)
library(tidyverse)
library(purrr)
library(plotly)
library(naniar)
library(VIM)
# Cargamos los ficheros previamente limpios
#Maestroestr <- readRDS("Datos\\Originales\\maestroestr.RDS")
#
# df_entero <- readRDS("Datos\\Transformados\\df_clustering_entero.rds")
# tickets_enc <- readRDS("Datos\\Originales\\tickets_enc.RDS")
#
# sum(is.na(df_entero))
# miss_var_summary(df_entero)
#
# str(df_entero)
# colnames(df_entero)[1] <- "id_cliente_enc"
#PRUEBA
# --- PRIMER FILTRO: cod_est ---
data <- readRDS("Datos/Transformados/tickets_enc.rds")
# Agrupar por cod_est y contar la cantidad de apariciones
conteo_cod <- data %>%
group_by(cod_est) %>%
summarise(cantidad = n(), .groups = "drop")
q1_cod <- quantile(conteo_cod$cantidad, 0.25, na.rm = TRUE)
q3_cod <- quantile(conteo_cod$cantidad, 0.75, na.rm = TRUE)
# Filtrar los cod_est fuera del rango intercuartílico
cod_filtrados <- conteo_cod %>%
filter(cantidad > q3_cod | cantidad <= q1_cod) %>%
pull(cod_est)
data_filtrada <- data %>%
filter(cod_est %in% cod_filtrados)
objetivos <- readRDS("Datos/Originales/objetivos.RDS")
clientes_objetivo <- purrr::map(objetivos, "obj") %>% unlist() %>% unique()
# Recuperar registros de clientes objetivo que fueron eliminados por cod_est
clientes_rescatados <- data %>%
filter(id_cliente_enc %in% clientes_objetivo)
data_filtrada <- bind_rows(data_filtrada, clientes_rescatados) %>%
distinct()
saveRDS(data_filtrada, "Datos/Transformados/tickets_filtrados_cod_est.rds")
# --- SEGUNDO FILTRO: id_cliente_enc ---
data_cod <- readRDS("Datos/Transformados/tickets_filtrados_cod_est.rds")
# Agrupar por id_cliente_enc y contar
conteo_cli <- data_cod %>%
group_by(id_cliente_enc) %>%
summarise(cantidad = n(), .groups = "drop")
q1_cli <- quantile(conteo_cli$cantidad, 0.25, na.rm = TRUE)
q3_cli <- quantile(conteo_cli$cantidad, 0.75, na.rm = TRUE)
# Filtrar los id_cliente_enc fuera del rango intercuartílico
clientes_filtrados <- conteo_cli %>%
filter(cantidad > q3_cli | cantidad <= q1_cli) %>%
pull(id_cliente_enc)
# Clientes filtrados por IQR + los que deben mantenerse sí o sí
objetivos <- readRDS("Datos//Originales//objetivos.RDS")
# Unir todos los clientes objetivo en un único vector
clientes_objetivo <- purrr::map(objetivos, "obj") %>%
unlist() %>%
unique()
clientes_finales <- union(clientes_filtrados, clientes_objetivo)
data_final <- data_cod %>%
filter(id_cliente_enc %in% clientes_finales)
saveRDS(data_final, "Datos/Transformados/tickets_Reducidos.rds")
#VERIFICAR QUE SE HAN QUITADO 50% de clientes y productos
data_original <- readRDS("Datos/Transformados/tickets_enc.rds")
data_Reducida <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
# Total de cod_est únicos en original y en filtrado
n_total_cod <- n_distinct(data_original$cod_est)
n_filtrado_cod <- n_distinct(data_Reducida$cod_est)
# Calcular % eliminados
porcentaje_cod_est_eliminados <- 100 * (1 - n_filtrado_cod / n_total_cod)
cat("Se han eliminado aproximadamente", round(porcentaje_cod_est_eliminados, 2), "% de cod_est\n")
data_filtrada_cod <- readRDS("Datos/Transformados/tickets_filtrados_cod_est.rds")
# Cargar datos finales
data_final <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
# Total de clientes únicos antes y después
n_total_cli <- n_distinct(data_filtrada_cod$id_cliente_enc)
n_filtrado_cli <- n_distinct(data_final$id_cliente_enc)
>>>>>>> eb0085f81df6c93a3bb93775f113f952cd7c9573
# Calcular % eliminados
porcentaje_clientes_eliminados <- 100 * (1 - n_filtrado_cli / n_total_cli)
cat("Se han eliminado aproximadamente", round(porcentaje_clientes_eliminados, 2), "% de clientes\n")
a
data_final <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
library(dplyr)
library(lubridate)
library(stringr)
library(tidyr)
library(tidyverse)
library(purrr)
library(plotly)
library(naniar)
library(VIM)
data_final <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
data_final <- data_final %>%
mutate(dia = ymd(dia))
View(data_final)
data_final <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
View(data_final)
View(data_final)
data_final <- data_final %>% group_by(dia) %>% summarise(conteo=n())
View(data_final)
data_final <- data_final %>%
mutate(dia = ymd(dia))
data_final <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
data_final <- data_final %>%
mutate(dia = ymd(dia))
min(data_final$dia)
max(data_final$dia)
data_final <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
clientes_variedad <- data_final %>%
group_by(id_cliente_enc) %>%
summarise(productos_diferentes = n_distinct(cod_est)) %>%
filter(productos_diferentes >= 5) %>%
pull(id_cliente_enc)
data_filtrada_variedad <- data_final %>%
filter(id_cliente_enc %in% clientes_variedad)
View(data_filtrada_variedad)
#Otro Filtro
tamanio_ticket <- data_final %>%
group_by(id_cliente_enc, num_ticket) %>%
summarise(n_productos = n(), .groups = "drop") %>%
group_by(id_cliente_enc) %>%
summarise(media_cesta = mean(n_productos)) %>%
filter(media_cesta >= 2) %>%
pull(id_cliente_enc)
data_final <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
#Otro Filtro
tamanio_ticket <- data_final %>%
group_by(id_cliente_enc, num_ticket) %>%
summarise(n_productos = n(), .groups = "drop") %>%
group_by(id_cliente_enc) %>%
summarise(media_cesta = mean(n_productos)) %>%
filter(media_cesta >= 2) %>%
pull(id_cliente_enc)
data_filtrada_cesta <- data_final %>%
filter(id_cliente_enc %in% tamanio_ticket)
clientes_variedad <- data_final %>%
group_by(id_cliente_enc) %>%
summarise(productos_diferentes = n_distinct(cod_est)) %>%
filter(productos_diferentes >= 5) %>%
pull(id_cliente_enc)
data_filtrada_variedad <- data_final %>%
filter(id_cliente_enc %in% clientes_variedad)
# Calcular frecuencia de productos
data_final <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
productos_populares <- data_final %>%
group_by(cod_est) %>%
summarise(frecuencia = n()) %>%
filter(frecuencia >= 30) %>%
pull(cod_est)
# Filtrar dataset
data_filtrada_popularidad <- data_final %>%
filter(cod_est %in% productos_populares)
# Calcular frecuencia de productos, (productos poco populares)
data_final <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
#Clientes con pocas compras totales
clientes_fieles <- data_final %>%
group_by(id_cliente_enc) %>%
summarise(n_compras = n_distinct(num_ticket)) %>%
filter(n_compras >= 5) %>%
pull(id_cliente_enc)
data_filtrada_clientes_fieles <- data_final %>%
filter(id_cliente_enc %in% clientes_fieles)
#
data_final <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
tickets_grandes <- data_final %>%
group_by(num_ticket) %>%
summarise(n_items = n()) %>%
filter(n_items > 1) %>%
pull(num_ticket)
data_filtrada_cestas_grandes <- data_final %>%
filter(num_ticket %in% tickets_grandes)
library(plumber)
r <- plumb("Api.R")
r$run(port=8000)
# Clientes filtrados por IQR + los que deben mantenerse sí o sí
objetivos <- readRDS("Datos//Originales//objetivos.RDS")
objetivos$objetivo2$obj[1]
library(plumber)
r <- plumb("Api.R")
r$run(port=8000)
objetivos$objetivo4$obj[1]
library(plumber)
r <- plumb("Api.R")
r$run(port=8000)
objetivos$objetivo2$obj
objetivos$objetivo4$obj
library(plumber)
r <- plumb("Api.R")
r$run(port=8000)
library(plumber)
r <- plumb("Api.R")
r$run(port=8000)
library(plumber)
library(plumber)
r <- plumb("Api.R")
r$run(port=8000)
Maestroestr <- readRDS("Datos\\Originales\\maestroestr.RDS")
View(Maestroestr)
r$run(port=8000)
plumb(file='Api.R')$run()
library(plumber)
r <- plumb("Api.R")
r$run(port=8000)
objetivos <- readRDS("Datos/Originales/objetivos.RDS")
# Extraer objetivos
objetivo1 <- objetivos$objetivo1$obj
objetivo1
objetivo2
objetivo2 <- objetivos$objetivo2$obj
objetivo3 <- objetivos$objetivo3$obj
objetivo4 <- objetivos$objetivo4$obj
objetivo2
plumber::plumb(file='ApiXabi.R')$run()
objetivo3
objetivo4
plumb(file='ApiXabi.R')$run()
library(dplyr)
library(lubridate)
library(stringr)
library(tidyr)
library(tidyverse)
library(purrr)
library(plotly)
library(naniar)
library(VIM)
# Cargamos los ficheros previamente limpios
#Maestroestr <- readRDS("Datos\\Originales\\maestroestr.RDS")
#
# df_entero <- readRDS("Datos\\Transformados\\df_clustering_entero.rds")
# tickets_enc <- readRDS("Datos\\Originales\\tickets_enc.RDS")
#
# sum(is.na(df_entero))
# miss_var_summary(df_entero)
#
# str(df_entero)
# colnames(df_entero)[1] <- "id_cliente_enc"
#PRUEBA
# --- PRIMER FILTRO: cod_est ---
data <- readRDS("Datos/Transformados/tickets_enc.rds")
# Agrupar por cod_est y contar la cantidad de apariciones
conteo_cod <- data %>%
group_by(cod_est) %>%
summarise(cantidad = n(), .groups = "drop")
q1_cod <- quantile(conteo_cod$cantidad, 0.25, na.rm = TRUE)
q3_cod <- quantile(conteo_cod$cantidad, 0.75, na.rm = TRUE)
# Filtrar los cod_est fuera del rango intercuartílico
cod_filtrados <- conteo_cod %>%
filter(cantidad > q3_cod | cantidad <= q1_cod) %>%
pull(cod_est)
data_filtrada <- data %>%
filter(cod_est %in% cod_filtrados)
objetivos <- readRDS("Datos/Originales/objetivos.RDS")
clientes_objetivo <- purrr::map(objetivos, "obj") %>% unlist() %>% unique()
# Recuperar registros de clientes objetivo que fueron eliminados por cod_est
clientes_rescatados <- data %>%
filter(id_cliente_enc %in% clientes_objetivo)
data_filtrada <- bind_rows(data_filtrada, clientes_rescatados) %>%
distinct()
saveRDS(data_filtrada, "Datos/Transformados/tickets_filtrados_cod_est.rds")
# --- SEGUNDO FILTRO: id_cliente_enc ---
data_cod <- readRDS("Datos/Transformados/tickets_filtrados_cod_est.rds")
# Agrupar por id_cliente_enc y contar
conteo_cli <- data_cod %>%
group_by(id_cliente_enc) %>%
summarise(cantidad = n(), .groups = "drop")
q1_cli <- quantile(conteo_cli$cantidad, 0.25, na.rm = TRUE)
q3_cli <- quantile(conteo_cli$cantidad, 0.75, na.rm = TRUE)
# Filtrar los id_cliente_enc fuera del rango intercuartílico
clientes_filtrados <- conteo_cli %>%
filter(cantidad > q3_cli | cantidad <= q1_cli) %>%
pull(id_cliente_enc)
# Clientes filtrados por IQR + los que deben mantenerse sí o sí
objetivos <- readRDS("Datos//Originales//objetivos.RDS")
# Unir todos los clientes objetivo en un único vector
clientes_objetivo <- purrr::map(objetivos, "obj") %>%
unlist() %>%
unique()
clientes_finales <- union(clientes_filtrados, clientes_objetivo)
data_final <- data_cod %>%
filter(id_cliente_enc %in% clientes_finales)
saveRDS(data_final, "Datos/Transformados/tickets_Reducidos.rds")
#VERIFICAR QUE SE HAN QUITADO 50% de clientes y productos
data_original <- readRDS("Datos/Transformados/tickets_enc.rds")
data_Reducida <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
# Total de cod_est únicos en original y en filtrado
n_total_cod <- n_distinct(data_original$cod_est)
n_filtrado_cod <- n_distinct(data_Reducida$cod_est)
# Calcular % eliminados
porcentaje_cod_est_eliminados <- 100 * (1 - n_filtrado_cod / n_total_cod)
cat("Se han eliminado aproximadamente", round(porcentaje_cod_est_eliminados, 2), "% de cod_est\n")
data_filtrada_cod <- readRDS("Datos/Transformados/tickets_filtrados_cod_est.rds")
data_final <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
# Total de clientes únicos antes y después
n_total_cli <- n_distinct(data_filtrada_cod$id_cliente_enc)
n_filtrado_cli <- n_distinct(data_final$id_cliente_enc)
# Calcular % eliminados
porcentaje_clientes_eliminados <- 100 * (1 - n_filtrado_cli / n_total_cli)
cat("Se han eliminado aproximadamente", round(porcentaje_clientes_eliminados, 2), "% de clientes\n")
lenght(unique(data_final$id_cliente_enc))
length(unique(data_final$id_cliente_enc))
length(unique(data_final$cod_est))
#Clientes con pocas compras totales
#Clientes que han hecho solo 1 o 2 compras no permiten detectar patrones reales de comportamiento.
clientes_fieles <- data_final %>%
group_by(id_cliente_enc) %>%
summarise(n_compras = n_distinct(num_ticket)) %>%
filter(n_compras >= 5) %>%
pull(id_cliente_enc)
data_filtrada_clientes_fieles <- data_final %>%
filter(id_cliente_enc %in% clientes_fieles)
length(unique(data_filtrada_clientes_fieles$id_cliente_enc))#22718
length(unique(data_filtrada_clientes_fieles$cod_est))#1683
library(plumber)
r <- plumb("Api.R")
r$run(port=8000)
objetivos <- readRDS("Datos/Originales/objetivos.RDS")
objetivo4 <- objetivos$objetivo4$obj
objetivo4
plumb(file='Api.R')$run()
View(objetivos)
Objetivo4 <- readRDS("Datos/Resultados/Objetivo4_resultado.rds")
View(Objetivo4)
<<<<<<< HEAD
plumber::plumb(file='Api.R')$run()
# Cargar datos de resultados finales
resultado1 <- readRDS("Datos/Resultados/Objetivo1_resultado.rds")
View(resultado1)
resultado2 <- readRDS("Datos/Resultados/Objetivo2_resultado.rds")
View(resultado2)
resultado3 <- readRDS("Datos/Resultados/Objetivo3_resultado.rds")
resultado4 <- readRDS("Datos/Resultados/Objetivo4_resultado.rds")
resultado3
resultado4
View(resultado4)
View(resultado3)
View(resultado1)
View(resultado2)
View(resultado1)
resultado1
plumb(file='Api.R')$run()
resultado2 <- readRDS("Datos/Resultados/Objetivo2_resultado.rds")
resultado2
plumb(file='Api.R')$run()
View(resultado4)
View(resultado3)
View(resultado1)
plumb(file='Api.R')$run()
plumb(file='Api.R')$run()
resultado4
resultado3
resultado2
resultado3
plumb(file='Api.R')$run()
library(dplyr)
library(lubridate)
library(stringr)
library(tidyr)
library(tidyverse)
library(purrr)
library(plotly)
library(naniar)
library(VIM)
data <- readRDS("Datos/Transformados/tickets_enc.rds")
# Agrupar por cod_est y contar la cantidad de apariciones
conteo_cod <- data %>%
group_by(cod_est) %>%
summarise(cantidad = n(), .groups = "drop")
q1_cod <- quantile(conteo_cod$cantidad, 0.25, na.rm = TRUE)
q3_cod <- quantile(conteo_cod$cantidad, 0.75, na.rm = TRUE)
# Filtrar los cod_est fuera del rango intercuartílico
cod_filtrados <- conteo_cod %>%
filter(cantidad > q3_cod | cantidad <= q1_cod) %>%
pull(cod_est)
data_filtrada <- data %>%
filter(cod_est %in% cod_filtrados)
objetivos <- readRDS("Datos/Originales/objetivos.RDS")
clientes_objetivo <- purrr::map(objetivos, "obj") %>% unlist() %>% unique()
# Recuperar registros de clientes objetivo que fueron eliminados por cod_est
clientes_rescatados <- data %>%
filter(id_cliente_enc %in% clientes_objetivo)
data_filtrada <- bind_rows(data_filtrada, clientes_rescatados) %>%
distinct()
saveRDS(data_filtrada, "Datos/Transformados/tickets_filtrados_cod_est.rds")
data_cod <- readRDS("Datos/Transformados/tickets_filtrados_cod_est.rds")
# Agrupar por id_cliente_enc y contar
conteo_cli <- data_cod %>%
group_by(id_cliente_enc) %>%
summarise(cantidad = n(), .groups = "drop")
q1_cli <- quantile(conteo_cli$cantidad, 0.25, na.rm = TRUE)
q3_cli <- quantile(conteo_cli$cantidad, 0.75, na.rm = TRUE)
# Filtrar los id_cliente_enc fuera del rango intercuartílico
clientes_filtrados <- conteo_cli %>%
filter(cantidad > q3_cli | cantidad <= q1_cli) %>%
pull(id_cliente_enc)
# Clientes filtrados por IQR + los que deben mantenerse sí o sí
objetivos <- readRDS("Datos//Originales//objetivos.RDS")
# Unir todos los clientes objetivo en un único vector
clientes_objetivo <- purrr::map(objetivos, "obj") %>%
unlist() %>%
unique()
clientes_finales <- union(clientes_filtrados, clientes_objetivo)
data_final <- data_cod %>%
filter(id_cliente_enc %in% clientes_finales)
saveRDS(data_final, "Datos/Transformados/tickets_Reducidos.rds")
#VERIFICAR QUE SE HAN QUITADO 50% de clientes y productos
data_original <- readRDS("Datos/Transformados/tickets_enc.rds")
data_Reducida <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
# Total de cod_est únicos en original y en filtrado
n_total_cod <- n_distinct(data_original$cod_est)
n_filtrado_cod <- n_distinct(data_Reducida$cod_est)
# Calcular % eliminados
porcentaje_cod_est_eliminados <- 100 * (1 - n_filtrado_cod / n_total_cod)
cat("Se han eliminado aproximadamente", round(porcentaje_cod_est_eliminados, 2), "% de cod_est\n")
data_filtrada_cod <- readRDS("Datos/Transformados/tickets_filtrados_cod_est.rds")
data_final <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
# Total de clientes únicos antes y después
n_total_cli <- n_distinct(data_filtrada_cod$id_cliente_enc)
n_filtrado_cli <- n_distinct(data_final$id_cliente_enc)
# Calcular % eliminados
porcentaje_clientes_eliminados <- 100 * (1 - n_filtrado_cli / n_total_cli)
cat("Se han eliminado aproximadamente", round(porcentaje_clientes_eliminados, 2), "% de clientes\n")
length(unique(data_final$id_cliente_enc))#22718
length(unique(data_final$cod_est))#1683
data_final <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
clientes_variedad <- data_final %>%
group_by(id_cliente_enc) %>%
summarise(productos_diferentes = n_distinct(cod_est)) %>%
filter(productos_diferentes >= 5) %>%
pull(id_cliente_enc)
data_filtrada_variedad <- data_final %>%
filter(id_cliente_enc %in% clientes_variedad)
data_final <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
clientes_variedad <- data_final %>%
group_by(id_cliente_enc) %>%
summarise(productos_diferentes = n_distinct(cod_est)) %>%
filter(productos_diferentes >= 5) %>%
pull(id_cliente_enc)
data_filtrada_variedad <- data_final %>%
filter(id_cliente_enc %in% clientes_variedad)
# Calcular frecuencia de productos, (productos poco populares)
data_final <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
productos_populares <- data_final %>%
group_by(cod_est) %>%
summarise(frecuencia = n()) %>%
filter(frecuencia >= 30) %>%
pull(cod_est)
# Filtrar dataset
data_filtrada_popularidad <- data_final %>%
filter(cod_est %in% productos_populares)
n_clientes_finales <- n_distinct(data_filtrada_popularidad$id_cliente_enc)
n_productos_finales <- n_distinct(data_filtrada_popularidad$cod_est)
cat("Número total de clientes tras filtros:", n_clientes_finales, "\n")
cat("Número total de productos tras filtros:", n_productos_finales, "\n")
data_original <- readRDS("Datos/Transformados/tickets_enc.rds")
n_clientes_orig <- n_distinct(data_original$id_cliente_enc)
n_productos_orig <- n_distinct(data_original$cod_est)
cat("Clientes originales:", n_clientes_orig, "→ Finales:", n_clientes_finales,
"→ Eliminados:", round(100 * (1 - n_clientes_finales / n_clientes_orig), 2), "%\n")
cat("Productos originales:", n_productos_orig, "→ Finales:", n_productos_finales,
"→ Eliminados:", round(100 * (1 - n_productos_finales / n_productos_orig), 2), "%\n")
cat("Se han eliminado aproximadamente", round(porcentaje_cod_est_eliminados, 2), "% de cod_est\n")
cat("Se han eliminado aproximadamente", round(porcentaje_clientes_eliminados, 2), "% de clientes\n")
library(dplyr)
library(lubridate)
library(stringr)
library(tidyr)
library(tidyverse)
library(purrr)
library(plotly)
library(naniar)
library(VIM)
# Cargamos los ficheros previamente limpios
#Maestroestr <- readRDS("Datos\\Originales\\maestroestr.RDS")
#
# df_entero <- readRDS("Datos\\Transformados\\df_clustering_entero.rds")
# tickets_enc <- readRDS("Datos\\Originales\\tickets_enc.RDS")
#
# sum(is.na(df_entero))
# miss_var_summary(df_entero)
#
# str(df_entero)
# colnames(df_entero)[1] <- "id_cliente_enc"
#PRUEBA
# --- PRIMER FILTRO: cod_est ---
data <- readRDS("Datos/Transformados/tickets_enc.rds")
# Agrupar por cod_est y contar la cantidad de apariciones
conteo_cod <- data %>%
group_by(cod_est) %>%
summarise(cantidad = n(), .groups = "drop")
q1_cod <- quantile(conteo_cod$cantidad, 0.25, na.rm = TRUE)
q3_cod <- quantile(conteo_cod$cantidad, 0.75, na.rm = TRUE)
# Filtrar los cod_est fuera del rango intercuartílico
cod_filtrados <- conteo_cod %>%
filter(cantidad > q3_cod | cantidad <= q1_cod) %>%
pull(cod_est)
data_filtrada <- data %>%
filter(cod_est %in% cod_filtrados)
objetivos <- readRDS("Datos/Originales/objetivos.RDS")
clientes_objetivo <- purrr::map(objetivos, "obj") %>% unlist() %>% unique()
# Recuperar registros de clientes objetivo que fueron eliminados por cod_est
clientes_rescatados <- data %>%
filter(id_cliente_enc %in% clientes_objetivo)
data_filtrada <- bind_rows(data_filtrada, clientes_rescatados) %>%
distinct()
saveRDS(data_filtrada, "Datos/Transformados/tickets_filtrados_cod_est.rds")
# --- SEGUNDO FILTRO: id_cliente_enc ---
data_cod <- readRDS("Datos/Transformados/tickets_filtrados_cod_est.rds")
# Agrupar por id_cliente_enc y contar
conteo_cli <- data_cod %>%
group_by(id_cliente_enc) %>%
summarise(cantidad = n(), .groups = "drop")
q1_cli <- quantile(conteo_cli$cantidad, 0.25, na.rm = TRUE)
q3_cli <- quantile(conteo_cli$cantidad, 0.75, na.rm = TRUE)
# Filtrar los id_cliente_enc fuera del rango intercuartílico
clientes_filtrados <- conteo_cli %>%
filter(cantidad > q3_cli | cantidad <= q1_cli) %>%
pull(id_cliente_enc)
# Clientes filtrados por IQR + los que deben mantenerse sí o sí
objetivos <- readRDS("Datos//Originales//objetivos.RDS")
# Unir todos los clientes objetivo en un único vector
clientes_objetivo <- purrr::map(objetivos, "obj") %>%
unlist() %>%
unique()
clientes_finales <- union(clientes_filtrados, clientes_objetivo)
data_final <- data_cod %>%
filter(id_cliente_enc %in% clientes_finales)
saveRDS(data_final, "Datos/Transformados/tickets_Reducidos.rds")
#VERIFICAR QUE SE HAN QUITADO 50% de clientes y productos
data_original <- readRDS("Datos/Transformados/tickets_enc.rds")
data_Reducida <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
# Total de cod_est únicos en original y en filtrado
n_total_cod <- n_distinct(data_original$cod_est)
n_filtrado_cod <- n_distinct(data_Reducida$cod_est)
# Calcular % eliminados
porcentaje_cod_est_eliminados <- 100 * (1 - n_filtrado_cod / n_total_cod)
cat("Se han eliminado aproximadamente", round(porcentaje_cod_est_eliminados, 2), "% de cod_est\n")
data_filtrada_cod <- readRDS("Datos/Transformados/tickets_filtrados_cod_est.rds")
data_final <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
# Total de clientes únicos antes y después
n_total_cli <- n_distinct(data_filtrada_cod$id_cliente_enc)
n_filtrado_cli <- n_distinct(data_final$id_cliente_enc)
# Calcular % eliminados
porcentaje_clientes_eliminados <- 100 * (1 - n_filtrado_cli / n_total_cli)
cat("Se han eliminado aproximadamente", round(porcentaje_clientes_eliminados, 2), "% de clientes\n")
length(unique(data_final$id_cliente_enc))#22718
length(unique(data_final$cod_est))#1683
data_final <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
n_original_prod <- n_distinct(data_final$cod_est)
umbral_encontrado <- NULL
for (umbral in 1:100) {
productos_validos <- data_final %>%
group_by(cod_est) %>%
summarise(frecuencia = n()) %>%
filter(frecuencia >= umbral) %>%
pull(cod_est)
productos_filtrados <- data_final %>%
filter(cod_est %in% productos_validos)
n_filtrados <- n_distinct(productos_filtrados$cod_est)
porcentaje_restante <- 100 * n_filtrados / n_original_prod
if (round(porcentaje_restante, 2) <= 50) {
umbral_encontrado <- umbral
cat("Umbral mínimo de frecuencia para mantener ~50% de productos:", umbral, "\n")
cat("Productos restantes:", n_filtrados, "/", n_original_prod, "→", round(porcentaje_restante, 2), "%\n")
break
}
}
length(unique(data_final$cod_est))#1683
length(unique(data_final$id_cliente_enc))#22718
data_final <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
clientes_variedad <- data_final %>%
group_by(id_cliente_enc) %>%
summarise(productos_diferentes = n_distinct(cod_est)) %>%
filter(productos_diferentes >= 5) %>%
pull(id_cliente_enc)
data_filtrada_variedad <- data_final %>%
filter(id_cliente_enc %in% clientes_variedad)
# Calcular frecuencia de productos, (productos poco populares)
data_final <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
productos_populares <- data_final %>%
group_by(cod_est) %>%
summarise(frecuencia = n()) %>%
filter(frecuencia >= 30) %>%
pull(cod_est)
# Filtrar dataset
data_filtrada_popularidad <- data_final %>%
filter(cod_est %in% productos_populares)
length(unique(data_final$id_cliente_enc))#22718
length(unique(data_final$cod_est))#1683
cat("Se han eliminado aproximadamente", round(porcentaje_cod_est_eliminados, 2), "% de cod_est\n")
cat("Se han eliminado aproximadamente", round(porcentaje_clientes_eliminados, 2), "% de clientes\n")
=======
=======
>>>>>>> 0f4bf9c8521645224714a22bb76a455a0ca45cdf
>>>>>>> bf95276ae28ccb01f7e6717dd36278695d97aded
>>>>>>> eb0085f81df6c93a3bb93775f113f952cd7c9573
>>>>>>> 354dac80bbd3d1accc5f0a3f4a4fbdba41e8b6ba
