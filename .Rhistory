<<<<<<< HEAD
=======
<<<<<<< HEAD
=======
coord_flip() +
labs(title = "Top 10 productos más vendidos", x = "Producto")
# Tickets por día
datos %>%
group_by(fecha) %>%
summarise(tickets = n_distinct(ticket)) %>%
ggplot(aes(x = fecha, y = tickets)) +
geom_line(color = "steelblue") +
labs(title = "Número de tickets por día", x = "Fecha", y = "Tickets")
# Productos vendidos por día de la semana
datos <- datos %>%
mutate(
fecha = ymd(fecha),
dia_semana = wday(fecha, label = TRUE, abbr = FALSE, week_start = 1)
)
ventas_por_dia <- datos %>%
count(dia_semana)
ggplot(ventas_por_dia, aes(x = dia_semana, y = n)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(
title = "Cantidad total de productos vendidos por día de la semana",
x = "Día de la semana",
y = "Productos vendidos"
) +
theme_minimal()
# Productos vendidos por semana
datos <- datos %>%
mutate(semana = floor_date(fecha, unit = "week", week_start = 1))
ventas_por_semana <- datos %>%
count(semana)
ggplot(ventas_por_semana, aes(x = semana, y = n)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(
title = "Productos vendidos por semana",
x = "Semana (fecha de inicio)",
y = "Cantidad de productos"
) +
theme_minimal()
# Top 10 clientes que más compraron
compras_por_cliente <- datos %>%
group_by(id_cliente) %>%
summarise(productos_comprados = n()) %>%
arrange(desc(productos_comprados))
top_10 <- compras_por_cliente %>% slice_head(n = 10)
ggplot(top_10, aes(x = reorder(id_cliente, productos_comprados), y = productos_comprados)) +
geom_bar(stat = "identity", fill = "darkgreen") +
coord_flip() +
labs(title = "Top 10 clientes más compradores",
x = "ID Cliente", y = "Productos comprados") +
theme_minimal()
# Unir clusters con tickets limpios
df <- left_join(tickets_limpios, clusteres, by = "id_cliente_enc")
df <- df[ , -c(5,6,7)]  # Eliminar columnas innecesarias
# Clasificación general de productos
df <- df %>%
mutate(
cod_est = as.character(cod_est),
producto_general = case_when(
grepl("^010\\d+", cod_est) ~ "Fruta y verdura",
grepl("^0125\\d+", cod_est) ~ "Legumbres y frutos secos a granel",
grepl("^02\\d+", cod_est) ~ "Carniceria",
grepl("^03\\d+", cod_est) ~ "Congelados",
grepl("^04\\d+", cod_est) ~ "Charcuteria",
grepl("^050\\d+", cod_est) ~ "Lacteos",
grepl("^051\\d+", cod_est) ~ "Lacteos y postres",
grepl("^052\\d+", cod_est) ~ "Huevos y leche fresco",
grepl("^06\\d+", cod_est) ~ "Panaderia",
grepl("^07\\d+", cod_est) ~ "Carniceria",
grepl("^081\\d+", cod_est) ~ "Latas o mermeladas",
grepl("^082\\d+", cod_est) ~ "Latas",
grepl("^083140\\d+", cod_est) ~ "Conservas",
grepl("^083145\\d+", cod_est) ~ "Alimentacion animales",
grepl("^0833\\d+", cod_est) ~ "Snacks",
grepl("^084\\d+", cod_est) ~ "Snacks",
grepl("^080\\d+", cod_est) ~ "Snacks",
grepl("^090\\d+", cod_est) ~ "Salsas y arroces/pastas",
grepl("^091\\d+", cod_est) ~ "Salsas y arroces/pastas",
grepl("^092\\d+", cod_est) ~ "Frigorifico (sin productos de origen animal)",
grepl("^093\\d+", cod_est) ~ "Especies",
grepl("^10\\d+", cod_est) ~ "Panaderia",
grepl("^11\\d+", cod_est) ~ "Alcoholes",
grepl("^1213\\d+", cod_est) ~ "Higiene",
grepl("^13\\d+", cod_est) ~ "Higiene",
grepl("^14\\d+", cod_est) ~ "Platos preparados",
TRUE ~ "Otros"
)
)
# Asegurar tipo de fecha y ordenar días
df$fecha <- ymd(df$dia)
df <- df %>%
mutate(
dia_semana = wday(dia, label = TRUE, abbr = FALSE, week_start = 1),
dia_semana = factor(dia_semana, levels = c("lunes", "martes", "miércoles", "jueves", "viernes", "sábado", "domingo"))
)
# Agrupar por día y categoría
ventas_dia_producto <- df %>%
group_by(dia_semana, producto_general) %>%
summarise(cantidad_vendida = n(), .groups = "drop")
# Gráfico apilado por categoría y día
ggplot(ventas_dia_producto, aes(x = dia_semana, y = cantidad_vendida, fill = producto_general)) +
geom_col() +
coord_flip() +
labs(
title = "Cantidad de productos vendidos por día de la semana y categoría",
x = "Día de la semana",
y = "Cantidad vendida",
fill = "Producto general"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Gráfico apilado por categoría y día
ggplot(ventas_dia_producto, aes(x = dia_semana, y = cantidad_vendida, fill = producto_general)) +
geom_col() +
coord_flip() +
labs(
title = "Cantidad de productos vendidos por día de la semana y categoría",
x = "Día de la semana",
y = "Cantidad vendida",
fill = "Producto general"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 1))
# Gráfico apilado por categoría y día
ggplot(ventas_dia_producto, aes(x = dia_semana, y = cantidad_vendida, fill = producto_general)) +
geom_col() +
coord_flip() +
labs(
title = "Cantidad de productos vendidos por día de la semana y categoría",
x = "Día de la semana",
y = "Cantidad vendida",
fill = "Producto general"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(RColorBrewer)
# Agrupamos, ordenamos y seleccionamos el top 5 productos por día
top5_dia <- ventas_dia_producto %>%
group_by(dia_semana) %>%
slice_max(order_by = cantidad_vendida, n = 5) %>%
ungroup()
# Selección de una paleta clara de colores (hasta 8 categorías diferenciables)
colores <- brewer.pal(n = 8, name = "Pastel1")
# Graficar con barras apiladas solo para los TOP 5 por día
ggplot(top5_dia, aes(x = dia_semana, y = cantidad_vendida, fill = producto_general)) +
geom_col() +
coord_flip() +
labs(
title = "Top 5 productos más vendidos por día de la semana",
x = "Día de la semana",
y = "Cantidad vendida",
fill = "Producto general"
) +
scale_fill_manual(values = colores) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(top_10, aes(x = reorder(id_cliente, productos_comprados), y = productos_comprados)) +
geom_bar(stat = "identity", fill = "darkgreen") +
coord_flip() +
labs(title = "Top 10 clientes más compradores",
x = "ID Cliente", y = "Productos comprados") +
theme_minimal()
ggplot(ventas_por_semana, aes(x = semana, y = n)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(
title = "Productos vendidos por semana",
x = "Semana (fecha de inicio)",
y = "Cantidad de productos"
) +
theme_minimal()
ggplot(ventas_por_dia, aes(x = dia_semana, y = n)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(
title = "Cantidad total de productos vendidos por día de la semana",
x = "Día de la semana",
y = "Productos vendidos"
) +
theme_minimal()
# Graficar con barras apiladas solo para los TOP 5 por día
ggplot(top5_dia, aes(x = dia_semana, y = cantidad_vendida, fill = producto_general)) +
geom_col() +
coord_flip() +
labs(
title = "Top 5 productos más vendidos por día de la semana",
x = "Día de la semana",
y = "Cantidad vendida",
fill = "Producto general"
) +
scale_fill_manual(values = colores) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(RColorBrewer)
# Agrupar y seleccionar top 5 por día
top5_dia <- ventas_dia_producto %>%
group_by(dia_semana) %>%
slice_max(order_by = cantidad_vendida, n = 5) %>%
ungroup()
# Paleta de colores brillantes
colores_vivos <- brewer.pal(n = 8, name = "Set2")
# Gráfico final
ggplot(top5_dia, aes(x = dia_semana, y = cantidad_vendida, fill = producto_general)) +
geom_col() +
coord_flip() +
labs(
title = "Top 5 productos más vendidos por día de la semana",
x = "Día de la semana",
y = "Cantidad vendida",
fill = "Producto general"
) +
scale_fill_manual(values = colores_vivos) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Top 10 productos más vendidos
datos_enriquecidos %>%
count(descripcion, sort = TRUE) %>%
slice_max(n, n = 10) %>%
ggplot(aes(x = reorder(descripcion, n), y = n)) +
geom_col(fill = "orange") +
coord_flip() +
labs(title = "Top 10 productos más vendidos", x = "Producto")
# Tickets por día
datos %>%
group_by(fecha) %>%
summarise(tickets = n_distinct(ticket)) %>%
ggplot(aes(x = fecha, y = tickets)) +
geom_line(color = "steelblue") +
labs(title = "Número de tickets por día", x = "Fecha", y = "Tickets")
# Productos vendidos por día de la semana
datos <- datos %>%
mutate(
fecha = ymd(fecha),
dia_semana = wday(fecha, label = TRUE, abbr = FALSE, week_start = 1)
)
ventas_por_dia <- datos %>%
count(dia_semana)
ggplot(ventas_por_dia, aes(x = dia_semana, y = n)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(
title = "Cantidad total de productos vendidos por día de la semana",
x = "Día de la semana",
y = "Productos vendidos"
) +
theme_minimal()
# Productos vendidos por semana
datos <- datos %>%
mutate(semana = floor_date(fecha, unit = "week", week_start = 1))
ventas_por_semana <- datos %>%
count(semana)
ggplot(ventas_por_semana, aes(x = semana, y = n)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(
title = "Productos vendidos por semana",
x = "Semana (fecha de inicio)",
y = "Cantidad de productos"
) +
theme_minimal()
# Top 10 clientes que más compraron
compras_por_cliente <- datos %>%
group_by(id_cliente) %>%
summarise(productos_comprados = n()) %>%
arrange(desc(productos_comprados))
#SEMANA DEL AÑO
# Top 10 clientes que más compraron
compras_por_cliente <- datos %>%
group_by(id_cliente) %>%
summarise(productos_comprados = n()) %>%
arrange(desc(productos_comprados))
top_10 <- compras_por_cliente %>% slice_head(n = 10)
ggplot(top_10, aes(x = reorder(id_cliente, productos_comprados), y = productos_comprados)) +
geom_bar(stat = "identity", fill = "darkgreen") +
coord_flip() +
labs(title = "Top 10 clientes más compradores",
x = "ID Cliente", y = "Productos comprados") +
theme_minimal()
ggplot(top_10, aes(x = reorder(id_cliente, productos_comprados), y = productos_comprados)) +
geom_bar(stat = "identity", fill = "darkgreen") +
coord_flip() +
labs(title = "Top 10 clientes más que mas unidades compran",
x = "ID Cliente", y = "Productos comprados") +
theme_minimal()
# Unir clusters con tickets limpios
df <- left_join(tickets_limpios, clusteres, by = "id_cliente_enc")
df <- df[ , -c(5,6,7)]  # Eliminar columnas innecesarias
# Clasificación general de productos
df <- df %>%
mutate(
cod_est = as.character(cod_est),
producto_general = case_when(
grepl("^010\\d+", cod_est) ~ "Fruta y verdura",
grepl("^0125\\d+", cod_est) ~ "Legumbres y frutos secos a granel",
grepl("^02\\d+", cod_est) ~ "Carniceria",
grepl("^03\\d+", cod_est) ~ "Congelados",
grepl("^04\\d+", cod_est) ~ "Charcuteria",
grepl("^050\\d+", cod_est) ~ "Lacteos",
grepl("^051\\d+", cod_est) ~ "Lacteos y postres",
grepl("^052\\d+", cod_est) ~ "Huevos y leche fresco",
grepl("^06\\d+", cod_est) ~ "Panaderia",
grepl("^07\\d+", cod_est) ~ "Carniceria",
grepl("^081\\d+", cod_est) ~ "Latas o mermeladas",
grepl("^082\\d+", cod_est) ~ "Latas",
grepl("^083140\\d+", cod_est) ~ "Conservas",
grepl("^083145\\d+", cod_est) ~ "Alimentacion animales",
grepl("^0833\\d+", cod_est) ~ "Snacks",
grepl("^084\\d+", cod_est) ~ "Snacks",
grepl("^080\\d+", cod_est) ~ "Snacks",
grepl("^090\\d+", cod_est) ~ "Salsas y arroces/pastas",
grepl("^091\\d+", cod_est) ~ "Salsas y arroces/pastas",
grepl("^092\\d+", cod_est) ~ "Frigorifico (sin productos de origen animal)",
grepl("^093\\d+", cod_est) ~ "Especies",
grepl("^10\\d+", cod_est) ~ "Panaderia",
grepl("^11\\d+", cod_est) ~ "Alcoholes",
>>>>>>> 4e6cdec70ce8b15d5eeab9e43a2d0e92ff5e4ad3
grepl("^1213\\d+", cod_est) ~ "Higiene",
grepl("^13\\d+", cod_est) ~ "Higiene",
grepl("^14\\d+", cod_est) ~ "Platos preparados",
TRUE ~ "Otros"
)
)
# Asegurar tipo de fecha y ordenar días
df$fecha <- ymd(df$dia)
df <- df %>%
mutate(
dia_semana = wday(dia, label = TRUE, abbr = FALSE, week_start = 1),
dia_semana = factor(dia_semana, levels = c("lunes", "martes", "miércoles", "jueves", "viernes", "sábado", "domingo"))
)
# Agrupar por día y categoría
ventas_dia_producto <- df %>%
group_by(dia_semana, producto_general) %>%
summarise(cantidad_vendida = n(), .groups = "drop")
library(RColorBrewer)
# Agrupar y seleccionar top 5 por día
top5_dia <- ventas_dia_producto %>%
group_by(dia_semana) %>%
slice_max(order_by = cantidad_vendida, n = 5) %>%
ungroup()
# Paleta de colores brillantes
colores_vivos <- brewer.pal(n = 8, name = "Set2")
# Gráfico final
ggplot(top5_dia, aes(x = dia_semana, y = cantidad_vendida, fill = producto_general)) +
geom_col() +
coord_flip() +
labs(
title = "Top 5 productos más vendidos por día de la semana",
x = "Día de la semana",
y = "Cantidad vendida",
fill = "Producto general"
) +
scale_fill_manual(values = colores_vivos) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
df <- df %>%
mutate(
dia_semana = wday(dia, label = TRUE, abbr = FALSE, week_start = 1),
dia_semana = factor(dia_semana, levels = c("lunes", "martes", "miércoles", "jueves", "viernes", "sábado", "domingo"))
) %>%
filter(dia_semana != "domingo")  # 🔥 Filtramos domingos
# Gráfico final
ggplot(top5_dia, aes(x = dia_semana, y = cantidad_vendida, fill = producto_general)) +
geom_col() +
coord_flip() +
labs(
title = "Top 5 productos más vendidos por día de la semana",
x = "Día de la semana",
y = "Cantidad vendida",
fill = "Producto general"
) +
scale_fill_manual(values = colores_vivos) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
df <- df %>%
mutate(
dia_semana = wday(dia, label = TRUE, abbr = FALSE, week_start = 1),
dia_semana = factor(dia_semana, levels = c("lunes", "martes", "miércoles", "jueves", "viernes", "sábado", "domingo"))
) %>%
filter(dia_semana != "domingo")  # 🔥 Filtramos domingos
df <- df %>%
mutate(
dia_semana = wday(dia, label = TRUE, abbr = FALSE, week_start = 1),
dia_semana = factor(dia_semana, levels = c("lunes", "martes", "miércoles", "jueves", "viernes", "sábado", "domingo"))
) %>%
filter(dia_semana != "domingo")  #  Filtramos domingos
# Asegurarse de que los códigos son texto
Maestroestr$cod_est <- as.character(Maestroestr$cod_est)
lineas$cod_est <- as.character(lineas$cod_est)
# Renombrar columnas si es necesario
colnames(lineas) <- c("fecha", "ticket", "cod_est", "id_cliente")
# Procesar tabla de líneas
lineas <- lineas %>%
mutate(
fecha = ymd(fecha),
dia_semana = wday(fecha, label = TRUE, abbr = FALSE, week_start = 1),  # lunes a domingo
prefix2 = str_sub(cod_est, 1, 2)
)
# Asegurarse de que los días están en orden (lunes a domingo)
top_prefix_por_dia$dia_semana <- factor(top_prefix_por_dia$dia_semana,
levels = c("lunes", "martes", "miércoles", "jueves", "viernes", "sábado", "domingo"))
# Graficar con etiquetas
ggplot(top_prefix_por_dia, aes(x = dia_semana, y = cantidad_vendida, fill = prefix2)) +
geom_col() +
geom_text(aes(label = prefix2), vjust = -0.5, size = 5, color = "black") +
labs(
title = "Prefijo de producto más vendido por día de la semana",
x = "Día de la semana",
y = "Número de productos vendidos",
fill = "Prefix2"
) +
theme_minimal()
# Gráfico final
ggplot(top5_dia, aes(x = dia_semana, y = cantidad_vendida, fill = producto_general)) +
geom_col() +
coord_flip() +
labs(
title = "Top 5 productos más vendidos por día de la semana",
x = "Día de la semana",
y = "Cantidad vendida",
fill = "Producto general"
) +
scale_fill_manual(values = colores_vivos) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Gráfico final
ggplot(top5_dia, aes(x = dia_semana, y = cantidad_vendida, fill = producto_general)) +
geom_col() +
coord_flip() +
labs(
title = "Top 5 productos más vendidos por día de la semana",
x = "Día de la semana",
y = "Cantidad vendida",
fill = "Producto general"
) +
scale_fill_manual(values = colores_vivos) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(ventas_por_semana, aes(x = semana, y = n)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(
title = "Productos vendidos por semana del año"
x = "Semana (fecha de inicio)",
ggplot(ventas_por_semana, aes(x = semana, y = n)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(
title = "Productos vendidos por semana del año",
>>>>>>> d0a0ad9222c5c4107237a6a068bd29d27a626144
x = "Semana (fecha de inicio)",
y = "Cantidad de productos"
) +
theme_minimal()
# Productos vendidos por semana
# Mutar la columna para que 'semana' sea el número de la semana del año
datos <- datos %>%
mutate(semana = floor_date(fecha, unit = "week", week_start = 1),
semana_numero = format(semana, "%U"))  # Esto extrae el número de semana del año
# Crear el gráfico
ventas_por_semana <- datos %>%
count(semana)
ggplot(ventas_por_semana, aes(x = semana, y = n)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(
title = "Productos vendidos por semana del año",
x = "Semana (fecha de inicio)",
y = "Cantidad de productos"
) +
theme_minimal() +
scale_x_date(labels = scales::date_format("%U"), breaks = "1 week") # Muestra el número de la semana
library(recommenderlab)
library(dplyr)
library(tidyr)
library(rsparse)
library(ggplot2)
# cargamos los datos
tickets <- readRDS("Datos\\Transformados\\tickets_Reducidos.rds")
clusteres <- readRDS("Datos\\Transformados\\df_con_clusteres.rds")
productos <- readRDS("Datos\\Originales\\maestroestr.RDS")
objetivos <- readRDS("Datos\\Originales\\objetivos.RDS")
##################################### OBJETIVO 1 ###############################
objetivo1 <- as.data.frame(objetivos[[1]])
objetivo2 <- as.data.frame(objetivos[[2]])
# ------------------------ como en este caso lo que queremos es recomendar a los 10
# usuarios mas relevantes un producto en especifico, el proceso a seguir es este:
# Entrenar el modelo
# cargar la matriz
matriz_general <- readRDS("Datos\\Resultados\\Matriz.rds")
rownames(matriz_general) <- matriz_general$id_cliente_enc
matriz_general <- matriz_general[,-1]
matriz_rec <- as.matrix(matriz_general)
matriz_rec <- as(matriz_rec,"realRatingMatrix")
# --------------------- ESTADÍSTICOS DE LA MATRIZ
matriz <- as(matriz_general,"matrix")
recuentoF <- rowCounts(matriz_rec) # cuantas celditas de una fila son diferentes de NA (cuantas pelis ha valorado cada usuario)
recuentoC <- colCounts(matriz_rec) # cuantas celditas de una columna son diferentes de NA
max(matriz,na.rm=T) ; min(matriz, na.rm=T)
# MEDIAS
media_columnas <- colMeans(matriz_rec,na.rm=T)
media_filas <- rowMeans(matriz_rec,na.rm=T)
hist(media_filas)
hist(media_columnas)
# PARA SABER EL GOODRATING Y EL GIVEN
min(recommenderlab::rowCounts(matriz_rec,na.rm=T))
######################### RECOMENDADORES CON RECOMMENDERLAB ####################
set.seed(8)
# --------------------------- TRAIN Y TEST
eval_scheme <- evaluationScheme(matriz_rec, method = "split",
train = 0.8, given= 1,
goodRating = 2)
# -------------------------- ENTRENAR MODELOS :
algos <- list("random" = list(name = "RANDOM", param = NULL),
"UBCF_10nn" = list(name = "UBCF", param = list(nn = 10)), # vecinos mas cercanos
"UBCF_50nn" = list(name = "UBCF", param = list(nn = 50)),
"IBCF_Pearson" = list(name = "IBCF", param = list(method = "Pearson")),
"popular" = list(name = "POPULAR" , param = NULL),
"svdf_50" = list(name = "SVDF",param = list(k=50)),
"svdf_100" = list(name = "SVDF",param = list(k=100)),
"svdf_200" = list(name = "SVDF",param = list(k=200)))
# ----------- TOPNLIST
eval <- evaluate(eval_scheme, algos, type = "topNList", n = c(1,3,5,10,15,20))
<<<<<<< HEAD
=======
<<<<<<< HEAD
############################### OBJETIVO 1 #####################################
# Creamos el modelo WRMF -------------------------------------------------------
matriz_general <- readRDS("Datos\\Resultados\\Matriz_sinNA.rds")
storage.mode(matriz_general) <- "numeric"
matriz_alreves <- t(matriz_general)
modelo_wrmf_alreves <- WRMF$new(rank = 10L, lambda = 0.1, feedback = 'implicit')
>>>>>>> d0a0ad9222c5c4107237a6a068bd29d27a626144
library(recommenderlab)
library(dplyr)
library(tidyr)
library(rsparse)
library(ggplot2)
library(Matrix)
<<<<<<< HEAD
# cargamos los datos
tickets <- readRDS("Datos\\Transformados\\tickets_Reducidos.rds")
clusteres <- readRDS("Datos\\Transformados\\df_con_clusteres.rds")
productos <- readRDS("Datos\\Originales\\maestroestr.RDS")
objetivos <- readRDS("Datos\\Originales\\objetivos.RDS")
############################### OBJETIVO 1 #####################################
# Creamos el modelo WRMF -------------------------------------------------------
matriz_general <- readRDS("Datos\\Resultados\\Matriz_sinNA.rds")
storage.mode(matriz_general) <- "numeric"
# para el objetivo 1 y 3 cambiamos filas por columnas
matriz_alreves <- t(matriz_general)
# -- MODELO:
modelo_wrmf_alreves <- WRMF$new(rank = 10L, lambda = 0.1, feedback = 'implicit')
modelo_wrmf_alreves$fit_transform(matriz_alreves, n_iter = 1000L, convergence_tol=0.000001)
matriz_obj1 <- matriz_alreves[rownames(matriz_alreves) %in% objetivos$objetivo1$obj, , drop=F]
matriz_obj1 <- as(matriz_obj1,"sparseMatrix")
preds_1 <- modelo_wrmf_alreves$predict(matriz_obj1, k = 10) # para que nos de 10 usuarios
lista_1 <- attr(preds_1,'ids')
################################## OBJETIVO 2 ##################################
# modelo para el objetivo 2 y 4:
modelo_wrmf <- WRMF$new(rank = 10L, lambda = 0.1, feedback = 'implicit')
matriz_obj2 <- matriz_general[rownames(matriz_general) %in% objetivos$objetivo2$obj,]
matriz_obj2 <- as(matriz_obj2,"sparseMatrix")
preds_2 <- modelo_wrmf$predict(matriz_obj2, k = 1, not_recommend = matriz_obj2)
preds_2 <- modelo_wrmf$predict(matriz_obj2, k = 1, not_recommend = matriz_obj2)
modelo_wrmf <- WRMF$new(rank = 10L, lambda = 0.1, feedback = 'implicit')
modelo_wrmf$fit_transform(matriz_general, n_iter = 1000L, convergence_tol=0.000001)
matriz_obj2 <- matriz_general[rownames(matriz_general) %in% objetivos$objetivo2$obj,]
matriz_obj2 <- as(matriz_obj2,"sparseMatrix")
preds_2 <- modelo_wrmf$predict(matriz_obj2, k = 1, not_recommend = matriz_obj2)
preds_2
lista_2 <- attr(preds_2,'ids')
################################# OBJETIVO 3 ###################################
# el modelo es el mismo que para el objetivo 1
matriz_obj3 <- matriz_general
matriz_obj3 <- as(matriz_obj3,"sparseMatrix")
# cogemos los items que no queremos que recomiente para el predict
matriz_no_recomendados <- matriz_general [,!colnames(matriz_general) %in% objetivos$objetivo3$obj]
items_no_recomendados <- colnames(matriz_no_recomendados)
preds_3 <- modelo_wrmf$predict(matriz_obj3, k = 1, items_exclude = items_no_recomendados)
preds_3
lista_3 <- attr(preds_3,'ids')
obj4<-objetivos[[4]]$obj
tickets_obj4<- tickets[tickets$id_cliente_enc %in% obj4,]
ultimos_tickets <- tickets_filtrados %>%
group_by(id_cliente_enc) %>%
filter(dia == max(dia)) %>%
ungroup()
historial_tickets <- anti_join(tickets_filtrados, ultimos_tickets, by = "num_ticket")
historial_tickets <- anti_join(tickets_obj4, ultimos_tickets, by = "num_ticket")
ultimos_tickets <- tickets_obj4 %>%
group_by(id_cliente_enc) %>%
filter(dia == max(dia)) %>%
ungroup()
historial_tickets <- anti_join(tickets_obj4, ultimos_tickets, by = "num_ticket")
historial_tickets <- left_join(historial_tickets,productos,by="cod_est")
tickets_matriz_agrupado <- historial_tickets %>%
group_by(id_cliente_enc, descripcion) %>%
summarise(N_compras = n(), .groups = "drop")
df_matriz <- pivot_wider(
tickets_matriz_agrupado,
names_from = "descripcion",
values_from = "N_compras",
values_fill = 0
)
df_matriz
View(df_matriz)
preds_4 <- modelo_wrmf$predict(matriz_obj4, k = 1, items_exclude = df_matriz)
preds_4 <- modelo_wrmf_alreves$predict(matriz_obj4, k = 1, items_exclude = df_matriz)
preds_4 <- modelo_wrmf$predict(df_matriz, k = 1, items_exclude = df_matriz)
preds_4 <- modelo_wrmf$predict(df_matriz, k = 1, not_recommend = df_matriz)
historial_tickets <- anti_join(tickets_obj4, ultimos_tickets, by = "num_ticket")
tickets_matriz_agrupado <- historial_tickets %>%
group_by(id_cliente_enc, descripcion) %>%
summarise(N_compras = n(), .groups = "drop")
tickets_matriz_agrupado <- historial_tickets %>%
group_by(id_cliente_enc, cod_est) %>%
summarise(N_compras = n(), .groups = "drop")
df_matriz <- pivot_wider(
tickets_matriz_agrupado,
names_from = "cod_est",
values_from = "N_compras",
values_fill = 0
)
preds_4 <- modelo_wrmf$predict(df_matriz, k = 1, not_recommend = df_matriz)
tickets_matriz_agrupado <- historial_tickets %>%
group_by(id_cliente_enc, descripcion) %>%
summarise(N_compras = n(), .groups = "drop")
ultimos_tickets <- tickets_obj4 %>%
group_by(id_cliente_enc) %>%
filter(dia == max(dia)) %>%
ungroup()
historial_tickets <- anti_join(tickets_obj4, ultimos_tickets, by = "num_ticket")
historial_tickets <- left_join(historial_tickets,productos,by="cod_est")
tickets_matriz_agrupado <- historial_tickets %>%
group_by(id_cliente_enc, descripcion) %>%
summarise(N_compras = n(), .groups = "drop")
df_matriz <- pivot_wider(
tickets_matriz_agrupado,
names_from = "descripcion",
values_from = "N_compras",
values_fill = 0
)
preds_4 <- modelo_wrmf$predict(df_matriz, k = 1, not_recommend = df_matriz)
modelo_wrmf
ultimos_tickets <- tickets_obj4 %>%
group_by(id_cliente_enc) %>%
filter(dia == max(dia)) %>%
ungroup()
historial_tickets <- anti_join(tickets_obj4, ultimos_tickets, by = "num_ticket")
tickets_matriz_agrupado <- historial_tickets %>%
group_by(id_cliente_enc, cod_est) %>%
summarise(N_compras = n(), .groups = "drop")
df_matriz <- pivot_wider(
tickets_matriz_agrupado,
names_from = "cod_est",
values_from = "N_compras",
values_fill = 0
)
preds_4 <- modelo_wrmf_alreves$predict(df_matriz, k = 1, not_recommend = df_matriz)
df_matriz
modelo_wrmf_alreves
preds_4 <- modelo_wrmf$predict(df_matriz, k = 1, not_recommend = df_matriz)
modelo_wrmf
df_matriz <- pivot_wider(
tickets_matriz_agrupado,
names_from = "cod_est",
values_from = "N_compras",
values_fill = 0,  names_prefix="id_"
)
preds_4 <- modelo_wrmf$predict(df_matriz, k = 1, not_recommend = df_matriz)
preds_4 <- modelo_wrmf_alreves$predict(df_matriz, k = 1, not_recommend = df_matriz)
obj4<-objetivos[[4]]$obj
tickets_obj4<- tickets[tickets$id_cliente_enc %in% obj4,]
ultimos_tickets <- tickets_obj4 %>%
group_by(id_cliente_enc) %>%
filter(dia == max(dia)) %>%
ungroup()
historial_tickets <- anti_join(tickets_obj4, ultimos_tickets, by = "num_ticket")
historial_tickets <- left_join(historial_tickets,productos,by="cod_est")
tickets_matriz_agrupado <- historial_tickets %>%
group_by(id_cliente_enc, cod_est) %>%
summarise(N_compras = n(), .groups = "drop")
df_matriz <- pivot_wider(
tickets_matriz_agrupado,
names_from = "cod_est",
values_from = "N_compras",
)
preds_4 <- modelo_wrmf$predict(df_matriz, k = 1, not_recommend = df_matriz)
colnames(df_matriz) <- as.character(colnames(df_matriz))
colnames(df_matriz) <- as.character(colnames(df_matriz))
preds_4 <- modelo_wrmf$predict(df_matriz, k = 1, not_recommend = df_matriz)
items_modelo <- modelo_wrmf$item_ids
# Asegurarse de que estén todas las columnas que espera el modelo
faltan_items <- setdiff(items_modelo, colnames(df_matriz))
if (length(faltan_items) > 0) {
df_matriz[, faltan_items] <- 0  # añadir columnas faltantes con 0
}
# Reordenar columnas exactamente igual
df_matriz <- df_matriz[, items_modelo]
preds_4 <- modelo_wrmf$predict(df_matriz, k = 1, not_recommend = df_matriz)
matriz_sparse <- as(as.matrix(df_matriz), "sparseMatrix")
# Llama a la predicción con el objeto correcto
preds_4 <- modelo_wrmf$predict(matriz_sparse, k = 1, not_recommend = matriz_sparse)
matriz_sparse
obj4<-objetivos[[4]]$obj
tickets_obj4<- tickets[tickets$id_cliente_enc %in% obj4,]
ultimos_tickets <- tickets_obj4 %>%
group_by(id_cliente_enc) %>%
filter(dia == max(dia)) %>%
ungroup()
historial_tickets <- anti_join(tickets_obj4, ultimos_tickets, by = "num_ticket")
tickets_matriz_agrupado <- historial_tickets %>%
group_by(id_cliente_enc, cod_est) %>%
summarise(N_compras = n(), .groups = "drop")
df_matriz <- pivot_wider(
tickets_matriz_agrupado,
names_from = "cod_est",
values_from = "N_compras",
)
colnames(df_matriz) <- as.character(colnames(df_matriz))
items_modelo <- modelo_wrmf$item_ids
# Asegurarse de que estén todas las columnas que espera el modelo
faltan_items <- setdiff(items_modelo, colnames(df_matriz))
if (length(faltan_items) > 0) {
df_matriz[, faltan_items] <- 0  # añadir columnas faltantes con 0
}
# Reordenar columnas exactamente igual
df_matriz <- df_matriz[, items_modelo]
matriz_sparse <- as(as.matrix(df_matriz), "sparseMatrix")
matriz_sparse
df_matriz <- pivot_wider(
tickets_matriz_agrupado,
names_from = "cod_est",
values_from = "N_compras",
)
colnames(df_matriz) <- as.character(colnames(df_matriz))
matriz_sparse <- as(as.matrix(df_matriz), "sparseMatrix")
id_clientes <- df_matriz$id_cliente_enc
df_numeric <- df_matriz[, !(names(df_matriz) %in% c("id_cliente_enc"))]
matriz_sparse <- as(as.matrix(df_numeric), "sparseMatrix")
# Llama a la predicción con el objeto correcto
preds_4 <- modelo_wrmf$predict(matriz_sparse, k = 1, not_recommend = matriz_sparse)
obj4<-objetivos[[4]]$obj
tickets_obj4<- tickets[tickets$id_cliente_enc %in% obj4,]
ultimos_tickets <- tickets_obj4 %>%
group_by(id_cliente_enc) %>%
filter(dia == max(dia)) %>%
ungroup()
historial_tickets <- anti_join(tickets_obj4, ultimos_tickets, by = "num_ticket")
tickets_matriz_agrupado <- historial_tickets %>%
group_by(id_cliente_enc, cod_est) %>%
summarise(N_compras = n(), .groups = "drop")
df_matriz <- pivot_wider(
tickets_matriz_agrupado,
names_from = "cod_est",
values_from = "N_compras",
)
colnames(df_matriz) <- as.character(colnames(df_matriz))
id_clientes <- df_matriz$id_cliente_enc
df_numeric <- df_matriz[, !(names(df_matriz) %in% c("id_cliente_enc"))]
matriz_sparse <- as(as.matrix(df_numeric), "sparseMatrix")
# Llama a la predicción con el objeto correcto
preds_4 <- modelo_wrmf$predict(matriz_sparse, k = 1, not_recommend = matriz_sparse)
matriz_sparse
matriz_sparse<- ifelse(matriz_sparse==NA, 0, matriz_sparse)
# Llama a la predicción con el objeto correcto
preds_4 <- modelo_wrmf$predict(matriz_sparse, k = 1, not_recommend = matriz_sparse)
matriz_sparse
matriz_sparse <- as(as.matrix(df_numeric), "sparseMatrix")
################################# OBJETIVO 4 ###################################
obj4<-objetivos[[4]]$obj
tickets_filtrados <- tickets[tickets$id_cliente_enc %in% obj4, ]
tickets_filtrados_agrupados<- tickets_filtrados%>%
group_by(id_cliente_enc, cod_est) %>%
summarise(N_compras = n())
tickets_filtrados <- tickets_filtrados %>%
mutate(fecha = ymd(dia))
ultimos_tickets <- tickets_filtrados %>%
group_by(id_cliente_enc) %>%
filter(fecha == max(fecha)) %>%
ungroup()
tickets_filtrados <- tickets[tickets$id_cliente_enc %in% obj4, ]
tickets_filtrados_agrupados<- tickets_filtrados%>%
group_by(id_cliente_enc, cod_est) %>%
summarise(N_compras = n())
ultimos_tickets <- tickets_filtrados_agrupados %>%
group_by(id_cliente_enc) %>%
filter(dia == max(dia)) %>%
ungroup()
################################# OBJETIVO 4 ###################################
obj4<-objetivos[[4]]$obj
tickets_filtrados <- tickets[tickets$id_cliente_enc %in% obj4, ]
tickets_filtrados
tickets_filtrados_agrupados<- tickets_filtrados%>%
group_by(id_cliente_enc, cod_est) %>%
summarise(N_compras = n())
tickets_filtrados_agrupados
ultimos_tickets <- tickets_filtrados %>%
group_by(id_cliente_enc) %>%
filter(dia == max(dia)) %>%
ungroup()
historial_tickets <- anti_join(tickets_filtrados, ultimos_tickets, by = "num_ticket")
tickets_matriz_agrupado <- historial_tickets %>%
group_by(id_cliente_enc, cod_est) %>%
summarise(N_compras = n(), .groups = "drop")
df_matriz <- pivot_wider(
tickets_matriz_agrupado,
names_from = "cod_est",
values_from = "N_compras",
values_fill = 0,
names_prefix = "id_"
)
matriz_sparse_o4 <- as(as.matrix(df_matriz[,-1]), "dgCMatrix")
rownames(matriz_sparse_o4) <- df_matriz$id_cliente_enc
preds_4 <- modelo_wrmf$predict(matriz_sparse_o4, k = 1)
modelo_wrmf_o4 <- WRMF$new(rank = 10L, lambda = 0.1, feedback = 'implicit')
modelo_wrmf_o4$fit_transform(matriz_sparse_o4, n_iter = 1000L, convergence_tol = 1e-6)
preds_o4 <- modelo_wrmf_o4$predict(matriz_sparse_o4, k = 1)
clientes <- rownames(matriz_sparse_o4)
productos_predichos <- attr(preds_o4, "ids")
recomendaciones_o4 <- data.frame(
id_cliente_enc = clientes,
producto_olvidado = productos_predichos
)
recomendaciones_o4 <- recomendaciones_o4 %>%
mutate(cod_est = str_remove(producto_olvidado, "id_")) %>%
left_join(maestro %>% select(cod_est, descripcion), by = "cod_est") %>%
select(id_cliente_enc, cod_est, descripcion)
library(stringr)
recomendaciones_o4 <- recomendaciones_o4 %>%
mutate(cod_est = str_remove(producto_olvidado, "id_")) %>%
left_join(maestro %>% select(cod_est, descripcion), by = "cod_est") %>%
select(id_cliente_enc, cod_est, descripcion)
recomendaciones_o4 <- recomendaciones_o4 %>%
mutate(cod_est = str_remove(producto_olvidado, "id_")) %>%
left_join(productos %>% select(cod_est, descripcion), by = "cod_est") %>%
select(id_cliente_enc, cod_est, descripcion)
View(recomendaciones_o4)
recomendaciones_o4 <- data.frame(
id_cliente_enc = clientes,
producto_olvidado = productos_predichos
)
library(stringr)
recomendaciones_o4 <- recomendaciones_o4 %>%
mutate(cod_est = str_remove(producto_olvidado, "id_")) %>%
left_join(productos %>% select(cod_est, descripcion), by = "cod_est") %>%
select(id_cliente_enc, cod_est, descripcion)
lista_1
recomendaciones_o4
lista_3
recomendaciones_o3 <- data.frame(
id_cliente_enc = clientes_predichos,
producto = productos
)
recomendaciones_o3 <- data.frame(
id_cliente_enc = lista_3,
producto = productos
)
recomendaciones_o3 <- data.frame(
id_cliente_enc = lista_3,
producto = productos
)
lista_3
############################### OBJETIVO 1 #####################################
# Creamos el modelo WRMF -------------------------------------------------------
matriz_general <- readRDS("Datos\\Resultados\\Matriz_sinNA.rds")
storage.mode(matriz_general) <- "numeric"
# para el objetivo 1 y 3 cambiamos filas por columnas
matriz_alreves <- t(matriz_general)
# -- MODELO:
modelo_wrmf_alreves <- WRMF$new(rank = 10L, lambda = 0.1, feedback = 'implicit')
modelo_wrmf_alreves$fit_transform(matriz_alreves, n_iter = 1000L, convergence_tol=0.000001)
matriz_obj1 <- matriz_alreves[rownames(matriz_alreves) %in% objetivos$objetivo1$obj, , drop=F]
matriz_obj1 <- as(matriz_obj1,"sparseMatrix")
preds_1 <- modelo_wrmf_alreves$predict(matriz_obj1, k = 10) # para que nos de 10 usuarios
preds_1
lista_1 <- attr(preds_1,'ids')
################################## OBJETIVO 2 ##################################
# modelo para el objetivo 2 y 4:
modelo_wrmf <- WRMF$new(rank = 10L, lambda = 0.1, feedback = 'implicit')
=======
objetivos <- readRDS("Datos\\Originales\\objetivos.RDS")
modelo_wrmf_alreves <- WRMF$new(rank = 10L, lambda = 0.1, feedback = 'implicit')
modelo_wrmf_alreves$fit_transform(matriz_alreves, n_iter = 1000L, convergence_tol=0.000001)
matriz_obj1 <- matriz_general[rownames(matriz_alreves) %in% objetivos$objetivo1$obj, , drop=F]
matriz_obj1 <- as(matriz_obj1,"sparseMatrix")
preds_1 <- modelo_wrmf_alreves$predict(matriz_obj1, k = 1)
matriz_obj1 <- matriz_alreves[rownames(matriz_alreves) %in% objetivos$objetivo1$obj, , drop=F]
matriz_obj1 <- as(matriz_obj1,"sparseMatrix")
preds_1 <- modelo_wrmf_alreves$predict(matriz_obj1, k = 1)
preds_1
lista_1 <- attr(preds,'ids')
lista_1 <- attr(preds_1,'ids')
View(lista_1)
preds_1 <- modelo_wrmf_alreves$predict(matriz_obj1, k = 10)
preds_1
lista_1 <- attr(preds_1,'ids')
library(dplyr)
library(stringr)
library(tidyr)
library(tidyverse)
library(purrr)
library(plotly)
library(ggplot2)
library(gridExtra)
library(cowplot)
# cargamos los datos ya limpios
tickets <- readRDS("Datos\\Transformados\\tickets_limpios.rds")
# CREAMOS COLUMNAS PARA EL CLUSTERING Y PARA CARACTERIZAR LOS CLIENTES
# ---------------------- PRODUCTOS POR COMPRA
cantidad_productos <- tickets %>%
group_by(num_ticket,id_cliente_enc) %>%
distinct () %>%
summarise(cantidad_productos=n())
# ahora la media por cliente
cantidad_productos <- cantidad_productos %>%
group_by(id_cliente_enc) %>%
summarise(media_unidades_por_compra = round(mean(cantidad_productos),0))
# ------------------------- CANTIDAD DE VECES QUE HA COMPRADO
media_veces_compra <- tickets %>%
group_by(id_cliente_enc) %>%
summarise(total_veces_que_ha_comprado = n())
# ------------------------ DIAS QUE PASAN DESDE UNA COMPRA A OTRA
numero_dias <- tickets %>%
select(id_cliente_enc, dia,num_ticket) %>%
distinct() %>%  # Nos quedamos con un registro por cliente y día
arrange(id_cliente_enc, dia) %>%
group_by(id_cliente_enc) %>%
mutate(n_compras=n(),
next_sale = lead(dia),
sale_diff = as.numeric(difftime(next_sale, dia, units = "days"))
)
# los que tienen mas de una compra borramos la ultima fila despues calculamos la media
# de los que tienen solo una compra; sin borrar nada la media sera NA
cada_cuanto_compras <- numero_dias %>%
group_by(id_cliente_enc) %>%
summarise(
media_de_dias_pasadas_por_compras = round(mean(sale_diff, na.rm = TRUE))
)
# GRUPO DE PRODUCTO MÁS COMPRADO
# añadimos columna del grupo de producto al que pertenece para poder sacar el
# tipo de producto que más compra el cliente
tickets <- tickets %>%
mutate(
cod_est = as.character(cod_est),  # Asegura que tenga formato string
producto_general = case_when(
grepl("^010\\d+", cod_est) ~ "Fruta y verdura",
grepl("^0125\\d+", cod_est) ~ "Legumbres y frutos secos",
grepl("^02\\d+", cod_est) ~ "Carniceria",
grepl("^03\\d+", cod_est) ~ "Congelados",
grepl("^04\\d+", cod_est) ~ "Charcuteria",
grepl("^050\\d+", cod_est) ~ "Lacteos",
grepl("^051\\d+", cod_est) ~ "Lacteos y postres",
grepl("^052\\d+", cod_est) ~ "Huevos y leche fresco",
grepl("^06\\d+", cod_est) ~ "Panaderia",
grepl("^07\\d+", cod_est) ~ "Carniceria",
grepl("^081\\d+", cod_est) ~ "Latas o mermeladas",
grepl("^082\\d+", cod_est) ~ "Latas",
grepl("^083140\\d+", cod_est) ~ "Conservas",
grepl("^083145\\d+", cod_est) ~ "Alimentacion animales",
grepl("^0833\\d+", cod_est) ~ "Snacks",
grepl("^084\\d+", cod_est) ~ "Snacks",
grepl("^080\\d+", cod_est) ~ "Snacks",
grepl("^090\\d+", cod_est) ~ "Salsas y arroces/pastas",
grepl("^091\\d+", cod_est) ~ "Salsas y arroces/pastas",
grepl("^092\\d+", cod_est) ~ "Frigorifico",
grepl("^093\\d+", cod_est) ~ "Especies",
grepl("^10\\d+", cod_est) ~ "Panaderia",
grepl("^11\\d+", cod_est) ~ "Alcoholes",
grepl("^1213\\d+", cod_est) ~ "Higiene",
grepl("^13\\d+", cod_est) ~ "Higiene",
grepl("^14\\d+", cod_est) ~ "Platos preparados",
TRUE ~ "Otros"
)
)
producto_mas_comprado <- tickets %>%
group_by(id_cliente_enc, producto_general,num_ticket) %>%
summarise(veces_comprado = n(), .groups = "drop") %>%
group_by(id_cliente_enc) %>%
slice_max(order_by = veces_comprado, n = 1, with_ties = FALSE)
producto_mas_comprado <- producto_mas_comprado %>%
select(id_cliente_enc,producto_general)
# JUNTAR LAS COLUMNAS
df_clustering <- inner_join(cantidad_productos,cada_cuanto_compras, by = "id_cliente_enc")
df_clustering <- inner_join(df_clustering,media_veces_compra, by = "id_cliente_enc")
# GUARDAMOS
saveRDS(df_clustering, file = "Datos/Transformados/df_clustering_entero.rds")
############################### CLUSTERING #####################################
# cargamos los datos:
df_entero <- readRDS("Datos\\Transformados\\df_clustering_entero.rds")
# LOS CLIENTES QUE HAN COMPRADO UNA VEZ APARECEN COMO NA EN LA COLUMNA DE CADA CUANTO
# COMPRAS POR LO QUE LOS TRANFORMAMOS A 0 PARA PODER HACER EL METODO DEL CODO Y EL CLUSTERING
df_entero <- df_entero %>%
mutate(media_de_dias_pasadas_por_compras = if_else(is.nan(media_de_dias_pasadas_por_compras), 0, media_de_dias_pasadas_por_compras))
# nos quedamos solo con las columnas numericas para el clustering:
df_clustering <- df_entero[,-1]
# metodo del codo para elegir la K
tot_withinss <- map_dbl(1:10, function(k) {
set.seed(12); model <- kmeans(x = df_clustering, centers = k)
model$tot.withinss
})
# Crear dataframe con resultados
elbow_df <- data.frame(k = 1:10, tot_withinss = tot_withinss)
metodo_codo <- plot_ly(elbow_df, x = ~k, y = ~tot_withinss, type = "scatter",
mode = "lines+markers",
line = list(color = "#8c94a4"),  # Color de la línea
marker = list(color = "#0d7b7c")) %>%
add_trace(x = 4, y = elbow_df$tot_withinss[elbow_df$k == 4],
type = "scatter",
mode = "markers",
marker = list(color = "red", size = 10)) %>%
layout(
xaxis = list(title = "Número de Clusters (k)", tickvals = 1:10),
yaxis = list(title = "Suma de Distancias Intra-cluster"),
showlegend = FALSE  # Esto es para ocultar la leyenda
)
############################### RSPARSE ########################################
matriz_general <- readRDS("Datos\\Resultados\\Matriz.rds")
rownames(matriz_general) <- matriz_general[,1]
matriz_general <- matriz_general[,-c(1)]
# ------------ cambiamos los NA's por 0
matriz_general <- as(matriz_general, "matrix")
matriz_general[is.na(matriz_general)] <- 0
############################### OBJETIVO 1 #####################################
# Creamos el modelo WRMF -------------------------------------------------------
matriz_general <- readRDS("Datos\\Resultados\\Matriz_sinNA.rds")
storage.mode(matriz_general) <- "numeric"
>>>>>>> d0a0ad9222c5c4107237a6a068bd29d27a626144
library(recommenderlab)
library(dplyr)
library(tidyr)
library(rsparse)
library(ggplot2)
library(Matrix)
<<<<<<< HEAD
library(stringr)
=======
>>>>>>> d0a0ad9222c5c4107237a6a068bd29d27a626144
################################## OBJETIVO 2 ##################################
# modelo para el objetivo 2 y 4:
modelo_wrmf <- WRMF$new(rank = 10L, lambda = 0.1, feedback = 'implicit')
modelo_wrmf$fit_transform(matriz_general, n_iter = 1000L, convergence_tol=0.000001)
<<<<<<< HEAD
=======
matriz_obj2 <- matriz_general[rownames(matriz_general) %in% objetivo2$obj,]
>>>>>>> d0a0ad9222c5c4107237a6a068bd29d27a626144
matriz_obj2 <- matriz_general[rownames(matriz_general) %in% objetivos$objetivo2$obj,]
matriz_obj2 <- as(matriz_obj2,"sparseMatrix")
preds_2 <- modelo_wrmf$predict(matriz_obj2, k = 1, not_recommend = matriz_obj2)
preds_2
lista_2 <- attr(preds_2,'ids')
<<<<<<< HEAD
=======
objetivos$objetivo3$obj
View(matriz_general)
# cogemos los items que no queremos que recomiente para el predict
matriz_no_recomendados <- matriz_general [,!colnames(matriz_general) %in% objetivos$objetivo3$obj]
matriz_no_recomendados
View(matriz_no_recomendados)
items_no_recomendados <- colnames(matriz_no_recomendados)
items_no_recomendados
preds_3 <- modelo_wrmf_alreves$predict(matriz_obj3, k = 1, items_exclude = items_no_recomendados)
################################# OBJETIVO 3 ###################################
# el modelo es el mismo que para el objetivo 1
matriz_obj3 <- matriz_general[,colnames(matriz_general) %in% objetivos$objetivo3$obj]
matriz_obj3 <- as(matriz_obj3,"sparseMatrix")
# cogemos los items que no queremos que recomiente para el predict
matriz_no_recomendados <- matriz_general [,!colnames(matriz_general) %in% objetivos$objetivo3$obj]
items_no_recomendados <- colnames(matriz_no_recomendados)
preds_3 <- modelo_wrmf_alreves$predict(matriz_obj3, k = 1, items_exclude = items_no_recomendados)
>>>>>>> d0a0ad9222c5c4107237a6a068bd29d27a626144
################################# OBJETIVO 3 ###################################
# el modelo es el mismo que para el objetivo 1
matriz_obj3 <- matriz_general
matriz_obj3 <- as(matriz_obj3,"sparseMatrix")
# cogemos los items que no queremos que recomiente para el predict
matriz_no_recomendados <- matriz_general [,!colnames(matriz_general) %in% objetivos$objetivo3$obj]
items_no_recomendados <- colnames(matriz_no_recomendados)
preds_3 <- modelo_wrmf$predict(matriz_obj3, k = 1, items_exclude = items_no_recomendados)
preds_3
lista_3 <- attr(preds_3,'ids')
<<<<<<< HEAD
################################# OBJETIVO 4 ###################################
obj4<-objetivos[[4]]$obj
tickets_filtrados <- tickets[tickets$id_cliente_enc %in% obj4, ]
ultimos_tickets <- tickets_filtrados %>%
group_by(id_cliente_enc) %>%
filter(dia == max(dia)) %>%
ungroup()
historial_tickets <- anti_join(tickets_filtrados, ultimos_tickets, by = "num_ticket")
tickets_matriz_agrupado <- historial_tickets %>%
group_by(id_cliente_enc, cod_est) %>%
summarise(N_compras = n(), .groups = "drop")
df_matriz <- pivot_wider(
tickets_matriz_agrupado,
names_from = "cod_est",
values_from = "N_compras",
values_fill = 0,
names_prefix = "id_"
)
matriz_sparse_o4 <- as(as.matrix(df_matriz[,-1]), "dgCMatrix")
rownames(matriz_sparse_o4) <- df_matriz$id_cliente_enc
preds_o4 <- modelo_wrmf$predict(matriz_sparse_o4, k = 1)
################################# OBJETIVO 4 ###################################
obj4<-objetivos[[4]]$obj
tickets_filtrados <- tickets[tickets$id_cliente_enc %in% obj4, ]
ultimos_tickets <- tickets_filtrados %>%
group_by(id_cliente_enc) %>%
filter(dia == max(dia)) %>%
ungroup()
library(recommenderlab)
library(dplyr)
library(tidyr)
library(rsparse)
library(ggplot2)
library(Matrix)
library(stringr)
################################# OBJETIVO 4 ###################################
obj4<-objetivos[[4]]$obj
tickets_filtrados <- tickets[tickets$id_cliente_enc %in% obj4, ]
ultimos_tickets <- tickets_filtrados %>%
group_by(id_cliente_enc) %>%
filter(dia == max(dia)) %>%
ungroup()
historial_tickets <- anti_join(tickets_filtrados, ultimos_tickets, by = "num_ticket")
tickets_matriz_agrupado <- historial_tickets %>%
group_by(id_cliente_enc, cod_est) %>%
summarise(N_compras = n(), .groups = "drop")
df_matriz <- pivot_wider(
tickets_matriz_agrupado,
names_from = "cod_est",
values_from = "N_compras",
values_fill = 0,
names_prefix = "id_"
)
matriz_obj4 <- as(as.matrix(df_matriz[,-1]), "sparseMatrix")
rownames(matriz_obj4) <- df_matriz$id_cliente_enc
preds_o4 <- modelo_wrmf$predict(matriz_obj4, k = 1)
matriz_obj4
modelo_wrmf
################################## OBJETIVO 2 ##################################
# modelo para el objetivo 2 y 4:
modelo_wrmf <- WRMF$new(rank = 10L, lambda = 0.1, feedback = 'implicit')
modelo_wrmf$fit_transform(matriz_general, n_iter = 1000L, convergence_tol=0.000001)
matriz_obj4 <- as(as.matrix(df_matriz[,-1]), "sparseMatrix")
rownames(matriz_obj4) <- df_matriz$id_cliente_enc
preds_o4 <- modelo_wrmf$predict(matriz_obj4, k = 1)
colnames(matriz_obj4)<- as.character(colnames(matriz_obj4))
preds_o4 <- modelo_wrmf$predict(matriz_obj4, k = 1)
=======
library(shiny)
library(ggplot2)
library(plotly)
library(dplyr)
library(cowplot)
library(grid)
# --- Cargar datos ---
df_entero <- readRDS("C:/Users/gorra/OneDrive - Mondragon Unibertsitatea/Escritorio/ultimo intento git/VerdeClaro_Reto04/Datos/Transformados/df_con_clusteres.rds")
# --- Cargar datos ---
df_entero <- readRDS("Datos\\Transformados\\df_con_clusteres.rds")
tickets <- readRDS("Datos\\Transformados\\tickets_limpios.rds")
productos <- readRDS("Datos\\Originales\\maestroestr.RDS")
# --- Datos para clustering (medias por cluster) ---
media_clusteres <- df_entero %>%
mutate(cluster = as.factor(as.character(cluster))) %>%
group_by(cluster) %>%
summarise(across(where(is.numeric), mean), .groups = "drop")
media_unidades <- media_clusteres[, c("cluster", "media_unidades_por_compra")]
media_dias     <- media_clusteres[, c("cluster", "media_de_dias_pasadas_por_compras")]
total_compra   <- media_clusteres[, c("cluster", "total_veces_que_ha_comprado")]
media_unidades_gf <- ggplot(media_unidades, aes(x = cluster, y = media_unidades_por_compra, fill = cluster)) +
geom_col() +
labs(title = "Media de unidades por compra", x = "Clusters", y = "Unidades medias") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = c("1" =  "#E10A23", "2" = "#F0928E", "3" = "#FADED6", "4" = "#005B92"))
media_diasgf <- ggplot(media_dias, aes(x = cluster, y = media_de_dias_pasadas_por_compras, fill = cluster)) +
geom_col() +
labs(title = "Media de días transcurridos por compra", x = "Clusters", y = "Media de días") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = c("1" =  "#E10A23", "2" = "#F0928E", "3" = "#FADED6", "4" = "#005B92"))
total_comprasgf <- ggplot(total_compra, aes(x = cluster, y = total_veces_que_ha_comprado, fill = cluster)) +
geom_col() +
labs(title = "Total de veces que han comprado", x = "Clusters", y = "Total compras") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = c("1" =  "#E10A23", "2" = "#F0928E", "3" = "#FADED6", "4" = "#005B92"))
media_unidades_gf_nolegend <- media_unidades_gf + theme(legend.position = "none")
media_diasgf_nolegend     <- media_diasgf     + theme(legend.position = "none")
total_comprasgf_nolegend  <- total_comprasgf  + theme(legend.position = "none")
shared_legend <- get_legend(media_unidades_gf + theme(legend.position = "right", legend.direction = "horizontal"))
final_plot <- plot_grid(
plot_grid(media_unidades_gf_nolegend, media_diasgf_nolegend, total_comprasgf_nolegend, ncol = 3),
shared_legend,
ncol = 1,
rel_heights = c(1, 0.1)
)
# -------------------------- TABLA CLUSTERES CENTROIDES
media_clusteres <- df_entero %>%
mutate(cluster = as.factor(as.character(cluster))) %>%
group_by(cluster) %>%
summarise(across(where(is.numeric), mean))
ui <- fluidPage(
titlePanel("Centroides de los clusteres"),
selectInput (inputId='cluster',label="Selecciona un cluster",choices = unique(media_clusteres$cluster)),
DTOutput("tabla_centroides_clusteres"))
# -------------------------- TABLA CLUSTERES CENTROIDES
library(DT)
ui <- fluidPage(
titlePanel("Centroides de los clusteres"),
selectInput (inputId='cluster',label="Selecciona un cluster",choices = unique(media_clusteres$cluster)),
DTOutput("tabla_centroides_clusteres"))
server <- function(input,output){
output$tabla_centroides_clusteres <- renderTable({
})
shinyApp(ui = ui, server = server)
}
)
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Centroides de los clusteres"),
selectInput (inputId='cluster',label="Selecciona un cluster",choices = unique(media_clusteres$cluster)),
DTOutput("tabla_centroides_clusteres"))
server <- function(input,output){
output$tabla_centroides_clusteres <- renderTable({
tableOutput()
})}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Centroides de los clusteres"),
selectInput (inputId='cluster',label="Selecciona un cluster",choices = unique(media_clusteres$cluster)),
DTOutput("tabla_centroides_clusteres"))
server <- function(input,output,session){
output$tabla_centroides_clusteres <- renderDT({
session %>% filter(cluster == input$cluster)
})
}
shinyApp(ui = ui, server = server)
server <- function(input,output,session){
output$tabla_centroides_clusteres <- renderDT({
media_clusteres %>% filter(cluster == input$cluster)
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
# Crear vector de opciones con "Todos" al inicio
updateSelectInput(session, "cluster",
choices = c("Todos", levels(media_clusteres$cluster)),
selected = "Todos")
output$tabla_centroides_clusteres <- renderDT({
if (input$cluster == "Todos") {
media_clusteres
} else {
media_clusteres %>% filter(cluster == input$cluster)
}
})
}
shinyApp(ui = ui, server = server)
=======
>>>>>>> 4e6cdec70ce8b15d5eeab9e43a2d0e92ff5e4ad3
>>>>>>> d0a0ad9222c5c4107237a6a068bd29d27a626144
