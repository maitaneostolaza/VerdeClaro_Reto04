grepl("^051\\d+", cod_est) ~ "Lacteos y postres",
grepl("^052\\d+", cod_est) ~ "Huevos y leche fresco",
grepl("^06\\d+", cod_est) ~ "Panaderia",
grepl("^07\\d+", cod_est) ~ "Carniceria",
grepl("^081\\d+", cod_est) ~ "Latas o mermeladas",
grepl("^082\\d+", cod_est) ~ "Latas",
grepl("^083140\\d+", cod_est) ~ "Conservas",
grepl("^083145\\d+", cod_est) ~ "Alimentacion animales",
grepl("^0833\\d+", cod_est) ~ "Snacks",
grepl("^084\\d+", cod_est) ~ "Snacks",
grepl("^080\\d+", cod_est) ~ "Snacks",
grepl("^090\\d+", cod_est) ~ "Salsas y arroces/pastas",
grepl("^091\\d+", cod_est) ~ "Salsas y arroces/pastas",
grepl("^092\\d+", cod_est) ~ "Frigorifico (sin productos de origen animal)",
grepl("^093\\d+", cod_est) ~ "Especies",
grepl("^10\\d+", cod_est) ~ "Panaderia",
grepl("^11\\d+", cod_est) ~ "Alcoholes",
grepl("^1213\\d+", cod_est) ~ "Higiene",
grepl("^13\\d+", cod_est) ~ "Higiene",
grepl("^14\\d+", cod_est) ~ "Platos preparados",
TRUE ~ "Otros"
)
)
# ---------- PRODUCTO ESPECIFICO (del df maestrostr)
df <- left_join(df,productos,by="cod_est")
View(df)
objretivo1_resultado
################################## OBJETIVO 2 ##################################
# modelo para el objetivo 2 y 4:
modelo_wrmf <- WRMF$new(rank = 10L, lambda = 0.1, feedback = 'implicit')
modelo_wrmf$fit_transform(matriz_general, n_iter = 1000L, convergence_tol=0.000001)
modelo_wrmf$fit_transform(matriz_general, n_iter = 1000L, convergence_tol=0.000001)
matriz_obj2 <- matriz_general[rownames(matriz_general) %in% objetivos$objetivo2$obj,]
matriz_obj2 <- as(matriz_obj2,"sparseMatrix")
preds_2 <- modelo_wrmf$predict(matriz_obj2, k = 1, not_recommend = matriz_obj2)
preds_2
lista_2 <- attr(preds_2,'ids')
# guardamos en un data frame
objetivo2_resultado <- as.data.frame(lista_2)
colnames(objetivo2_resultado) <- "cod_est"
objetivo2_resultado <- rownames_to_column(objetivo2_resultado, var = "Id_cliente")
objetivo2_resultado <- inner_join(objetivo2_resultado,productos,by="cod_est")
View(objetivo2_resultado)
objetivo2_resultado$Id_cliente
vec<-objetivo2_resultado$Id_cliente
vec
objetivo2_resultado$descripcion
saveRDS(objetivo2_resultado,"Datos\\Resultados\\Objetivo2_resultado.rds")
################################# OBJETIVO 3 ###################################
# el modelo es el mismo que para el objetivo 1
matriz_obj3 <- matriz_general
matriz_obj3 <- as(matriz_obj3,"sparseMatrix")
# cogemos los items que no queremos que recomiente para el predict
matriz_no_recomendados <- matriz_general [,!colnames(matriz_general) %in% objetivos$objetivo3$obj]
items_no_recomendados <- colnames(matriz_no_recomendados)
preds_3 <- modelo_wrmf$predict(matriz_obj3, k = 1, items_exclude = items_no_recomendados)
preds_3
lista_3 <- attr(preds_3,'ids')
# guardamos en un data frame con el nombre del producto
objetivo3_resultado <- as.data.frame(lista_3)
colnames(objetivo3_resultado) <- "cod_est"
objetivo3_resultado <- rownames_to_column(objetivo3_resultado, var = "Id_cliente")
objetivo3_resultado <- inner_join(objetivo3_resultado,productos,by="cod_est")
View(objetivo3_resultado)
unique(objetivo3_resultado$descripcion)
library(recommenderlab)
library(dplyr)
library(tidyr)
library(rsparse)
library(ggplot2)
library(Matrix)
library(stringr)
library(tibble)
# cargamos los datos
tickets <- readRDS("Datos\\Transformados\\tickets_Reducidos.rds")
clusteres <- readRDS("Datos\\Transformados\\df_con_clusteres.rds")
productos <- readRDS("Datos\\Originales\\maestroestr.RDS")
objetivos <- readRDS("Datos\\Originales\\objetivos.RDS")
##################################### OBJETIVO 1 ###############################
objetivo1 <- as.data.frame(objetivos[[1]])
objetivo2 <- as.data.frame(objetivos[[2]])
# ------------------------ como en este caso lo que queremos es recomendar a los 10
# usuarios mas relevantes un producto en especifico, el proceso a seguir es este:
# Entrenar el modelo
# cargar la matriz
matriz_general <- readRDS("Datos\\Resultados\\Matriz.rds")
rownames(matriz_general) <- matriz_general$id_cliente_enc
library(recommenderlab)
library(dplyr)
library(tidyr)
library(rsparse)
library(ggplot2)
library(Matrix)
library(stringr)
library(tibble)
# cargamos los datos
tickets <- readRDS("Datos\\Transformados\\tickets_Reducidos.rds")
clusteres <- readRDS("Datos\\Transformados\\df_con_clusteres.rds")
productos <- readRDS("Datos\\Originales\\maestroestr.RDS")
objetivos <- readRDS("Datos\\Originales\\objetivos.RDS")
##################################### OBJETIVO 1 ###############################
objetivo1 <- as.data.frame(objetivos[[1]])
objetivo2 <- as.data.frame(objetivos[[2]])
# ------------------------ como en este caso lo que queremos es recomendar a los 10
# usuarios mas relevantes un producto en especifico, el proceso a seguir es este:
# Entrenar el modelo
# cargar la matriz
matriz_general <- readRDS("Datos\\Resultados\\Matriz.rds")
rownames(matriz_general) <- matriz_general$id_cliente_enc
matriz_general
rownames(matriz_general) <- matriz_general$id_cliente_enc
matriz_general <- matriz_general[,-1]
matriz_general <- as.matrix(matriz_general)
matriz_rec <- as(matriz_general,"realRatingMatrix")
recuentoF <- rowCounts(matriz_rec) # cuantas celditas de una fila son diferentes de NA (cuantas pelis ha valorado cada usuario)
recuentoC <- colCounts(matriz_rec) # cuantas celditas de una columna son diferentes de NA
max(matriz,na.rm=T) ; min(matriz, na.rm=T)
# MEDIAS
media_columnas <- colMeans(matriz_rec,na.rm=T)
media_filas <- rowMeans(matriz_rec,na.rm=T)
hist(media_filas)
hist(media_columnas)
# PARA SABER EL GOODRATING Y EL GIVEN
min(recommenderlab::rowCounts(matriz_rec,na.rm=T))
######################### RECOMENDADORES CON RECOMMENDERLAB ####################
set.seed(8)
# --------------------------- TRAIN Y TEST
eval_scheme <- evaluationScheme(matriz_rec, method = "split",
train = 0.8, given= 1,
goodRating = 2)
# -------------------------- ENTRENAR MODELOS :
algos <- list("random" = list(name = "RANDOM", param = NULL),
"UBCF_10nn" = list(name = "UBCF", param = list(nn = 10)), # vecinos mas cercanos
"UBCF_50nn" = list(name = "UBCF", param = list(nn = 50)),
"IBCF_Pearson" = list(name = "IBCF", param = list(method = "Pearson")),
"popular" = list(name = "POPULAR" , param = NULL),
"svdf_50" = list(name = "SVDF",param = list(k=50)),
"svdf_100" = list(name = "SVDF",param = list(k=100)),
"svdf_200" = list(name = "SVDF",param = list(k=200)))
############################### OBJETIVO 1 #####################################
# Creamos el modelo WRMF -------------------------------------------------------
matriz_general <- readRDS("Datos\\Resultados\\Matriz_sinNA.rds")
storage.mode(matriz_general) <- "numeric"
# para el objetivo 1 y 3 cambiamos filas por columnas
matriz_alreves <- t(matriz_general)
# -- MODELO:
modelo_wrmf_alreves <- WRMF$new(rank = 10L, lambda = 0.1, feedback = 'implicit')
modelo_wrmf_alreves$fit_transform(matriz_alreves, n_iter = 1000L, convergence_tol=0.000001)
matriz_obj1 <- matriz_alreves[rownames(matriz_alreves) %in% objetivos$objetivo1$obj, , drop=F]
matriz_obj1 <- as(matriz_obj1,"sparseMatrix")
preds_1 <- modelo_wrmf_alreves$predict(matriz_obj1, k = 10) # para que nos de 10 usuarios
preds_1
lista_1 <- attr(preds_1,'ids')
# guardamos el df en resultados
objretivo1_resultado <- as.data.frame(lista_1)
rownames(objretivo1_resultado)<- c("MASAS DE PIZZA")
saveRDS(objretivo1_resultado, "Datos\\Resultados\\Objetivo1_resultado.rds")
################################## OBJETIVO 2 ##################################
# modelo para el objetivo 2 y 4:
modelo_wrmf <- WRMF$new(rank = 10L, lambda = 0.1, feedback = 'implicit')
modelo_wrmf$fit_transform(matriz_general, n_iter = 1000L, convergence_tol=0.000001)
matriz_obj2 <- matriz_general[rownames(matriz_general) %in% objetivos$objetivo2$obj,]
matriz_obj2 <- as(matriz_obj2,"sparseMatrix")
preds_2 <- modelo_wrmf$predict(matriz_obj2, k = 1, not_recommend = matriz_obj2)
preds_2
lista_2 <- attr(preds_2,'ids')
# guardamos en un data frame
objetivo2_resultado <- as.data.frame(lista_2)
colnames(objetivo2_resultado) <- "cod_est"
objetivo2_resultado <- rownames_to_column(objetivo2_resultado, var = "Id_cliente")
objetivo2_resultado <- inner_join(objetivo2_resultado,productos,by="cod_est")
saveRDS(objetivo2_resultado,"Datos\\Resultados\\Objetivo2_resultado.rds")
################################# OBJETIVO 3 ###################################
# el modelo es el mismo que para el objetivo 1
matriz_obj3 <- matriz_general
matriz_obj3 <- as(matriz_obj3,"sparseMatrix")
# cogemos los items que no queremos que recomiente para el predict
matriz_no_recomendados <- matriz_general [,!colnames(matriz_general) %in% objetivos$objetivo3$obj]
items_no_recomendados <- colnames(matriz_no_recomendados)
preds_3 <- modelo_wrmf$predict(matriz_obj3, k = 1, items_exclude = items_no_recomendados)
preds_3
lista_3 <- attr(preds_3,'ids')
# guardamos en un data frame con el nombre del producto
objetivo3_resultado <- as.data.frame(lista_3)
colnames(objetivo3_resultado) <- "cod_est"
objetivo3_resultado <- rownames_to_column(objetivo3_resultado, var = "Id_cliente")
objetivo3_resultado <- inner_join(objetivo3_resultado,productos,by="cod_est")
saveRDS(objetivo3_resultado,"Datos\\Resultados\\Objetivo3_resultado.rds")
################################# OBJETIVO 4 ###################################
obj4<-objetivos[[4]]$obj
tickets_filtrados <- tickets[tickets$id_cliente_enc %in% obj4, ]
ultimos_tickets <- tickets_filtrados %>%
group_by(id_cliente_enc) %>%
filter(dia == max(dia)) %>%
ungroup()
historial_tickets <- anti_join(tickets_filtrados, ultimos_tickets, by = "num_ticket")
tickets_matriz_agrupado <- historial_tickets %>%
group_by(id_cliente_enc, cod_est) %>%
summarise(N_compras = n(), .groups = "drop")
df_matriz <- pivot_wider(
tickets_matriz_agrupado,
names_from = "cod_est",
values_from = "N_compras",
values_fill = 0,
names_prefix = "id_"
)
matriz_sparse_o4 <- as(as.matrix(df_matriz[,-1]), "dgCMatrix")
rownames(matriz_sparse_o4) <- df_matriz$id_cliente_enc
modelo_wrmf_o4 <- WRMF$new(rank = 10L, lambda = 0.1, feedback = 'implicit')
modelo_wrmf_o4$fit_transform(matriz_sparse_o4, n_iter = 1000L, convergence_tol = 1e-6)
preds_o4 <- modelo_wrmf_o4$predict(matriz_sparse_o4, k = 1)
clientes <- rownames(matriz_sparse_o4)
productos_predichos <- attr(preds_o4, "ids")
recomendaciones_o4 <- data.frame(
id_cliente_enc = clientes,
producto_olvidado = productos_predichos
)
recomendaciones_o4 <- recomendaciones_o4 %>%
mutate(cod_est = str_remove(producto_olvidado, "id_")) %>%
left_join(productos %>% select(cod_est, descripcion), by = "cod_est") %>%
select(id_cliente_enc, cod_est, descripcion)
# guardamos el df
saveRDS(recomendaciones_o4,"Datos\\Resultados\\Objetivo4_resultado.rds")
library(dplyr)
library(tidyr)
library(rsparse)
library(ggplot2)
library(Matrix)
library(stringr)
library(tibble)
library(recommenderlab)
############################### OBJETIVO 1 #####################################
# Creamos el modelo WRMF -------------------------------------------------------
matriz_general <- readRDS("Datos\\Resultados\\Matriz_sinNA.rds")
storage.mode(matriz_general) <- "numeric"
# para el objetivo 1 y 3 cambiamos filas por columnas
matriz_alreves <- t(matriz_general)
# -- MODELO:
modelo_wrmf_alreves <- WRMF$new(rank = 10L, lambda = 0.1, feedback = 'implicit')
modelo_wrmf_alreves$fit_transform(matriz_alreves, n_iter = 1000L, convergence_tol=0.000001)
matriz_obj1 <- matriz_alreves[rownames(matriz_alreves) %in% objetivos$objetivo1$obj, , drop=F]
matriz_obj1 <- as(matriz_obj1,"sparseMatrix")
preds_1 <- modelo_wrmf_alreves$predict(matriz_obj1, k = 10) # para que nos de 10 usuarios
preds_1
lista_1 <- attr(preds_1,'ids')
# guardamos el df en resultados
objretivo1_resultado <- as.data.frame(lista_1)
rownames(objretivo1_resultado)<- c("MASAS DE PIZZA")
saveRDS(objretivo1_resultado, "Datos\\Resultados\\Objetivo1_resultado.rds")
################################## OBJETIVO 2 ##################################
# modelo para el objetivo 2 y 4:
modelo_wrmf <- WRMF$new(rank = 10L, lambda = 0.1, feedback = 'implicit')
modelo_wrmf$fit_transform(matriz_general, n_iter = 1000L, convergence_tol=0.000001)
matriz_obj2 <- matriz_general[rownames(matriz_general) %in% objetivos$objetivo2$obj,]
matriz_obj2 <- as(matriz_obj2,"sparseMatrix")
preds_2 <- modelo_wrmf$predict(matriz_obj2, k = 1, not_recommend = matriz_obj2)
preds_2
lista_2 <- attr(preds_2,'ids')
# guardamos en un data frame
objetivo2_resultado <- as.data.frame(lista_2)
colnames(objetivo2_resultado) <- "cod_est"
objetivo2_resultado <- rownames_to_column(objetivo2_resultado, var = "Id_cliente")
objetivo2_resultado <- inner_join(objetivo2_resultado,productos,by="cod_est")
saveRDS(objetivo2_resultado,"Datos\\Resultados\\Objetivo2_resultado.rds")
################################# OBJETIVO 3 ###################################
# el modelo es el mismo que para el objetivo 1
matriz_obj3 <- matriz_general
matriz_obj3 <- as(matriz_obj3,"sparseMatrix")
# cogemos los items que no queremos que recomiente para el predict
matriz_no_recomendados <- matriz_general [,!colnames(matriz_general) %in% objetivos$objetivo3$obj]
items_no_recomendados <- colnames(matriz_no_recomendados)
preds_3 <- modelo_wrmf$predict(matriz_obj3, k = 1, items_exclude = items_no_recomendados)
preds_3
lista_3 <- attr(preds_3,'ids')
# guardamos en un data frame con el nombre del producto
objetivo3_resultado <- as.data.frame(lista_3)
colnames(objetivo3_resultado) <- "cod_est"
objetivo3_resultado <- rownames_to_column(objetivo3_resultado, var = "Id_cliente")
objetivo3_resultado <- inner_join(objetivo3_resultado,productos,by="cod_est")
saveRDS(objetivo3_resultado,"Datos\\Resultados\\Objetivo3_resultado.rds")
################################# OBJETIVO 4 ###################################
obj4<-objetivos[[4]]$obj
# 1. Filtramos tickets solo para los clientes objetivo
# 2. Obtenemos la última fecha de compra por cliente
ultimas_compras_df <- tickets %>%
filter(id_cliente_enc %in% obj4) %>%
group_by(id_cliente_enc) %>%
filter(dia == max(dia)) %>%
group_by(id_cliente_enc, cod_est) %>%
summarise(N_compras = n(), .groups = "drop") %>%
mutate(cod_est = str_c("id_", cod_est)) %>%
pivot_wider(names_from = cod_est, values_from = N_compras, values_fill = 0)
# Aseguramos que todos los clientes objetivo estén como filas, incluso si no tienen compras
mo4 <- ultimas_compras_df %>%
right_join(data.frame(id_cliente_enc = obj4), by = "id_cliente_enc") %>%
replace(is.na(.), 0) %>%
column_to_rownames("id_cliente_enc") %>%
as.matrix()
# Igualamos columnas a las del modelo original (en orden), rellenando con ceros si falta alguna
faltan_cols <- setdiff(colnames(matriz), colnames(mo4))
# Igualamos columnas a las del modelo original (en orden), rellenando con ceros si falta alguna
faltan_cols <- setdiff(colnames(matriz_general), colnames(mo4))
sobran_cols <- setdiff(colnames(mo4), colnames(matriz_general))
mo4 <- mo4[, setdiff(colnames(mo4), sobran_cols), drop = FALSE]
mo4 <- cbind(mo4, matrix(0, nrow = nrow(mo4), ncol = length(faltan_cols),
dimnames = list(rownames(mo4), faltan_cols)))
mo4 <- mo4[, colnames(matriz)]
mo4 <- mo4[, colnames(matriz_general)]
mo4 <- as(mo4, "sparseMatrix")
# Predicciones
preds_4 <- modelo_wrmf$predict(mo4, k = 1, not_recommend = mo4)
preds_4
attr(preds_4,'ids')
clientes <- rownames(mo4)
clientes <- rownames(mo4)
productos_predichos <- attr(preds_4, "ids")
recomendaciones_o4 <- data.frame(
id_cliente_enc = clientes,
producto_olvidado = productos_predichos
)
recomendaciones_o4 <- recomendaciones_o4 %>%
mutate(cod_est = str_remove(producto_olvidado, "id_")) %>%
left_join(productos %>% select(cod_est, descripcion), by = "cod_est") %>%
select(id_cliente_enc, cod_est, descripcion)
recomendaciones_o4
tickets_filtrados <- tickets[tickets$id_cliente_enc %in% obj4, ]
ultimos_tickets <- tickets_filtrados %>%
group_by(id_cliente_enc) %>%
filter(dia == max(dia)) %>%
ungroup()
historial_tickets <- anti_join(tickets_filtrados, ultimos_tickets, by = "num_ticket")
tickets_matriz_agrupado <- historial_tickets %>%
group_by(id_cliente_enc, cod_est) %>%
summarise(N_compras = n(), .groups = "drop")
df_matriz <- pivot_wider(
tickets_matriz_agrupado,
names_from = "cod_est",
values_from = "N_compras",
values_fill = 0,
names_prefix = "id_"
)
matriz_sparse_o4 <- as(as.matrix(df_matriz[,-1]), "dgCMatrix")
rownames(matriz_sparse_o4) <- df_matriz$id_cliente_enc
modelo_wrmf_o4 <- WRMF$new(rank = 10L, lambda = 0.1, feedback = 'implicit')
modelo_wrmf_o4$fit_transform(matriz_sparse_o4, n_iter = 1000L, convergence_tol = 1e-6)
preds_o4 <- modelo_wrmf_o4$predict(matriz_sparse_o4, k = 1)
clientes <- rownames(matriz_sparse_o4)
productos_predichos <- attr(preds_o4, "ids")
recomendaciones_o4 <- data.frame(
id_cliente_enc = clientes,
producto_olvidado = productos_predichos
)
recomendaciones_o4 <- recomendaciones_o4 %>%
mutate(cod_est = str_remove(producto_olvidado, "id_")) %>%
left_join(productos %>% select(cod_est, descripcion), by = "cod_est") %>%
select(id_cliente_enc, cod_est, descripcion)
recomendaciones_o4
ultimas_compras_df <- tickets %>%
filter(id_cliente_enc %in% obj4) %>%
group_by(id_cliente_enc) %>%
filter(dia == max(dia)) %>%
group_by(id_cliente_enc, cod_est) %>%
summarise(N_compras = n(), .groups = "drop") %>%
mutate(cod_est = str_c("id_", cod_est)) %>%
pivot_wider(names_from = cod_est, values_from = N_compras, values_fill = 0)
# Aseguramos que todos los clientes objetivo estén como filas, incluso si no tienen compras
mo4 <- ultimas_compras_df %>%
right_join(data.frame(id_cliente_enc = obj4), by = "id_cliente_enc") %>%
replace(is.na(.), 0) %>%
column_to_rownames("id_cliente_enc") %>%
as.matrix()
# Igualamos columnas a las del modelo original (en orden), rellenando con ceros si falta alguna
faltan_cols <- setdiff(colnames(matriz_general), colnames(mo4))
sobran_cols <- setdiff(colnames(mo4), colnames(matriz_general))
mo4 <- mo4[, setdiff(colnames(mo4), sobran_cols), drop = FALSE]
mo4 <- cbind(mo4, matrix(0, nrow = nrow(mo4), ncol = length(faltan_cols),
dimnames = list(rownames(mo4), faltan_cols)))
mo4 <- mo4[, colnames(matriz_general)]
mo4 <- as(mo4, "sparseMatrix")
# Predicciones
preds_4 <- modelo_wrmf$predict(mo4, k = 1, not_recommend = mo4)
preds_4
ultimas_compras <- list()
for (c in id_objetivo4) {
tickets_matriz <- tickets %>%
filter(id_cliente_enc == c) %>%
filter(dia == max(dia))
tickets_matriz_agrupado <- tickets_matriz %>%
group_by(cod_est) %>%
summarise(dia, N_compras = n()) %>%
select(cod_est, N_compras) %>%
mutate(cod_est = str_c("id_", cod_est))
ultimas_compras[[c]] <- tickets_matriz_agrupado
}
ultimas_compras <- list()
for (c in obj4) {
tickets_matriz <- tickets %>%
filter(id_cliente_enc == c) %>%
filter(dia == max(dia))
tickets_matriz_agrupado <- tickets_matriz %>%
group_by(cod_est) %>%
summarise(dia, N_compras = n()) %>%
select(cod_est, N_compras) %>%
mutate(cod_est = str_c("id_", cod_est))
ultimas_compras[[c]] <- tickets_matriz_agrupado
}
# Creo una matriz vacia con las mismas columnas que se ha entrenado el modelo
# y le pongo los nombres de las columnas y filas que les corresponden
mo4 <- matrix(0, ncol = ncol(matriz_general), nrow = length(obj4))
colnames(mo4) <- colnames(matriz_general)
rownames(mo4) <- id_objetivo4
rownames(mo4) <- obj4
# Con un for hago que para cada cliente y para cada producto comprado, ponga en
# la matriz en la fila y columna correspondiente la cantidad comprada
for (cliente in obj4) {
compra <- ultimas_compras[[cliente]]
for (prod in compra$cod_est) {
producto <- filter(compra, cod_est == prod)
mo4[cliente, prod] <- producto$N_compras
}
}
# Con un for hago que para cada cliente y para cada producto comprado, ponga en
# la matriz en la fila y columna correspondiente la cantidad comprada
for (cliente in obj4) {
compra <- ultimas_compras[[cliente]]
for (prod in compra$cod_est) {
producto <- filter(compra, cod_est == prod)
mo4[cliente, prod] <- productos$N_compras
}
}
# Con un for hago que para cada cliente y para cada producto comprado, ponga en
# la matriz en la fila y columna correspondiente la cantidad comprada
for (cliente in obj4) {
compra <- ultimas_compras[[cliente]]
for (prod in compra$cod_est) {
producto <- filter(compra, cod_est == prod)
mo4[cliente, prod] <- producto$N_compras
}
}
ultimas_compras <- list()
for (c in obj4) {
tickets_matriz <- tickets %>%
filter(id_cliente_enc == c) %>%
filter(dia == max(dia))
tickets_matriz_agrupado <- tickets_matriz %>%
group_by(cod_est) %>%
summarise(dia, N_compras = n()) %>%
select(cod_est, N_compras) %>%
mutate(cod_est = str_c("id_", cod_est))
ultimas_compras[[c]] <- tickets_matriz_agrupado
}
# Creo una matriz vacia con las mismas columnas que se ha entrenado el modelo
# y le pongo los nombres de las columnas y filas que les corresponden
mo4 <- matrix(0, ncol = ncol(matriz_general), nrow = length(obj4))
colnames(mo4) <- colnames(matriz_general)
rownames(mo4) <- obj4
# Con un for hago que para cada cliente y para cada producto comprado, ponga en
# la matriz en la fila y columna correspondiente la cantidad comprada
for (cliente in obj4) {
compra <- ultimas_compras[[cliente]]
for (prod in compra$cod_est) {
producto <- filter(compra, cod_est == prod)
mo4[cliente, prod] <- producto$N_compras
}
}
ultimas_compras <- list()
for (c in obj4) {
tickets_matriz <- tickets %>%
filter(id_cliente_enc == c) %>%
filter(dia == max(dia))
tickets_matriz_agrupado <- tickets_matriz %>%
group_by(cod_est) %>%
summarise(dia, N_compras = n()) %>%
select(cod_est, N_compras) %>%
mutate(cod_est = str_c("id_", cod_est))  # Añadido el prefijo 'id_'
ultimas_compras[[c]] <- tickets_matriz_agrupado
}
# Creo una matriz vacía con las mismas columnas que se ha entrenado el modelo
# y le pongo los nombres de las columnas y filas que les corresponden
mo4 <- matrix(0, ncol = ncol(matriz_general), nrow = length(obj4))
colnames(mo4) <- colnames(matriz_general)
rownames(mo4) <- obj4
# Con un for hago que para cada cliente y para cada producto comprado, ponga en
# la matriz en la fila y columna correspondiente la cantidad comprada
for (cliente in obj4) {
compra <- ultimas_compras[[cliente]]
for (prod in compra$cod_est) {
prod <- str_c("id_", prod)  # Aseguramos que el nombre del producto tenga el prefijo 'id_'
# Verificamos si el producto está en las columnas de mo4
if (prod %in% colnames(mo4)) {
producto <- filter(compra, cod_est == prod)
mo4[cliente, prod] <- producto$N_compras
} else {
warning(paste("El producto", prod, "no está en las columnas de mo4"))
}
}
}
mo4 <- as(mo4, "sparseMatrix")
# Predicciones
preds_4 <- modelo_wrmf$predict(mo4, k = 1, not_recommend = mo4)
preds_4
clientes <- rownames(mo4)
productos_predichos <- attr(preds_4, "ids")
recomendaciones_o4 <- data.frame(
id_cliente_enc = clientes,
producto_olvidado = productos_predichos
)
recomendaciones_o4 <- recomendaciones_o4 %>%
mutate(cod_est = str_remove(producto_olvidado, "id_")) %>%
left_join(productos %>% select(cod_est, descripcion), by = "cod_est") %>%
select(id_cliente_enc, cod_est, descripcion)
recomendaciones_o4
