group_by(fecha) %>%
summarise(tickets = n_distinct(ticket)) %>%
ggplot(aes(x = fecha, y = tickets)) +
geom_line(color = "steelblue") +
labs(title = "N칰mero de tickets por d칤a", x = "Fecha", y = "Tickets")
# Productos vendidos por d칤a de la semana
datos <- datos %>%
mutate(
fecha = ymd(fecha),
dia_semana = wday(fecha, label = TRUE, abbr = FALSE, week_start = 1)
)
ventas_por_dia <- datos %>%
count(dia_semana)
ggplot(ventas_por_dia, aes(x = dia_semana, y = n)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(
title = "Cantidad total de productos vendidos por d칤a de la semana",
x = "D칤a de la semana",
y = "Productos vendidos"
) +
theme_minimal()
# Productos vendidos por semana
datos <- datos %>%
mutate(semana = floor_date(fecha, unit = "week", week_start = 1))
ventas_por_semana <- datos %>%
count(semana)
ggplot(ventas_por_semana, aes(x = semana, y = n)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(
title = "Productos vendidos por semana",
x = "Semana (fecha de inicio)",
y = "Cantidad de productos"
) +
theme_minimal()
# Top 10 clientes que m치s compraron
compras_por_cliente <- datos %>%
group_by(id_cliente) %>%
summarise(productos_comprados = n()) %>%
arrange(desc(productos_comprados))
#SEMANA DEL A칌O
# Top 10 clientes que m치s compraron
compras_por_cliente <- datos %>%
group_by(id_cliente) %>%
summarise(productos_comprados = n()) %>%
arrange(desc(productos_comprados))
top_10 <- compras_por_cliente %>% slice_head(n = 10)
ggplot(top_10, aes(x = reorder(id_cliente, productos_comprados), y = productos_comprados)) +
geom_bar(stat = "identity", fill = "darkgreen") +
coord_flip() +
labs(title = "Top 10 clientes m치s compradores",
x = "ID Cliente", y = "Productos comprados") +
theme_minimal()
ggplot(top_10, aes(x = reorder(id_cliente, productos_comprados), y = productos_comprados)) +
geom_bar(stat = "identity", fill = "darkgreen") +
coord_flip() +
labs(title = "Top 10 clientes m치s que mas unidades compran",
x = "ID Cliente", y = "Productos comprados") +
theme_minimal()
# Unir clusters con tickets limpios
df <- left_join(tickets_limpios, clusteres, by = "id_cliente_enc")
df <- df[ , -c(5,6,7)]  # Eliminar columnas innecesarias
# Clasificaci칩n general de productos
df <- df %>%
mutate(
cod_est = as.character(cod_est),
producto_general = case_when(
grepl("^010\\d+", cod_est) ~ "Fruta y verdura",
grepl("^0125\\d+", cod_est) ~ "Legumbres y frutos secos a granel",
grepl("^02\\d+", cod_est) ~ "Carniceria",
grepl("^03\\d+", cod_est) ~ "Congelados",
grepl("^04\\d+", cod_est) ~ "Charcuteria",
grepl("^050\\d+", cod_est) ~ "Lacteos",
grepl("^051\\d+", cod_est) ~ "Lacteos y postres",
grepl("^052\\d+", cod_est) ~ "Huevos y leche fresco",
grepl("^06\\d+", cod_est) ~ "Panaderia",
grepl("^07\\d+", cod_est) ~ "Carniceria",
grepl("^081\\d+", cod_est) ~ "Latas o mermeladas",
grepl("^082\\d+", cod_est) ~ "Latas",
grepl("^083140\\d+", cod_est) ~ "Conservas",
grepl("^083145\\d+", cod_est) ~ "Alimentacion animales",
grepl("^0833\\d+", cod_est) ~ "Snacks",
grepl("^084\\d+", cod_est) ~ "Snacks",
grepl("^080\\d+", cod_est) ~ "Snacks",
grepl("^090\\d+", cod_est) ~ "Salsas y arroces/pastas",
grepl("^091\\d+", cod_est) ~ "Salsas y arroces/pastas",
grepl("^092\\d+", cod_est) ~ "Frigorifico (sin productos de origen animal)",
grepl("^093\\d+", cod_est) ~ "Especies",
grepl("^10\\d+", cod_est) ~ "Panaderia",
grepl("^11\\d+", cod_est) ~ "Alcoholes",
grepl("^1213\\d+", cod_est) ~ "Higiene",
grepl("^13\\d+", cod_est) ~ "Higiene",
grepl("^14\\d+", cod_est) ~ "Platos preparados",
TRUE ~ "Otros"
)
)
# Asegurar tipo de fecha y ordenar d칤as
df$fecha <- ymd(df$dia)
df <- df %>%
mutate(
dia_semana = wday(dia, label = TRUE, abbr = FALSE, week_start = 1),
dia_semana = factor(dia_semana, levels = c("lunes", "martes", "mi칠rcoles", "jueves", "viernes", "s치bado", "domingo"))
)
# Agrupar por d칤a y categor칤a
ventas_dia_producto <- df %>%
group_by(dia_semana, producto_general) %>%
summarise(cantidad_vendida = n(), .groups = "drop")
library(RColorBrewer)
# Agrupar y seleccionar top 5 por d칤a
top5_dia <- ventas_dia_producto %>%
group_by(dia_semana) %>%
slice_max(order_by = cantidad_vendida, n = 5) %>%
ungroup()
# Paleta de colores brillantes
colores_vivos <- brewer.pal(n = 8, name = "Set2")
# Gr치fico final
ggplot(top5_dia, aes(x = dia_semana, y = cantidad_vendida, fill = producto_general)) +
geom_col() +
coord_flip() +
labs(
title = "Top 5 productos m치s vendidos por d칤a de la semana",
x = "D칤a de la semana",
y = "Cantidad vendida",
fill = "Producto general"
) +
scale_fill_manual(values = colores_vivos) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
df <- df %>%
mutate(
dia_semana = wday(dia, label = TRUE, abbr = FALSE, week_start = 1),
dia_semana = factor(dia_semana, levels = c("lunes", "martes", "mi칠rcoles", "jueves", "viernes", "s치bado", "domingo"))
) %>%
filter(dia_semana != "domingo")  # 游댠 Filtramos domingos
# Gr치fico final
ggplot(top5_dia, aes(x = dia_semana, y = cantidad_vendida, fill = producto_general)) +
geom_col() +
coord_flip() +
labs(
title = "Top 5 productos m치s vendidos por d칤a de la semana",
x = "D칤a de la semana",
y = "Cantidad vendida",
fill = "Producto general"
) +
scale_fill_manual(values = colores_vivos) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
df <- df %>%
mutate(
dia_semana = wday(dia, label = TRUE, abbr = FALSE, week_start = 1),
dia_semana = factor(dia_semana, levels = c("lunes", "martes", "mi칠rcoles", "jueves", "viernes", "s치bado", "domingo"))
) %>%
filter(dia_semana != "domingo")  # 游댠 Filtramos domingos
df <- df %>%
mutate(
dia_semana = wday(dia, label = TRUE, abbr = FALSE, week_start = 1),
dia_semana = factor(dia_semana, levels = c("lunes", "martes", "mi칠rcoles", "jueves", "viernes", "s치bado", "domingo"))
) %>%
filter(dia_semana != "domingo")  #  Filtramos domingos
# Asegurarse de que los c칩digos son texto
Maestroestr$cod_est <- as.character(Maestroestr$cod_est)
lineas$cod_est <- as.character(lineas$cod_est)
# Renombrar columnas si es necesario
colnames(lineas) <- c("fecha", "ticket", "cod_est", "id_cliente")
# Procesar tabla de l칤neas
lineas <- lineas %>%
mutate(
fecha = ymd(fecha),
dia_semana = wday(fecha, label = TRUE, abbr = FALSE, week_start = 1),  # lunes a domingo
prefix2 = str_sub(cod_est, 1, 2)
)
# Asegurarse de que los d칤as est치n en orden (lunes a domingo)
top_prefix_por_dia$dia_semana <- factor(top_prefix_por_dia$dia_semana,
levels = c("lunes", "martes", "mi칠rcoles", "jueves", "viernes", "s치bado", "domingo"))
# Graficar con etiquetas
ggplot(top_prefix_por_dia, aes(x = dia_semana, y = cantidad_vendida, fill = prefix2)) +
geom_col() +
geom_text(aes(label = prefix2), vjust = -0.5, size = 5, color = "black") +
labs(
title = "Prefijo de producto m치s vendido por d칤a de la semana",
x = "D칤a de la semana",
y = "N칰mero de productos vendidos",
fill = "Prefix2"
) +
theme_minimal()
# Gr치fico final
ggplot(top5_dia, aes(x = dia_semana, y = cantidad_vendida, fill = producto_general)) +
geom_col() +
coord_flip() +
labs(
title = "Top 5 productos m치s vendidos por d칤a de la semana",
x = "D칤a de la semana",
y = "Cantidad vendida",
fill = "Producto general"
) +
scale_fill_manual(values = colores_vivos) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Gr치fico final
ggplot(top5_dia, aes(x = dia_semana, y = cantidad_vendida, fill = producto_general)) +
geom_col() +
coord_flip() +
labs(
title = "Top 5 productos m치s vendidos por d칤a de la semana",
x = "D칤a de la semana",
y = "Cantidad vendida",
fill = "Producto general"
) +
scale_fill_manual(values = colores_vivos) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(ventas_por_semana, aes(x = semana, y = n)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(
title = "Productos vendidos por semana del a침o"
x = "Semana (fecha de inicio)",
ggplot(ventas_por_semana, aes(x = semana, y = n)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(
title = "Productos vendidos por semana del a침o",
x = "Semana (fecha de inicio)",
y = "Cantidad de productos"
) +
theme_minimal()
# Productos vendidos por semana
# Mutar la columna para que 'semana' sea el n칰mero de la semana del a침o
datos <- datos %>%
mutate(semana = floor_date(fecha, unit = "week", week_start = 1),
semana_numero = format(semana, "%U"))  # Esto extrae el n칰mero de semana del a침o
# Crear el gr치fico
ventas_por_semana <- datos %>%
count(semana)
ggplot(ventas_por_semana, aes(x = semana, y = n)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(
title = "Productos vendidos por semana del a침o",
x = "Semana (fecha de inicio)",
y = "Cantidad de productos"
) +
theme_minimal() +
scale_x_date(labels = scales::date_format("%U"), breaks = "1 week") # Muestra el n칰mero de la semana
library(recommenderlab)
library(dplyr)
library(tidyr)
library(rsparse)
library(ggplot2)
# cargamos los datos
tickets <- readRDS("Datos\\Transformados\\tickets_Reducidos.rds")
clusteres <- readRDS("Datos\\Transformados\\df_con_clusteres.rds")
productos <- readRDS("Datos\\Originales\\maestroestr.RDS")
objetivos <- readRDS("Datos\\Originales\\objetivos.RDS")
##################################### OBJETIVO 1 ###############################
objetivo1 <- as.data.frame(objetivos[[1]])
objetivo2 <- as.data.frame(objetivos[[2]])
# ------------------------ como en este caso lo que queremos es recomendar a los 10
# usuarios mas relevantes un producto en especifico, el proceso a seguir es este:
# Entrenar el modelo
# cargar la matriz
matriz_general <- readRDS("Datos\\Resultados\\Matriz.rds")
rownames(matriz_general) <- matriz_general$id_cliente_enc
matriz_general <- matriz_general[,-1]
matriz_rec <- as.matrix(matriz_general)
matriz_rec <- as(matriz_rec,"realRatingMatrix")
# --------------------- ESTAD칈STICOS DE LA MATRIZ
matriz <- as(matriz_general,"matrix")
recuentoF <- rowCounts(matriz_rec) # cuantas celditas de una fila son diferentes de NA (cuantas pelis ha valorado cada usuario)
recuentoC <- colCounts(matriz_rec) # cuantas celditas de una columna son diferentes de NA
max(matriz,na.rm=T) ; min(matriz, na.rm=T)
# MEDIAS
media_columnas <- colMeans(matriz_rec,na.rm=T)
media_filas <- rowMeans(matriz_rec,na.rm=T)
hist(media_filas)
hist(media_columnas)
# PARA SABER EL GOODRATING Y EL GIVEN
min(recommenderlab::rowCounts(matriz_rec,na.rm=T))
######################### RECOMENDADORES CON RECOMMENDERLAB ####################
set.seed(8)
# --------------------------- TRAIN Y TEST
eval_scheme <- evaluationScheme(matriz_rec, method = "split",
train = 0.8, given= 1,
goodRating = 2)
# -------------------------- ENTRENAR MODELOS :
algos <- list("random" = list(name = "RANDOM", param = NULL),
"UBCF_10nn" = list(name = "UBCF", param = list(nn = 10)), # vecinos mas cercanos
"UBCF_50nn" = list(name = "UBCF", param = list(nn = 50)),
"IBCF_Pearson" = list(name = "IBCF", param = list(method = "Pearson")),
"popular" = list(name = "POPULAR" , param = NULL),
"svdf_50" = list(name = "SVDF",param = list(k=50)),
"svdf_100" = list(name = "SVDF",param = list(k=100)),
"svdf_200" = list(name = "SVDF",param = list(k=200)))
# ----------- TOPNLIST
eval <- evaluate(eval_scheme, algos, type = "topNList", n = c(1,3,5,10,15,20))
plumber::plumb(file='Api.R')$run()
plumber::plumb(file='Api.R')$run()
library(dplyr)
library(lubridate)
library(stringr)
library(tidyr)
library(tidyverse)
library(purrr)
library(plotly)
library(naniar)
library(VIM)
# Cargamos los ficheros previamente limpios
#Maestroestr <- readRDS("Datos\\Originales\\maestroestr.RDS")
#
# df_entero <- readRDS("Datos\\Transformados\\df_clustering_entero.rds")
# tickets_enc <- readRDS("Datos\\Originales\\tickets_enc.RDS")
#
# sum(is.na(df_entero))
# miss_var_summary(df_entero)
#
# str(df_entero)
# colnames(df_entero)[1] <- "id_cliente_enc"
#PRUEBA
# --- PRIMER FILTRO: cod_est ---
data <- readRDS("Datos/Transformados/tickets_enc.rds")
# Agrupar por cod_est y contar la cantidad de apariciones
conteo_cod <- data %>%
group_by(cod_est) %>%
summarise(cantidad = n(), .groups = "drop")
q1_cod <- quantile(conteo_cod$cantidad, 0.25, na.rm = TRUE)
q3_cod <- quantile(conteo_cod$cantidad, 0.75, na.rm = TRUE)
# Filtrar los cod_est fuera del rango intercuart칤lico
cod_filtrados <- conteo_cod %>%
filter(cantidad > q3_cod | cantidad <= q1_cod) %>%
pull(cod_est)
data_filtrada <- data %>%
filter(cod_est %in% cod_filtrados)
objetivos <- readRDS("Datos/Originales/objetivos.RDS")
clientes_objetivo <- purrr::map(objetivos, "obj") %>% unlist() %>% unique()
# Recuperar registros de clientes objetivo que fueron eliminados por cod_est
clientes_rescatados <- data %>%
filter(id_cliente_enc %in% clientes_objetivo)
data_filtrada <- bind_rows(data_filtrada, clientes_rescatados) %>%
distinct()
saveRDS(data_filtrada, "Datos/Transformados/tickets_filtrados_cod_est.rds")
# --- SEGUNDO FILTRO: id_cliente_enc ---
data_cod <- readRDS("Datos/Transformados/tickets_filtrados_cod_est.rds")
# Agrupar por id_cliente_enc y contar
conteo_cli <- data_cod %>%
group_by(id_cliente_enc) %>%
summarise(cantidad = n(), .groups = "drop")
q1_cli <- quantile(conteo_cli$cantidad, 0.25, na.rm = TRUE)
q3_cli <- quantile(conteo_cli$cantidad, 0.75, na.rm = TRUE)
# Filtrar los id_cliente_enc fuera del rango intercuart칤lico
clientes_filtrados <- conteo_cli %>%
filter(cantidad > q3_cli | cantidad <= q1_cli) %>%
pull(id_cliente_enc)
# Clientes filtrados por IQR + los que deben mantenerse s칤 o s칤
objetivos <- readRDS("Datos//Originales//objetivos.RDS")
# Unir todos los clientes objetivo en un 칰nico vector
clientes_objetivo <- purrr::map(objetivos, "obj") %>%
unlist() %>%
unique()
clientes_finales <- union(clientes_filtrados, clientes_objetivo)
data_final <- data_cod %>%
filter(id_cliente_enc %in% clientes_finales)
saveRDS(data_final, "Datos/Transformados/tickets_Reducidos.rds")
#VERIFICAR QUE SE HAN QUITADO 50% de clientes y productos
data_original <- readRDS("Datos/Transformados/tickets_enc.rds")
data_Reducida <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
# Total de cod_est 칰nicos en original y en filtrado
n_total_cod <- n_distinct(data_original$cod_est)
n_filtrado_cod <- n_distinct(data_Reducida$cod_est)
# Calcular % eliminados
porcentaje_cod_est_eliminados <- 100 * (1 - n_filtrado_cod / n_total_cod)
cat("Se han eliminado aproximadamente", round(porcentaje_cod_est_eliminados, 2), "% de cod_est\n")
data_filtrada_cod <- readRDS("Datos/Transformados/tickets_filtrados_cod_est.rds")
# Cargar datos finales
data_final <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
# Total de clientes 칰nicos antes y despu칠s
n_total_cli <- n_distinct(data_filtrada_cod$id_cliente_enc)
n_filtrado_cli <- n_distinct(data_final$id_cliente_enc)
# Calcular % eliminados
porcentaje_clientes_eliminados <- 100 * (1 - n_filtrado_cli / n_total_cli)
cat("Se han eliminado aproximadamente", round(porcentaje_clientes_eliminados, 2), "% de clientes\n")
a
data_final <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
library(dplyr)
library(lubridate)
library(stringr)
library(tidyr)
library(tidyverse)
library(purrr)
library(plotly)
library(naniar)
library(VIM)
data_final <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
data_final <- data_final %>%
mutate(dia = ymd(dia))
View(data_final)
data_final <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
View(data_final)
View(data_final)
data_final <- data_final %>% group_by(dia) %>% summarise(conteo=n())
View(data_final)
data_final <- data_final %>%
mutate(dia = ymd(dia))
data_final <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
data_final <- data_final %>%
mutate(dia = ymd(dia))
min(data_final$dia)
max(data_final$dia)
data_final <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
clientes_variedad <- data_final %>%
group_by(id_cliente_enc) %>%
summarise(productos_diferentes = n_distinct(cod_est)) %>%
filter(productos_diferentes >= 5) %>%
pull(id_cliente_enc)
data_filtrada_variedad <- data_final %>%
filter(id_cliente_enc %in% clientes_variedad)
View(data_filtrada_variedad)
#Otro Filtro
tamanio_ticket <- data_final %>%
group_by(id_cliente_enc, num_ticket) %>%
summarise(n_productos = n(), .groups = "drop") %>%
group_by(id_cliente_enc) %>%
summarise(media_cesta = mean(n_productos)) %>%
filter(media_cesta >= 2) %>%
pull(id_cliente_enc)
data_final <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
#Otro Filtro
tamanio_ticket <- data_final %>%
group_by(id_cliente_enc, num_ticket) %>%
summarise(n_productos = n(), .groups = "drop") %>%
group_by(id_cliente_enc) %>%
summarise(media_cesta = mean(n_productos)) %>%
filter(media_cesta >= 2) %>%
pull(id_cliente_enc)
data_filtrada_cesta <- data_final %>%
filter(id_cliente_enc %in% tamanio_ticket)
clientes_variedad <- data_final %>%
group_by(id_cliente_enc) %>%
summarise(productos_diferentes = n_distinct(cod_est)) %>%
filter(productos_diferentes >= 5) %>%
pull(id_cliente_enc)
data_filtrada_variedad <- data_final %>%
filter(id_cliente_enc %in% clientes_variedad)
# Calcular frecuencia de productos
data_final <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
productos_populares <- data_final %>%
group_by(cod_est) %>%
summarise(frecuencia = n()) %>%
filter(frecuencia >= 30) %>%
pull(cod_est)
# Filtrar dataset
data_filtrada_popularidad <- data_final %>%
filter(cod_est %in% productos_populares)
# Calcular frecuencia de productos, (productos poco populares)
data_final <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
#Clientes con pocas compras totales
clientes_fieles <- data_final %>%
group_by(id_cliente_enc) %>%
summarise(n_compras = n_distinct(num_ticket)) %>%
filter(n_compras >= 5) %>%
pull(id_cliente_enc)
data_filtrada_clientes_fieles <- data_final %>%
filter(id_cliente_enc %in% clientes_fieles)
#
data_final <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
tickets_grandes <- data_final %>%
group_by(num_ticket) %>%
summarise(n_items = n()) %>%
filter(n_items > 1) %>%
pull(num_ticket)
data_filtrada_cestas_grandes <- data_final %>%
filter(num_ticket %in% tickets_grandes)
library(plumber)
r <- plumb("Api.R")
r$run(port=8000)
# Clientes filtrados por IQR + los que deben mantenerse s칤 o s칤
objetivos <- readRDS("Datos//Originales//objetivos.RDS")
objetivos$objetivo2$obj[1]
library(plumber)
r <- plumb("Api.R")
r$run(port=8000)
objetivos$objetivo4$obj[1]
library(plumber)
r <- plumb("Api.R")
r$run(port=8000)
objetivos$objetivo2$obj
objetivos$objetivo4$obj
library(plumber)
r <- plumb("Api.R")
r$run(port=8000)
library(plumber)
r <- plumb("Api.R")
r$run(port=8000)
library(plumber)
library(plumber)
r <- plumb("Api.R")
r$run(port=8000)
Maestroestr <- readRDS("Datos\\Originales\\maestroestr.RDS")
View(Maestroestr)
r$run(port=8000)
plumb(file='Api.R')$run()
library(plumber)
r <- plumb("Api.R")
r$run(port=8000)
objetivos <- readRDS("Datos/Originales/objetivos.RDS")
# Extraer objetivos
objetivo1 <- objetivos$objetivo1$obj
objetivo1
objetivo2
objetivo2 <- objetivos$objetivo2$obj
objetivo3 <- objetivos$objetivo3$obj
objetivo4 <- objetivos$objetivo4$obj
objetivo2
plumber::plumb(file='ApiXabi.R')$run()
objetivo3
objetivo4
plumb(file='ApiXabi.R')$run()
