# Calcular % eliminados
porcentaje_clientes_eliminados <- 100 * (1 - n_filtrado_cli / n_total_cli)
cat("Se han eliminado aproximadamente", round(porcentaje_clientes_eliminados, 2), "% de clientes\n")
a
data_final <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
library(dplyr)
library(lubridate)
library(stringr)
library(tidyr)
library(tidyverse)
library(purrr)
library(plotly)
library(naniar)
library(VIM)
data_final <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
data_final <- data_final %>%
mutate(dia = ymd(dia))
View(data_final)
data_final <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
View(data_final)
View(data_final)
data_final <- data_final %>% group_by(dia) %>% summarise(conteo=n())
View(data_final)
data_final <- data_final %>%
mutate(dia = ymd(dia))
data_final <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
data_final <- data_final %>%
mutate(dia = ymd(dia))
min(data_final$dia)
max(data_final$dia)
data_final <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
clientes_variedad <- data_final %>%
group_by(id_cliente_enc) %>%
summarise(productos_diferentes = n_distinct(cod_est)) %>%
filter(productos_diferentes >= 5) %>%
pull(id_cliente_enc)
data_filtrada_variedad <- data_final %>%
filter(id_cliente_enc %in% clientes_variedad)
View(data_filtrada_variedad)
#Otro Filtro
tamanio_ticket <- data_final %>%
group_by(id_cliente_enc, num_ticket) %>%
summarise(n_productos = n(), .groups = "drop") %>%
group_by(id_cliente_enc) %>%
summarise(media_cesta = mean(n_productos)) %>%
filter(media_cesta >= 2) %>%
pull(id_cliente_enc)
data_final <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
#Otro Filtro
tamanio_ticket <- data_final %>%
group_by(id_cliente_enc, num_ticket) %>%
summarise(n_productos = n(), .groups = "drop") %>%
group_by(id_cliente_enc) %>%
summarise(media_cesta = mean(n_productos)) %>%
filter(media_cesta >= 2) %>%
pull(id_cliente_enc)
data_filtrada_cesta <- data_final %>%
filter(id_cliente_enc %in% tamanio_ticket)
clientes_variedad <- data_final %>%
group_by(id_cliente_enc) %>%
summarise(productos_diferentes = n_distinct(cod_est)) %>%
filter(productos_diferentes >= 5) %>%
pull(id_cliente_enc)
data_filtrada_variedad <- data_final %>%
filter(id_cliente_enc %in% clientes_variedad)
# Calcular frecuencia de productos
data_final <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
productos_populares <- data_final %>%
group_by(cod_est) %>%
summarise(frecuencia = n()) %>%
filter(frecuencia >= 30) %>%
pull(cod_est)
# Filtrar dataset
data_filtrada_popularidad <- data_final %>%
filter(cod_est %in% productos_populares)
# Calcular frecuencia de productos, (productos poco populares)
data_final <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
#Clientes con pocas compras totales
clientes_fieles <- data_final %>%
group_by(id_cliente_enc) %>%
summarise(n_compras = n_distinct(num_ticket)) %>%
filter(n_compras >= 5) %>%
pull(id_cliente_enc)
data_filtrada_clientes_fieles <- data_final %>%
filter(id_cliente_enc %in% clientes_fieles)
#
data_final <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
tickets_grandes <- data_final %>%
group_by(num_ticket) %>%
summarise(n_items = n()) %>%
filter(n_items > 1) %>%
pull(num_ticket)
data_filtrada_cestas_grandes <- data_final %>%
filter(num_ticket %in% tickets_grandes)
library(plumber)
r <- plumb("Api.R")
r$run(port=8000)
# Clientes filtrados por IQR + los que deben mantenerse sí o sí
objetivos <- readRDS("Datos//Originales//objetivos.RDS")
objetivos$objetivo2$obj[1]
library(plumber)
r <- plumb("Api.R")
r$run(port=8000)
objetivos$objetivo4$obj[1]
library(plumber)
r <- plumb("Api.R")
r$run(port=8000)
objetivos$objetivo2$obj
objetivos$objetivo4$obj
library(plumber)
r <- plumb("Api.R")
r$run(port=8000)
library(plumber)
r <- plumb("Api.R")
r$run(port=8000)
library(plumber)
library(plumber)
r <- plumb("Api.R")
r$run(port=8000)
Maestroestr <- readRDS("Datos\\Originales\\maestroestr.RDS")
View(Maestroestr)
r$run(port=8000)
plumb(file='Api.R')$run()
library(plumber)
r <- plumb("Api.R")
r$run(port=8000)
objetivos <- readRDS("Datos/Originales/objetivos.RDS")
# Extraer objetivos
objetivo1 <- objetivos$objetivo1$obj
objetivo1
objetivo2
objetivo2 <- objetivos$objetivo2$obj
objetivo3 <- objetivos$objetivo3$obj
objetivo4 <- objetivos$objetivo4$obj
objetivo2
plumber::plumb(file='ApiXabi.R')$run()
objetivo3
objetivo4
plumb(file='ApiXabi.R')$run()
library(dplyr)
library(lubridate)
library(stringr)
library(tidyr)
library(tidyverse)
library(purrr)
library(plotly)
library(naniar)
library(VIM)
# Cargamos los ficheros previamente limpios
#Maestroestr <- readRDS("Datos\\Originales\\maestroestr.RDS")
#
# df_entero <- readRDS("Datos\\Transformados\\df_clustering_entero.rds")
# tickets_enc <- readRDS("Datos\\Originales\\tickets_enc.RDS")
#
# sum(is.na(df_entero))
# miss_var_summary(df_entero)
#
# str(df_entero)
# colnames(df_entero)[1] <- "id_cliente_enc"
#PRUEBA
# --- PRIMER FILTRO: cod_est ---
data <- readRDS("Datos/Transformados/tickets_enc.rds")
# Agrupar por cod_est y contar la cantidad de apariciones
conteo_cod <- data %>%
group_by(cod_est) %>%
summarise(cantidad = n(), .groups = "drop")
q1_cod <- quantile(conteo_cod$cantidad, 0.25, na.rm = TRUE)
q3_cod <- quantile(conteo_cod$cantidad, 0.75, na.rm = TRUE)
# Filtrar los cod_est fuera del rango intercuartílico
cod_filtrados <- conteo_cod %>%
filter(cantidad > q3_cod | cantidad <= q1_cod) %>%
pull(cod_est)
data_filtrada <- data %>%
filter(cod_est %in% cod_filtrados)
objetivos <- readRDS("Datos/Originales/objetivos.RDS")
clientes_objetivo <- purrr::map(objetivos, "obj") %>% unlist() %>% unique()
# Recuperar registros de clientes objetivo que fueron eliminados por cod_est
clientes_rescatados <- data %>%
filter(id_cliente_enc %in% clientes_objetivo)
data_filtrada <- bind_rows(data_filtrada, clientes_rescatados) %>%
distinct()
saveRDS(data_filtrada, "Datos/Transformados/tickets_filtrados_cod_est.rds")
# --- SEGUNDO FILTRO: id_cliente_enc ---
data_cod <- readRDS("Datos/Transformados/tickets_filtrados_cod_est.rds")
# Agrupar por id_cliente_enc y contar
conteo_cli <- data_cod %>%
group_by(id_cliente_enc) %>%
summarise(cantidad = n(), .groups = "drop")
q1_cli <- quantile(conteo_cli$cantidad, 0.25, na.rm = TRUE)
q3_cli <- quantile(conteo_cli$cantidad, 0.75, na.rm = TRUE)
# Filtrar los id_cliente_enc fuera del rango intercuartílico
clientes_filtrados <- conteo_cli %>%
filter(cantidad > q3_cli | cantidad <= q1_cli) %>%
pull(id_cliente_enc)
# Clientes filtrados por IQR + los que deben mantenerse sí o sí
objetivos <- readRDS("Datos//Originales//objetivos.RDS")
# Unir todos los clientes objetivo en un único vector
clientes_objetivo <- purrr::map(objetivos, "obj") %>%
unlist() %>%
unique()
clientes_finales <- union(clientes_filtrados, clientes_objetivo)
data_final <- data_cod %>%
filter(id_cliente_enc %in% clientes_finales)
saveRDS(data_final, "Datos/Transformados/tickets_Reducidos.rds")
#VERIFICAR QUE SE HAN QUITADO 50% de clientes y productos
data_original <- readRDS("Datos/Transformados/tickets_enc.rds")
data_Reducida <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
# Total de cod_est únicos en original y en filtrado
n_total_cod <- n_distinct(data_original$cod_est)
n_filtrado_cod <- n_distinct(data_Reducida$cod_est)
# Calcular % eliminados
porcentaje_cod_est_eliminados <- 100 * (1 - n_filtrado_cod / n_total_cod)
cat("Se han eliminado aproximadamente", round(porcentaje_cod_est_eliminados, 2), "% de cod_est\n")
data_filtrada_cod <- readRDS("Datos/Transformados/tickets_filtrados_cod_est.rds")
data_final <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
# Total de clientes únicos antes y después
n_total_cli <- n_distinct(data_filtrada_cod$id_cliente_enc)
n_filtrado_cli <- n_distinct(data_final$id_cliente_enc)
# Calcular % eliminados
porcentaje_clientes_eliminados <- 100 * (1 - n_filtrado_cli / n_total_cli)
cat("Se han eliminado aproximadamente", round(porcentaje_clientes_eliminados, 2), "% de clientes\n")
lenght(unique(data_final$id_cliente_enc))
length(unique(data_final$id_cliente_enc))
length(unique(data_final$cod_est))
#Clientes con pocas compras totales
#Clientes que han hecho solo 1 o 2 compras no permiten detectar patrones reales de comportamiento.
clientes_fieles <- data_final %>%
group_by(id_cliente_enc) %>%
summarise(n_compras = n_distinct(num_ticket)) %>%
filter(n_compras >= 5) %>%
pull(id_cliente_enc)
data_filtrada_clientes_fieles <- data_final %>%
filter(id_cliente_enc %in% clientes_fieles)
length(unique(data_filtrada_clientes_fieles$id_cliente_enc))#22718
length(unique(data_filtrada_clientes_fieles$cod_est))#1683
library(plumber)
r <- plumb("Api.R")
r$run(port=8000)
objetivos <- readRDS("Datos/Originales/objetivos.RDS")
objetivo4 <- objetivos$objetivo4$obj
objetivo4
plumb(file='Api.R')$run()
View(objetivos)
Objetivo4 <- readRDS("Datos/Resultados/Objetivo4_resultado.rds")
View(Objetivo4)
plumber::plumb(file='Api.R')$run()
# Cargar datos de resultados finales
resultado1 <- readRDS("Datos/Resultados/Objetivo1_resultado.rds")
View(resultado1)
resultado2 <- readRDS("Datos/Resultados/Objetivo2_resultado.rds")
View(resultado2)
resultado3 <- readRDS("Datos/Resultados/Objetivo3_resultado.rds")
resultado4 <- readRDS("Datos/Resultados/Objetivo4_resultado.rds")
resultado3
resultado4
View(resultado4)
View(resultado3)
View(resultado1)
View(resultado2)
View(resultado1)
resultado1
plumb(file='Api.R')$run()
resultado2 <- readRDS("Datos/Resultados/Objetivo2_resultado.rds")
resultado2
plumb(file='Api.R')$run()
View(resultado4)
View(resultado3)
View(resultado1)
plumb(file='Api.R')$run()
plumb(file='Api.R')$run()
resultado4
resultado3
resultado2
resultado3
plumb(file='Api.R')$run()
library(dplyr)
library(lubridate)
library(stringr)
library(tidyr)
library(tidyverse)
library(purrr)
library(plotly)
library(naniar)
library(VIM)
data <- readRDS("Datos/Transformados/tickets_enc.rds")
# Agrupar por cod_est y contar la cantidad de apariciones
conteo_cod <- data %>%
group_by(cod_est) %>%
summarise(cantidad = n(), .groups = "drop")
q1_cod <- quantile(conteo_cod$cantidad, 0.25, na.rm = TRUE)
q3_cod <- quantile(conteo_cod$cantidad, 0.75, na.rm = TRUE)
# Filtrar los cod_est fuera del rango intercuartílico
cod_filtrados <- conteo_cod %>%
filter(cantidad > q3_cod | cantidad <= q1_cod) %>%
pull(cod_est)
data_filtrada <- data %>%
filter(cod_est %in% cod_filtrados)
objetivos <- readRDS("Datos/Originales/objetivos.RDS")
clientes_objetivo <- purrr::map(objetivos, "obj") %>% unlist() %>% unique()
# Recuperar registros de clientes objetivo que fueron eliminados por cod_est
clientes_rescatados <- data %>%
filter(id_cliente_enc %in% clientes_objetivo)
data_filtrada <- bind_rows(data_filtrada, clientes_rescatados) %>%
distinct()
saveRDS(data_filtrada, "Datos/Transformados/tickets_filtrados_cod_est.rds")
data_cod <- readRDS("Datos/Transformados/tickets_filtrados_cod_est.rds")
# Agrupar por id_cliente_enc y contar
conteo_cli <- data_cod %>%
group_by(id_cliente_enc) %>%
summarise(cantidad = n(), .groups = "drop")
q1_cli <- quantile(conteo_cli$cantidad, 0.25, na.rm = TRUE)
q3_cli <- quantile(conteo_cli$cantidad, 0.75, na.rm = TRUE)
# Filtrar los id_cliente_enc fuera del rango intercuartílico
clientes_filtrados <- conteo_cli %>%
filter(cantidad > q3_cli | cantidad <= q1_cli) %>%
pull(id_cliente_enc)
# Clientes filtrados por IQR + los que deben mantenerse sí o sí
objetivos <- readRDS("Datos//Originales//objetivos.RDS")
# Unir todos los clientes objetivo en un único vector
clientes_objetivo <- purrr::map(objetivos, "obj") %>%
unlist() %>%
unique()
clientes_finales <- union(clientes_filtrados, clientes_objetivo)
data_final <- data_cod %>%
filter(id_cliente_enc %in% clientes_finales)
saveRDS(data_final, "Datos/Transformados/tickets_Reducidos.rds")
#VERIFICAR QUE SE HAN QUITADO 50% de clientes y productos
data_original <- readRDS("Datos/Transformados/tickets_enc.rds")
data_Reducida <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
# Total de cod_est únicos en original y en filtrado
n_total_cod <- n_distinct(data_original$cod_est)
n_filtrado_cod <- n_distinct(data_Reducida$cod_est)
# Calcular % eliminados
porcentaje_cod_est_eliminados <- 100 * (1 - n_filtrado_cod / n_total_cod)
cat("Se han eliminado aproximadamente", round(porcentaje_cod_est_eliminados, 2), "% de cod_est\n")
data_filtrada_cod <- readRDS("Datos/Transformados/tickets_filtrados_cod_est.rds")
data_final <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
# Total de clientes únicos antes y después
n_total_cli <- n_distinct(data_filtrada_cod$id_cliente_enc)
n_filtrado_cli <- n_distinct(data_final$id_cliente_enc)
# Calcular % eliminados
porcentaje_clientes_eliminados <- 100 * (1 - n_filtrado_cli / n_total_cli)
cat("Se han eliminado aproximadamente", round(porcentaje_clientes_eliminados, 2), "% de clientes\n")
length(unique(data_final$id_cliente_enc))#22718
length(unique(data_final$cod_est))#1683
data_final <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
clientes_variedad <- data_final %>%
group_by(id_cliente_enc) %>%
summarise(productos_diferentes = n_distinct(cod_est)) %>%
filter(productos_diferentes >= 5) %>%
pull(id_cliente_enc)
data_filtrada_variedad <- data_final %>%
filter(id_cliente_enc %in% clientes_variedad)
data_final <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
clientes_variedad <- data_final %>%
group_by(id_cliente_enc) %>%
summarise(productos_diferentes = n_distinct(cod_est)) %>%
filter(productos_diferentes >= 5) %>%
pull(id_cliente_enc)
data_filtrada_variedad <- data_final %>%
filter(id_cliente_enc %in% clientes_variedad)
# Calcular frecuencia de productos, (productos poco populares)
data_final <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
productos_populares <- data_final %>%
group_by(cod_est) %>%
summarise(frecuencia = n()) %>%
filter(frecuencia >= 30) %>%
pull(cod_est)
# Filtrar dataset
data_filtrada_popularidad <- data_final %>%
filter(cod_est %in% productos_populares)
n_clientes_finales <- n_distinct(data_filtrada_popularidad$id_cliente_enc)
n_productos_finales <- n_distinct(data_filtrada_popularidad$cod_est)
cat("Número total de clientes tras filtros:", n_clientes_finales, "\n")
cat("Número total de productos tras filtros:", n_productos_finales, "\n")
data_original <- readRDS("Datos/Transformados/tickets_enc.rds")
n_clientes_orig <- n_distinct(data_original$id_cliente_enc)
n_productos_orig <- n_distinct(data_original$cod_est)
cat("Clientes originales:", n_clientes_orig, "→ Finales:", n_clientes_finales,
"→ Eliminados:", round(100 * (1 - n_clientes_finales / n_clientes_orig), 2), "%\n")
cat("Productos originales:", n_productos_orig, "→ Finales:", n_productos_finales,
"→ Eliminados:", round(100 * (1 - n_productos_finales / n_productos_orig), 2), "%\n")
cat("Se han eliminado aproximadamente", round(porcentaje_cod_est_eliminados, 2), "% de cod_est\n")
cat("Se han eliminado aproximadamente", round(porcentaje_clientes_eliminados, 2), "% de clientes\n")
library(dplyr)
library(lubridate)
library(stringr)
library(tidyr)
library(tidyverse)
library(purrr)
library(plotly)
library(naniar)
library(VIM)
# Cargamos los ficheros previamente limpios
#Maestroestr <- readRDS("Datos\\Originales\\maestroestr.RDS")
#
# df_entero <- readRDS("Datos\\Transformados\\df_clustering_entero.rds")
# tickets_enc <- readRDS("Datos\\Originales\\tickets_enc.RDS")
#
# sum(is.na(df_entero))
# miss_var_summary(df_entero)
#
# str(df_entero)
# colnames(df_entero)[1] <- "id_cliente_enc"
#PRUEBA
# --- PRIMER FILTRO: cod_est ---
data <- readRDS("Datos/Transformados/tickets_enc.rds")
# Agrupar por cod_est y contar la cantidad de apariciones
conteo_cod <- data %>%
group_by(cod_est) %>%
summarise(cantidad = n(), .groups = "drop")
q1_cod <- quantile(conteo_cod$cantidad, 0.25, na.rm = TRUE)
q3_cod <- quantile(conteo_cod$cantidad, 0.75, na.rm = TRUE)
# Filtrar los cod_est fuera del rango intercuartílico
cod_filtrados <- conteo_cod %>%
filter(cantidad > q3_cod | cantidad <= q1_cod) %>%
pull(cod_est)
data_filtrada <- data %>%
filter(cod_est %in% cod_filtrados)
objetivos <- readRDS("Datos/Originales/objetivos.RDS")
clientes_objetivo <- purrr::map(objetivos, "obj") %>% unlist() %>% unique()
# Recuperar registros de clientes objetivo que fueron eliminados por cod_est
clientes_rescatados <- data %>%
filter(id_cliente_enc %in% clientes_objetivo)
data_filtrada <- bind_rows(data_filtrada, clientes_rescatados) %>%
distinct()
saveRDS(data_filtrada, "Datos/Transformados/tickets_filtrados_cod_est.rds")
# --- SEGUNDO FILTRO: id_cliente_enc ---
data_cod <- readRDS("Datos/Transformados/tickets_filtrados_cod_est.rds")
# Agrupar por id_cliente_enc y contar
conteo_cli <- data_cod %>%
group_by(id_cliente_enc) %>%
summarise(cantidad = n(), .groups = "drop")
q1_cli <- quantile(conteo_cli$cantidad, 0.25, na.rm = TRUE)
q3_cli <- quantile(conteo_cli$cantidad, 0.75, na.rm = TRUE)
# Filtrar los id_cliente_enc fuera del rango intercuartílico
clientes_filtrados <- conteo_cli %>%
filter(cantidad > q3_cli | cantidad <= q1_cli) %>%
pull(id_cliente_enc)
# Clientes filtrados por IQR + los que deben mantenerse sí o sí
objetivos <- readRDS("Datos//Originales//objetivos.RDS")
# Unir todos los clientes objetivo en un único vector
clientes_objetivo <- purrr::map(objetivos, "obj") %>%
unlist() %>%
unique()
clientes_finales <- union(clientes_filtrados, clientes_objetivo)
data_final <- data_cod %>%
filter(id_cliente_enc %in% clientes_finales)
saveRDS(data_final, "Datos/Transformados/tickets_Reducidos.rds")
#VERIFICAR QUE SE HAN QUITADO 50% de clientes y productos
data_original <- readRDS("Datos/Transformados/tickets_enc.rds")
data_Reducida <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
# Total de cod_est únicos en original y en filtrado
n_total_cod <- n_distinct(data_original$cod_est)
n_filtrado_cod <- n_distinct(data_Reducida$cod_est)
# Calcular % eliminados
porcentaje_cod_est_eliminados <- 100 * (1 - n_filtrado_cod / n_total_cod)
cat("Se han eliminado aproximadamente", round(porcentaje_cod_est_eliminados, 2), "% de cod_est\n")
data_filtrada_cod <- readRDS("Datos/Transformados/tickets_filtrados_cod_est.rds")
data_final <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
# Total de clientes únicos antes y después
n_total_cli <- n_distinct(data_filtrada_cod$id_cliente_enc)
n_filtrado_cli <- n_distinct(data_final$id_cliente_enc)
# Calcular % eliminados
porcentaje_clientes_eliminados <- 100 * (1 - n_filtrado_cli / n_total_cli)
cat("Se han eliminado aproximadamente", round(porcentaje_clientes_eliminados, 2), "% de clientes\n")
length(unique(data_final$id_cliente_enc))#22718
length(unique(data_final$cod_est))#1683
data_final <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
n_original_prod <- n_distinct(data_final$cod_est)
umbral_encontrado <- NULL
for (umbral in 1:100) {
productos_validos <- data_final %>%
group_by(cod_est) %>%
summarise(frecuencia = n()) %>%
filter(frecuencia >= umbral) %>%
pull(cod_est)
productos_filtrados <- data_final %>%
filter(cod_est %in% productos_validos)
n_filtrados <- n_distinct(productos_filtrados$cod_est)
porcentaje_restante <- 100 * n_filtrados / n_original_prod
if (round(porcentaje_restante, 2) <= 50) {
umbral_encontrado <- umbral
cat("Umbral mínimo de frecuencia para mantener ~50% de productos:", umbral, "\n")
cat("Productos restantes:", n_filtrados, "/", n_original_prod, "→", round(porcentaje_restante, 2), "%\n")
break
}
}
length(unique(data_final$cod_est))#1683
length(unique(data_final$id_cliente_enc))#22718
data_final <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
clientes_variedad <- data_final %>%
group_by(id_cliente_enc) %>%
summarise(productos_diferentes = n_distinct(cod_est)) %>%
filter(productos_diferentes >= 5) %>%
pull(id_cliente_enc)
data_filtrada_variedad <- data_final %>%
filter(id_cliente_enc %in% clientes_variedad)
# Calcular frecuencia de productos, (productos poco populares)
data_final <- readRDS("Datos/Transformados/tickets_Reducidos.rds")
productos_populares <- data_final %>%
group_by(cod_est) %>%
summarise(frecuencia = n()) %>%
filter(frecuencia >= 30) %>%
pull(cod_est)
# Filtrar dataset
data_filtrada_popularidad <- data_final %>%
filter(cod_est %in% productos_populares)
length(unique(data_final$id_cliente_enc))#22718
length(unique(data_final$cod_est))#1683
cat("Se han eliminado aproximadamente", round(porcentaje_cod_est_eliminados, 2), "% de cod_est\n")
cat("Se han eliminado aproximadamente", round(porcentaje_clientes_eliminados, 2), "% de clientes\n")
