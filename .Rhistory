tableOutput()
})}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Centroides de los clusteres"),
selectInput (inputId='cluster',label="Selecciona un cluster",choices = unique(media_clusteres$cluster)),
DTOutput("tabla_centroides_clusteres"))
server <- function(input,output,session){
output$tabla_centroides_clusteres <- renderDT({
session %>% filter(cluster == input$cluster)
})
}
shinyApp(ui = ui, server = server)
server <- function(input,output,session){
output$tabla_centroides_clusteres <- renderDT({
media_clusteres %>% filter(cluster == input$cluster)
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
# Crear vector de opciones con "Todos" al inicio
updateSelectInput(session, "cluster",
choices = c("Todos", levels(media_clusteres$cluster)),
selected = "Todos")
output$tabla_centroides_clusteres <- renderDT({
if (input$cluster == "Todos") {
media_clusteres
} else {
media_clusteres %>% filter(cluster == input$cluster)
}
})
}
shinyApp(ui = ui, server = server)
library(recommenderlab)
library(dplyr)
library(tidyr)
library(rsparse)
library(ggplot2)
library(Matrix)
library(stringr)
# cargamos los datos
tickets <- readRDS("Datos\\Transformados\\tickets_Reducidos.rds")
clusteres <- readRDS("Datos\\Transformados\\df_con_clusteres.rds")
productos <- readRDS("Datos\\Originales\\maestroestr.RDS")
objetivos <- readRDS("Datos\\Originales\\objetivos.RDS")
############################### OBJETIVO 1 #####################################
# Creamos el modelo WRMF -------------------------------------------------------
matriz_general <- readRDS("Datos\\Resultados\\Matriz_sinNA.rds")
storage.mode(matriz_general) <- "numeric"
# para el objetivo 1 y 3 cambiamos filas por columnas
matriz_alreves <- t(matriz_general)
# -- MODELO:
modelo_wrmf_alreves <- WRMF$new(rank = 10L, lambda = 0.1, feedback = 'implicit')
modelo_wrmf_alreves$fit_transform(matriz_alreves, n_iter = 1000L, convergence_tol=0.000001)
matriz_obj1 <- matriz_alreves[rownames(matriz_alreves) %in% objetivos$objetivo1$obj, , drop=F]
matriz_obj1 <- as(matriz_obj1,"sparseMatrix")
preds_1 <- modelo_wrmf_alreves$predict(matriz_obj1, k = 10) # para que nos de 10 usuarios
preds_1
lista_1 <- attr(preds_1,'ids')
View(lista_1)
# guardamos el df en resultados
as.data.frame(lista_1)
# guardamos el df en resultados
objretivo1_resultado <- as.data.frame(lista_1)
View(objretivo1_resultado)
colnames(objretivo1_resultado) [1] <- "Producto"
colnames(objretivo1_resultado) <- "Cliente_id"
# guardamos el df en resultados
objretivo1_resultado <- as.data.frame(lista_1)
colnames(objretivo1_resultado) <- "Cliente_id"
# guardamos el df en resultados
objretivo1_resultado <- as.data.frame(lista_1)
saveRDS(objretivo1_resultado, "Datos\\Resultados\\Objetivo1_resultado.rds")
################################## OBJETIVO 2 ##################################
# modelo para el objetivo 2 y 4:
modelo_wrmf <- WRMF$new(rank = 10L, lambda = 0.1, feedback = 'implicit')
modelo_wrmf$fit_transform(matriz_general, n_iter = 1000L, convergence_tol=0.000001)
matriz_obj2 <- matriz_general[rownames(matriz_general) %in% objetivos$objetivo2$obj,]
matriz_obj2 <- as(matriz_obj2,"sparseMatrix")
preds_2 <- modelo_wrmf$predict(matriz_obj2, k = 1, not_recommend = matriz_obj2)
preds_2
lista_2 <- attr(preds_2,'ids')
View(lista_2)
objetivo2_resultado <- as.data.frame(lista_2)
View(objetivo2_resultado)
View(productos)
colnames(objetivo2_resultado) <- "Cod_est"
inner_join(objetivo2_resultado,productos,by="Cod_est")
colnames(objetivo2_resultado)
colnames(productos)
objetivo2_resultado <- as.data.frame(lista_2)
colnames(objetivo2_resultado) <- "cod_est"
inner_join(objetivo2_resultado,productos,by="cod_est")
objetivo2_resultado <- inner_join(objetivo2_resultado,productos,by="cod_est")
saveRDS(objetivo2_resultado,"Datos\\Resultados\\Objetivo2_resultado.rds")
################################# OBJETIVO 3 ###################################
# el modelo es el mismo que para el objetivo 1
matriz_obj3 <- matriz_general
matriz_obj3 <- as(matriz_obj3,"sparseMatrix")
# cogemos los items que no queremos que recomiente para el predict
matriz_no_recomendados <- matriz_general [,!colnames(matriz_general) %in% objetivos$objetivo3$obj]
items_no_recomendados <- colnames(matriz_no_recomendados)
preds_3 <- modelo_wrmf$predict(matriz_obj3, k = 1, items_exclude = items_no_recomendados)
preds_3
lista_3 <- attr(preds_3,'ids')
View(lista_3)
# guardamos en un data frame con el nombre del producto
objetivo3_resultado <- as.data.frame(lista_3)
colnames(objetivo3_resultado) <- "cod_est"
objetivo3_resultado <- inner_join(objetivo3_resultado,productos,by="cod_est")
View(objetivo3_resultado)
View(objetivo2_resultado)
# guardamos en un data frame con el nombre del producto
objetivo3_resultado <- as.data.frame(lista_3)
colnames(objetivo3_resultado) <- "cod_est"
objetivo3_resultado <- left_join(objetivo3_resultado,productos,by="cod_est")
View(objetivo3_resultado)
objetivo3_resultado
# guardamos en un data frame con el nombre del producto
objetivo3_resultado <- as.data.frame(lista_3)
objetivo3_resultado
rownames(objetivo3_resultado)
df_con_rownames <- rownames_to_column(objetivo3_resultado, var = "nombre_fila")
library(tibble)
df_con_rownames <- rownames_to_column(df, var = "nombre_fila")
df_con_rownames <- rownames_to_column(objetivo3_resultado, var = "nombre_fila")
View(df_con_rownames)
# guardamos en un data frame con el nombre del producto
objetivo3_resultado <- as.data.frame(lista_3)
rownames(objetivo3_resultado)
colnames(objetivo3_resultado) <- "cod_est"
objetivo3_resultado <- rownames_to_column(objetivo3_resultado, var = "Id_cliente")
objetivo3_resultado <- inner_join(objetivo3_resultado,productos,by="cod_est")
saveRDS(objetivo3_resultado,"Datos\\Resultados\\Objetivo3_resultado.rds")
# guardamos en un data frame
objetivo2_resultado <- as.data.frame(lista_2)
colnames(objetivo2_resultado) <- "cod_est"
objetivo2_resultado <- rownames_to_column(objetivo2_resultado, var = "Id_cliente")
objetivo2_resultado <- inner_join(objetivo2_resultado,productos,by="cod_est")
saveRDS(objetivo2_resultado,"Datos\\Resultados\\Objetivo2_resultado.rds")
################################# OBJETIVO 4 ###################################
obj4<-objetivos[[4]]$obj
tickets_filtrados <- tickets[tickets$id_cliente_enc %in% obj4, ]
ultimos_tickets <- tickets_filtrados %>%
group_by(id_cliente_enc) %>%
filter(dia == max(dia)) %>%
ungroup()
historial_tickets <- anti_join(tickets_filtrados, ultimos_tickets, by = "num_ticket")
tickets_matriz_agrupado <- historial_tickets %>%
group_by(id_cliente_enc, cod_est) %>%
summarise(N_compras = n(), .groups = "drop")
df_matriz <- pivot_wider(
tickets_matriz_agrupado,
names_from = "cod_est",
values_from = "N_compras",
values_fill = 0,
names_prefix = "id_"
)
matriz_sparse_o4 <- as(as.matrix(df_matriz[,-1]), "dgCMatrix")
rownames(matriz_sparse_o4) <- df_matriz$id_cliente_enc
modelo_wrmf_o4 <- WRMF$new(rank = 10L, lambda = 0.1, feedback = 'implicit')
modelo_wrmf_o4$fit_transform(matriz_sparse_o4, n_iter = 1000L, convergence_tol = 1e-6)
preds_o4 <- modelo_wrmf_o4$predict(matriz_sparse_o4, k = 1)
clientes <- rownames(matriz_sparse_o4)
productos_predichos <- attr(preds_o4, "ids")
recomendaciones_o4 <- data.frame(
id_cliente_enc = clientes,
producto_olvidado = productos_predichos
)
recomendaciones_o4 <- recomendaciones_o4 %>%
mutate(cod_est = str_remove(producto_olvidado, "id_")) %>%
left_join(productos %>% select(cod_est, descripcion), by = "cod_est") %>%
select(id_cliente_enc, cod_est, descripcion)
recomendaciones_o4
# guardamos el df
saveRDS(recomendaciones_o4,"Datos\\Resultados\\Objetivo4_resultado.rds")
matriz_general
saveRDS(objetivo2_resultado,"Datos\\Resultados\\Objetivo2_resultado.rds")
matriz_general
View(matriz_no_recomendados)
View(matriz_alreves)
objetivos$objetivo1$obj
objetivos$objetivo2$obj
############################### CLUSTERING #####################################
# cargamos los datos:
df_entero <- readRDS("Datos\\Transformados\\df_clustering_entero.rds")
# LOS CLIENTES QUE HAN COMPRADO UNA VEZ APARECEN COMO NA EN LA COLUMNA DE CADA CUANTO
# COMPRAS POR LO QUE LOS TRANFORMAMOS A 0 PARA PODER HACER EL METODO DEL CODO Y EL CLUSTERING
df_entero <- df_entero %>%
mutate(media_de_dias_pasadas_por_compras = if_else(is.nan(media_de_dias_pasadas_por_compras), 0, media_de_dias_pasadas_por_compras))
# nos quedamos solo con las columnas numericas para el clustering:
df_clustering <- df_entero[,-1]
# metodo del codo para elegir la K
tot_withinss <- map_dbl(1:10, function(k) {
set.seed(12); model <- kmeans(x = df_clustering, centers = k)
model$tot.withinss
})
library(dplyr)
library(stringr)
library(tidyr)
library(tidyverse)
library(purrr)
library(plotly)
library(ggplot2)
library(gridExtra)
library(cowplot)
############################### CLUSTERING #####################################
# cargamos los datos:
df_entero <- readRDS("Datos\\Transformados\\df_clustering_entero.rds")
# LOS CLIENTES QUE HAN COMPRADO UNA VEZ APARECEN COMO NA EN LA COLUMNA DE CADA CUANTO
# COMPRAS POR LO QUE LOS TRANFORMAMOS A 0 PARA PODER HACER EL METODO DEL CODO Y EL CLUSTERING
df_entero <- df_entero %>%
mutate(media_de_dias_pasadas_por_compras = if_else(is.nan(media_de_dias_pasadas_por_compras), 0, media_de_dias_pasadas_por_compras))
# nos quedamos solo con las columnas numericas para el clustering:
df_clustering <- df_entero[,-1]
# metodo del codo para elegir la K
tot_withinss <- map_dbl(1:10, function(k) {
set.seed(12); model <- kmeans(x = df_clustering, centers = k)
model$tot.withinss
})
# Crear dataframe con resultados
elbow_df <- data.frame(k = 1:10, tot_withinss = tot_withinss)
metodo_codo <- plot_ly(elbow_df, x = ~k, y = ~tot_withinss, type = "scatter",
mode = "lines+markers",
line = list(color = "#8c94a4"),  # Color de la lÃ­nea
marker = list(color = "#0d7b7c")) %>%
add_trace(x = 4, y = elbow_df$tot_withinss[elbow_df$k == 4],
type = "scatter",
mode = "markers",
marker = list(color = "red", size = 10)) %>%
layout(
xaxis = list(title = "NÃºmero de Clusters (k)", tickvals = 1:10),
yaxis = list(title = "Suma de Distancias Intra-cluster"),
showlegend = FALSE  # Esto es para ocultar la leyenda
)
metodo_codo
metodo_codo <- plot_ly(elbow_df, x = ~k, y = ~tot_withinss, type = "scatter",
mode = "lines+markers",
line = list(color = "#8c94a4"),  # Color de la lÃ­nea
marker = list(color = "#0d7b7c")) %>%
add_trace(x = 4, y = elbow_df$tot_withinss[elbow_df$k == 4],
type = "scatter",
mode = "markers",
marker = list(color = "red", size = 10)) %>%
layout(
title = "MÃ©todo del Codo para Determinar k",
xaxis = list(title = "NÃºmero de Clusters (k)", tickvals = 1:10),
yaxis = list(title = "Suma de Distancias Intra-cluster"),
showlegend = FALSE  # Esto es para ocultar la leyenda
)
metodo_codo
## K MEANS CON EL K=4
# HACEMOS EL K MEANS CON EL K 4
set.seed(7);
KMEANS <-kmeans(df_clustering,4)
#valores de los clusters
cluster_KM <- KMEANS$cluster
table(cluster_KM)
# aÃ±adirle al df
df_clustering$cluster_KM <- as.factor(KMEANS$cluster)
# Centroides
centroides_kmean <- as.data.frame(KMEANS$centers) %>%
mutate(cluster_KM = as.factor(as.character(1:length(unique(df_clustering$cluster_KM)))))
# Graficar centroides
plot_ly(data = centroides_kmean,
x = ~media_unidades_por_compra  ,
y = ~media_de_dias_pasadas_por_compras ,
z = ~total_veces_que_ha_comprado ,
type = "scatter3d",
color = ~cluster_KM)
# Graficar todos los puntos y el cluster al que pertenecen
plot_ly(data = df_clustering,
x = ~media_unidades_por_compra,
y = ~total_veces_que_ha_comprado,
type = "scatter",
color = ~cluster_KM)
# Graficar centroides
plot_ly(data = centroides_kmean,
x = ~media_unidades_por_compra  ,
y = ~media_de_dias_pasadas_por_compras ,
z = ~total_veces_que_ha_comprado ,
type = "scatter",
color = ~cluster_KM)
# Graficar todos los puntos y el cluster al que pertenecen
grafico_distribucion_centroides <- plot_ly(data = df_clustering,
x = ~media_unidades_por_compra,
y = ~total_veces_que_ha_comprado,
type = "scatter",
color = ~cluster_KM)
# Graficar todos los puntos y el cluster al que pertenecen
grafico_distribucion_centroides <- plot_ly(data = df_clustering,
x = ~media_unidades_por_compra,
y = ~total_veces_que_ha_comprado,
type = "scatter",
color = ~cluster_KM)
grafico_distribucion_centroides
# Graficar todos los puntos y el cluster al que pertenecen
grafico_distribucion_centroides <- plot_ly(data = df_clustering,
x = ~media_unidades_por_compra,
y = ~total_veces_que_ha_comprado,
type = "scatter",
color = ~cluster_KM,
colors = c(
"#E10A23",
"#FFD5D1",
"#005B92",
"#A2CBE8",
))
# Graficar todos los puntos y el cluster al que pertenecen
grafico_distribucion_centroides <- plot_ly(data = df_clustering,
x = ~media_unidades_por_compra,
y = ~total_veces_que_ha_comprado,
type = "scatter",
color = ~cluster_KM,
colors = c(
"#E10A23",
"#FFD5D1",
"#005B92",
"#A2CBE8"
))
grafico_distribucion_centroides
# Graficar todos los puntos y el cluster al que pertenecen
grafico_distribucion_centroides <- plot_ly(data = df_clustering,
x = ~media_unidades_por_compra,
y = ~total_veces_que_ha_comprado,
type = "scatter",
color = ~cluster_KM,
colors = c(
"#E10A23",
"#A2CBE8",
"#005B92",
"#F0928E"
))
grafico_distribucion_centroides
# Graficar centroides
plot_ly(data = centroides_kmean,
x = ~media_unidades_por_compra  ,
y = ~media_de_dias_pasadas_por_compras ,
z = ~total_veces_que_ha_comprado ,
type = "scatter",
color = ~cluster_KM,
colors = c(
"#E10A23",
"#A2CBE8",
"#005B92",
"#F0928E"
))
library(recommenderlab)
library(dplyr)
library(tidyr)
library(rsparse)
library(ggplot2)
library(Matrix)
library(stringr)
library(tibble)
# cargamos los datos
tickets <- readRDS("Datos\\Transformados\\tickets_Reducidos.rds")
clusteres <- readRDS("Datos\\Transformados\\df_con_clusteres.rds")
productos <- readRDS("Datos\\Originales\\maestroestr.RDS")
objetivos <- readRDS("Datos\\Originales\\objetivos.RDS")
##################################### OBJETIVO 1 ###############################
objetivo1 <- as.data.frame(objetivos[[1]])
objetivo2 <- as.data.frame(objetivos[[2]])
############################### OBJETIVO 1 #####################################
# Creamos el modelo WRMF -------------------------------------------------------
matriz_general <- readRDS("Datos\\Resultados\\Matriz_sinNA.rds")
storage.mode(matriz_general) <- "numeric"
# para el objetivo 1 cambiamos filas por columnas
matriz_alreves <- t(matriz_general)
# -- MODELO:
modelo_wrmf_alreves <- WRMF$new(rank = 10L, lambda = 0.1, feedback = 'implicit')
modelo_wrmf_alreves$fit_transform(matriz_alreves, n_iter = 1000L, convergence_tol=0.000001)
################################## OBJETIVO 2 ##################################
# modelo para el objetivo 2 y 4:
modelo_wrmf <- WRMF$new(rank = 10L, lambda = 0.1, feedback = 'implicit')
modelo_wrmf$fit_transform(matriz_general, n_iter = 1000L, convergence_tol=0.000001)
################################# OBJETIVO 4 ###################################
obj4<-objetivos[[4]]$obj
tickets_filtrados <- tickets[tickets$id_cliente_enc %in% obj4, ]
ultimos_tickets <- tickets_filtrados %>%
group_by(id_cliente_enc) %>%
filter(dia == max(dia)) %>%
ungroup()
historial_tickets <- anti_join(tickets_filtrados, ultimos_tickets, by = "num_ticket")
tickets_matriz_agrupado <- historial_tickets %>%
group_by(id_cliente_enc, cod_est) %>%
summarise(N_compras = n(), .groups = "drop")
df_matriz <- pivot_wider(
tickets_matriz_agrupado,
names_from = "cod_est",
values_from = "N_compras",
values_fill = 0,
names_prefix = "id_"
)
matriz_sparse_o4 <- as(as.matrix(df_matriz[,-1]), "dgCMatrix")
rownames(matriz_sparse_o4) <- df_matriz$id_cliente_enc
modelo_wrmf_o4 <- WRMF$new(rank = 10L, lambda = 0.1, feedback = 'implicit')
modelo_wrmf_o4$fit_transform(matriz_sparse_o4, n_iter = 1000L, convergence_tol = 1e-6)
preds_o4 <- modelo_wrmf_o4$predict(matriz_sparse_o4, k = 1)
clientes <- rownames(matriz_sparse_o4)
productos_predichos <- attr(preds_o4, "ids")
recomendaciones_o4 <- data.frame(
id_cliente_enc = clientes,
producto_olvidado = productos_predichos
)
recomendaciones_o4 <- recomendaciones_o4 %>%
mutate(cod_est = str_remove(producto_olvidado, "id_")) %>%
left_join(productos %>% select(cod_est, descripcion), by = "cod_est") %>%
select(id_cliente_enc, cod_est, descripcion)
View(recomendaciones_o4)
# guardamos el df
saveRDS(recomendaciones_o4,"Datos\\Resultados\\Objetivo4_resultado.rds")
id_objetivo4
objetivos$objetivo4
obj4
##################### segunda prueba objetivo 4
# Creo una lista vacia y en el bucle itero cada usuario del objetivo buscando el
# la Ãºltima compra realizada y guardando en la lista un df con la cantidad de
# cada producto comprado ese dia
ultimas_compras <- list()
for (c in obj4) {
tickets_matriz <- tickets %>%
filter(id_cliente_enc == c) %>%
filter(dia == max(dia))
tickets_matriz_agrupado <- tickets_matriz %>%
group_by(cod_est) %>%
summarise(dia, N_compras = n()) %>%
select(cod_est, N_compras) %>%
mutate(cod_est = str_c("id_", cod_est))
ultimas_compras[[c]] <- tickets_matriz_agrupado
}
# Creo una matriz vacia con las mismas columnas que se ha entrenado el modelo
# y le pongo los nombres de las columnas y filas que les corresponden
mo4 <- matrix(0, ncol = ncol(matriz), nrow = length(id_objetivo4))
# Creo una matriz vacia con las mismas columnas que se ha entrenado el modelo
# y le pongo los nombres de las columnas y filas que les corresponden
mo4 <- matrix(0, ncol = ncol(matriz_general), nrow = length(obj4))
colnames(mo4) <- colnames(matriz_general)
rownames(mo4) <- obj4
# Con un for hago que para cada cliente y para cada producto comprado, ponga en
# la matriz en la fila y columna correspondiente la cantidad comprada
for (cliente in obj4) {
compra <- ultimas_compras[[cliente]]
for (prod in compra$cod_est) {
producto <- filter(compra, cod_est == prod)
mo4[cliente, prod] <- producto$N_compras
}
}
# Con un for hago que para cada cliente y para cada producto comprado, ponga en
# la matriz en la fila y columna correspondiente la cantidad comprada
for (cliente in obj4) {
compra <- ultimas_compras[[cliente]]
for (prod in compra$cod_est) {
producto <- filter(compra, cod_est == prod)
mo4[cliente, prod] <- producto$N_compras
}
}
ultimas_compras
# Con un for hago que para cada cliente y para cada producto comprado, ponga en
# la matriz en la fila y columna correspondiente la cantidad comprada
for (cliente in obj4) {
compra <- ultimas_compras[[cliente]]
for (prod in compra$cod_est) {
producto <- filter(compra, cod_est == prod)
mo4[cliente, prod] <- producto$N_compras
}
}
View(ultimas_compras)
##################### segunda prueba objetivo 4
# Creo una lista vacia y en el bucle itero cada usuario del objetivo buscando
# la Ãºltima compra realizada y guardando en la lista un df con la cantidad de
# cada producto comprado ese dia
ultimas_compras <- list()
for (c in obj4) {
tickets_matriz <- tickets %>%
filter(id_cliente_enc == c) %>%
filter(dia == max(dia))
tickets_matriz_agrupado <- tickets_matriz %>%
group_by(cod_est) %>%
summarise(dia, N_compras = n()) %>%
select(cod_est, N_compras)
ultimas_compras[[c]] <- tickets_matriz_agrupado
}
obj4
colnames(matriz_general)
# Creo una matriz vacia con las mismas columnas que se ha entrenado el modelo
# y le pongo los nombres de las columnas y filas que les corresponden
mo4 <- matrix(0, ncol = ncol(matriz_general), nrow = length(obj4))
colnames(mo4) <- colnames(matriz_general)
rownames(mo4) <- obj4
# Con un for hago que para cada cliente y para cada producto comprado, ponga en
# la matriz en la fila y columna correspondiente la cantidad comprada
for (cliente in obj4) {
compra <- ultimas_compras[[cliente]]
for (prod in compra$cod_est) {
producto <- filter(compra, cod_est == prod)
mo4[cliente, prod] <- producto$N_compras
}
}
mo4 <- as(mo4, "sparseMatrix")
preds_o4 <- modelo_wrmf_prods$predict(mo4, k = 1, not_recommend = mo4)
preds_o4 <- modelo_wrmf$predict(mo4, k = 1, not_recommend = mo4)
preds_o4
attr_preds_o4 <- attr(preds_o4,'ids')
preds_o4_df <- data.frame(id_cliente_enc = rownames(attr_preds_o4),
cod_est = attr_preds_o4, row.names = c())
preds_o4_df
preds_o4_nombres <- inner_join(preds_o4_df, maestro, by = "cod_est")
preds_o4_nombres <- inner_join(preds_o4_df, productos, by = "cod_est")
preds_o4_nombres
View(preds_o4_nombres)
saveRDS(preds_o4_nombres, "Datos/Resultados/Objetivo4_resultado.rds")
