lineas <- readLines("C:/Users/Ganix/Downloads/reglas.txt")
# Extraer solo las reglas (filtrando líneas que contengan "==>")
reglas <- grep("==>", lineas, value = TRUE)
# Procesarlas para convertirlas en data.frame
library(stringr)
df <- data.frame(
regla = reglas,
antecedente = str_extract(reglas, "^[^=]+"),
consecuente = str_extract(reglas, "(?<===> ).*?(?=\\s\\d)"),
soporte = as.numeric(str_extract(reglas, "\\s(\\d+)$")),
confianza = as.numeric(str_extract(reglas, "(?<=<conf:\\()\\d\\.\\d+")),
lift = as.numeric(str_extract(reglas, "(?<=lift:\\()\\d\\.\\d+")),
stringsAsFactors = FALSE
)
View(df)
# Extraer solo las reglas (filtrando líneas que contengan "==>")
reglas <- grep("==>", lineas, value = TRUE)
# Paso 3: Extraer y limpiar los componentes de cada regla
datos <- data.frame(
regla = reglas,
stringsAsFactors = FALSE
) %>%
mutate(
# Antecedente completo (puede tener varios ítems)
antecedente = str_trim(str_extract(regla, "^(.*?)==>")),
antecedente = str_remove(antecedente, "==>$"),
# Consecuente
consecuente = str_trim(str_extract(regla, "(?<===> )(.*?)(?= \\d)")),
# Métricas
confianza = as.numeric(str_extract(regla, "(?<=<conf:\\()\\d\\.\\d+")),
lift      = as.numeric(str_extract(regla, "(?<=lift:\\()\\d\\.\\d+")),
soporte   = as.numeric(str_extract(regla, "\\[(\\d+)\\]")),
# Lista de antecedentes separados (si quieres trabajar con ellos)
antecedentes_lista = str_split(str_trim(str_extract(regla, "^(.*?)==>")), " ")
)
library(dplyr)
library(stringr)
lineas <- readLines("C:/Users/Ganix/Downloads/reglas.txt")
# Extraer solo las reglas (filtrando líneas que contengan "==>")
reglas <- grep("==>", lineas, value = TRUE)
# Paso 3: Extraer y limpiar los componentes de cada regla
datos <- data.frame(
regla = reglas,
stringsAsFactors = FALSE
) %>%
mutate(
# Antecedente completo (puede tener varios ítems)
antecedente = str_trim(str_extract(regla, "^(.*?)==>")),
antecedente = str_remove(antecedente, "==>$"),
# Consecuente
consecuente = str_trim(str_extract(regla, "(?<===> )(.*?)(?= \\d)")),
# Métricas
confianza = as.numeric(str_extract(regla, "(?<=<conf:\\()\\d\\.\\d+")),
lift      = as.numeric(str_extract(regla, "(?<=lift:\\()\\d\\.\\d+")),
soporte   = as.numeric(str_extract(regla, "\\[(\\d+)\\]")),
# Lista de antecedentes separados (si quieres trabajar con ellos)
antecedentes_lista = str_split(str_trim(str_extract(regla, "^(.*?)==>")), " ")
)
# Paso 4 (opcional): Separar los antecedentes en columnas (máximo 4)
ante_cols <- str_split_fixed(datos$antecedente, " ", 4)
colnames(ante_cols) <- paste0("antecedente_", 1:4)
# Paso 5: Unir todo
datos_final <- cbind(datos, ante_cols)
View(datos_final)
# Paso 3: Extraer y limpiar los componentes de cada regla
datos <- data.frame(
regla = reglas,
stringsAsFactors = FALSE
) %>%
mutate(
antecedente = str_trim(str_extract(regla, "^(.*?)==>")),
antecedente = str_remove(antecedente, "==>$"),
consecuente = str_trim(str_extract(regla, "(?<===> )(.*?)(?= \\d)")),
confianza   = as.numeric(str_extract(regla, "(?<=<conf:\\()\\d\\.\\d+")),
lift        = as.numeric(str_extract(regla, "(?<=lift:\\()\\d\\.\\d+")),
soporte     = as.numeric(str_extract(regla, "\\[(\\d+)\\]")),
antecedentes_lista = str_split(str_trim(str_extract(regla, "^(.*?)==>")), " ")
)
# Separar antecedentes en hasta 6 columnas
ante_cols <- str_split_fixed(datos$antecedente, " ", 6)
colnames(ante_cols) <- paste0("antecedente_", 1:6)
# Unir columnas con el resto del data.frame
datos_final <- cbind(datos, ante_cols)
# Ver las primeras filas
head(datos_final)
# Paso 3: Extraer y limpiar los componentes de cada regla
datos <- data.frame(
regla = reglas,
stringsAsFactors = FALSE
) %>%
mutate(
# Antecedente completo (texto antes de '==>')
antecedente = str_trim(str_extract(regla, "^(.*?)==>")),
antecedente = str_remove(antecedente, "==>$"),
# Consecuente
consecuente = str_trim(str_extract(regla, "(?<===> )(.*?)(?= \\d)")),
# Métricas
confianza   = as.numeric(str_extract(regla, "(?<=<conf:\\()\\d\\.\\d+")),
lift        = as.numeric(str_extract(regla, "(?<=lift:\\()\\d\\.\\d+")),
soporte     = as.numeric(str_extract(regla, "\\[(\\d+)\\]")),
# Lista de antecedentes reales (ítems que acaban en =t o =f)
antecedentes_lista = str_extract_all(antecedente, ".*?=t|.*?=f")
)
# Expandir los antecedentes a columnas (máx 6)
max_items <- max(sapply(datos$antecedentes_lista, length))
ante_cols <- do.call(rbind, lapply(datos$antecedentes_lista, function(x) {
length(x) <- max_items
x
}))
colnames(ante_cols) <- paste0("antecedente_", 1:max_items)
# Unir todo
datos_final <- cbind(datos, ante_cols)
# Ver resultado
head(datos_final)
datos_final$regla
library(dplyr)
library(stringr)
lineas <- readLines("C:/Users/Ganix/Downloads/reglas.txt")
# extraer solo las reglas (filtrando líneas que contengan "==>")
reglas <- grep("==>", lineas, value = TRUE)
# Paso 3: extraer y limpiar los componentes de cada regla
datos <- data.frame(
regla = reglas,
stringsAsFactors = FALSE
) %>%
mutate(
# antecedente
antecedente = str_trim(str_extract(regla, "^(.*?)==>")),
antecedente = str_remove(antecedente, "==>$"),
# Consecuente
consecuente = str_trim(str_extract(regla, "(?<===> )(.*?)(?= \\d)")),
# Lista de antecedentes reales (ítems que acaban en =t o =f)
antecedentes_lista = str_extract_all(antecedente, ".*?=t|.*?=f")
)
# Expandir los antecedentes a columnas (máx 6)
max_items <- max(sapply(datos$antecedentes_lista, length))
ante_cols <- do.call(rbind, lapply(datos$antecedentes_lista, function(x) {
length(x) <- max_items
x
}))
colnames(ante_cols) <- paste0("antecedente_", 1:max_items)
# Unir todo
reglas <- cbind(datos, ante_cols)
reglas
View(reglas)
View(reglas)
reglas<- reglas[, -c(1,2,4)]
reglas<-reglas[, c(2,3,4,5,1)]
View(reglas)
reglas
ifelse(reglas== "=t", "", reglas)
str_replace(reglas, "=t", "")
reglas
str_remove(reglas, "=t")
str_remove(reglas$antecedente_1, "=t")
reglas$antecedente_1<-str_remove(reglas$antecedente_1, "=t")
reglas$antecedente_1
reglas$antecedente_1 <- sub("^\\d+\\.\\s+", "", reglas$antecedente_1)
reglas$antecedente_1
reglas
View(reglas)
library(dplyr)
library(stringr)
lineas <- readLines("C:/Users/Ganix/Downloads/reglas.txt")
# extraer solo las reglas (filtrando líneas que contengan "==>")
reglas <- grep("==>", lineas, value = TRUE)
# Paso 3: extraer y limpiar los componentes de cada regla
datos <- data.frame(
regla = reglas,
stringsAsFactors = FALSE
) %>%
mutate(
# antecedente
antecedente = str_trim(str_extract(regla, "^(.*?)==>")),
antecedente = str_remove(antecedente, "==>$"),
# Consecuente
consecuente = str_trim(str_extract(regla, "(?<===> )(.*?)(?= \\d)")),
# Lista de antecedentes reales (ítems que acaban en =t o =f)
antecedentes_lista = str_extract_all(antecedente, ".*?=t|.*?=f")
)
# Expandir los antecedentes a columnas (el maximo de antecedentes es 4)
max_items <- max(sapply(datos$antecedentes_lista, length))
ante_cols <- do.call(rbind, lapply(datos$antecedentes_lista, function(x) {
length(x) <- max_items
x
}))
colnames(ante_cols) <- paste0("antecedente_", 1:max_items)
reglas <- cbind(datos, ante_cols) #para juntar todo
reglas<- reglas[, -c(1,2,4)]
reglas<-reglas[, c(2,3,4,5,1)]
reglas$antecedente_1<-str_remove(reglas$antecedente_1, "=t")
reglas$antecedente_2<-str_remove(reglas$antecedente_2, "=t")
reglas$antecedente_3<-str_remove(reglas$antecedente_3, "=t")
reglas$antecedente_4<-str_remove(reglas$antecedente_4, "=t")
reglas$consecuente<-str_remove(reglas$aconsecuente, "=t")
reglas$consecuente<-str_remove(reglas$consecuente, "=t")
reglas$antecedente_1 <- sub("^\\d+\\.\\s+", "", reglas$antecedente_1)
reglas
View(reglas)
lineas <- readLines("Datos/Resultados/reglas_de_asociacion.txt")
library(dplyr)
library(stringr)
lineas <- readLines("Datos/Resultados/reglas_de_asociacion.txt")
# todas estas son reglas de asociacion con una confianza mayor al 90%
# extraer solo las reglas (filtrando líneas que contengan "==>")
reglas <- grep("==>", lineas, value = TRUE)
# Paso 3: extraer y limpiar los componentes de cada regla
datos <- data.frame(
regla = reglas,
stringsAsFactors = FALSE
) %>%
mutate(
# antecedente
antecedente = str_trim(str_extract(regla, "^(.*?)==>")),
antecedente = str_remove(antecedente, "==>$"),
# Consecuente
consecuente = str_trim(str_extract(regla, "(?<===> )(.*?)(?= \\d)")),
# Lista de antecedentes reales (ítems que acaban en =t o =f)
antecedentes_lista = str_extract_all(antecedente, ".*?=t|.*?=f")
)
# Expandir los antecedentes a columnas (el maximo de antecedentes es 4)
max_items <- max(sapply(datos$antecedentes_lista, length))
ante_cols <- do.call(rbind, lapply(datos$antecedentes_lista, function(x) {
length(x) <- max_items
x
}))
colnames(ante_cols) <- paste0("antecedente_", 1:max_items)
reglas <- cbind(datos, ante_cols) #para juntar todo
reglas<- reglas[, -c(1,2,4)]
reglas<-reglas[, c(2,3,4,5,1)]
reglas$antecedente_1<-str_remove(reglas$antecedente_1, "=t")
reglas$antecedente_2<-str_remove(reglas$antecedente_2, "=t")
reglas$antecedente_3<-str_remove(reglas$antecedente_3, "=t")
reglas$antecedente_4<-str_remove(reglas$antecedente_4, "=t")
reglas$consecuente<-str_remove(reglas$consecuente, "=t")
reglas$antecedente_1 <- sub("^\\d+\\.\\s+", "", reglas$antecedente_1)
reglas
