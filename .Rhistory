ventas_por_semana <- datos %>%
count(semana)
ggplot(ventas_por_semana, aes(x = semana, y = n)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(
title = "Productos vendidos por semana",
x = "Semana (fecha de inicio)",
y = "Cantidad de productos"
) +
theme_minimal()
# Top 10 clientes que más compraron
compras_por_cliente <- datos %>%
group_by(id_cliente) %>%
summarise(productos_comprados = n()) %>%
arrange(desc(productos_comprados))
top_10 <- compras_por_cliente %>% slice_head(n = 10)
ggplot(top_10, aes(x = reorder(id_cliente, productos_comprados), y = productos_comprados)) +
geom_bar(stat = "identity", fill = "darkgreen") +
coord_flip() +
labs(title = "Top 10 clientes más compradores",
x = "ID Cliente", y = "Productos comprados") +
theme_minimal()
# Unir clusters con tickets limpios
df <- left_join(tickets_limpios, clusteres, by = "id_cliente_enc")
df <- df[ , -c(5,6,7)]  # Eliminar columnas innecesarias
# Clasificación general de productos
df <- df %>%
mutate(
cod_est = as.character(cod_est),
producto_general = case_when(
grepl("^010\\d+", cod_est) ~ "Fruta y verdura",
grepl("^0125\\d+", cod_est) ~ "Legumbres y frutos secos a granel",
grepl("^02\\d+", cod_est) ~ "Carniceria",
grepl("^03\\d+", cod_est) ~ "Congelados",
grepl("^04\\d+", cod_est) ~ "Charcuteria",
grepl("^050\\d+", cod_est) ~ "Lacteos",
grepl("^051\\d+", cod_est) ~ "Lacteos y postres",
grepl("^052\\d+", cod_est) ~ "Huevos y leche fresco",
grepl("^06\\d+", cod_est) ~ "Panaderia",
grepl("^07\\d+", cod_est) ~ "Carniceria",
grepl("^081\\d+", cod_est) ~ "Latas o mermeladas",
grepl("^082\\d+", cod_est) ~ "Latas",
grepl("^083140\\d+", cod_est) ~ "Conservas",
grepl("^083145\\d+", cod_est) ~ "Alimentacion animales",
grepl("^0833\\d+", cod_est) ~ "Snacks",
grepl("^084\\d+", cod_est) ~ "Snacks",
grepl("^080\\d+", cod_est) ~ "Snacks",
grepl("^090\\d+", cod_est) ~ "Salsas y arroces/pastas",
grepl("^091\\d+", cod_est) ~ "Salsas y arroces/pastas",
grepl("^092\\d+", cod_est) ~ "Frigorifico (sin productos de origen animal)",
grepl("^093\\d+", cod_est) ~ "Especies",
grepl("^10\\d+", cod_est) ~ "Panaderia",
grepl("^11\\d+", cod_est) ~ "Alcoholes",
grepl("^1213\\d+", cod_est) ~ "Higiene",
grepl("^13\\d+", cod_est) ~ "Higiene",
grepl("^14\\d+", cod_est) ~ "Platos preparados",
TRUE ~ "Otros"
)
)
# Asegurar tipo de fecha y ordenar días
df$fecha <- ymd(df$dia)
df <- df %>%
mutate(
dia_semana = wday(dia, label = TRUE, abbr = FALSE, week_start = 1),
dia_semana = factor(dia_semana, levels = c("lunes", "martes", "miércoles", "jueves", "viernes", "sábado", "domingo"))
)
# Agrupar por día y categoría
ventas_dia_producto <- df %>%
group_by(dia_semana, producto_general) %>%
summarise(cantidad_vendida = n(), .groups = "drop")
# Gráfico apilado por categoría y día
ggplot(ventas_dia_producto, aes(x = dia_semana, y = cantidad_vendida, fill = producto_general)) +
geom_col() +
coord_flip() +
labs(
title = "Cantidad de productos vendidos por día de la semana y categoría",
x = "Día de la semana",
y = "Cantidad vendida",
fill = "Producto general"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Gráfico apilado por categoría y día
ggplot(ventas_dia_producto, aes(x = dia_semana, y = cantidad_vendida, fill = producto_general)) +
geom_col() +
coord_flip() +
labs(
title = "Cantidad de productos vendidos por día de la semana y categoría",
x = "Día de la semana",
y = "Cantidad vendida",
fill = "Producto general"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 1))
# Gráfico apilado por categoría y día
ggplot(ventas_dia_producto, aes(x = dia_semana, y = cantidad_vendida, fill = producto_general)) +
geom_col() +
coord_flip() +
labs(
title = "Cantidad de productos vendidos por día de la semana y categoría",
x = "Día de la semana",
y = "Cantidad vendida",
fill = "Producto general"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(RColorBrewer)
# Agrupamos, ordenamos y seleccionamos el top 5 productos por día
top5_dia <- ventas_dia_producto %>%
group_by(dia_semana) %>%
slice_max(order_by = cantidad_vendida, n = 5) %>%
ungroup()
# Selección de una paleta clara de colores (hasta 8 categorías diferenciables)
colores <- brewer.pal(n = 8, name = "Pastel1")
# Graficar con barras apiladas solo para los TOP 5 por día
ggplot(top5_dia, aes(x = dia_semana, y = cantidad_vendida, fill = producto_general)) +
geom_col() +
coord_flip() +
labs(
title = "Top 5 productos más vendidos por día de la semana",
x = "Día de la semana",
y = "Cantidad vendida",
fill = "Producto general"
) +
scale_fill_manual(values = colores) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(top_10, aes(x = reorder(id_cliente, productos_comprados), y = productos_comprados)) +
geom_bar(stat = "identity", fill = "darkgreen") +
coord_flip() +
labs(title = "Top 10 clientes más compradores",
x = "ID Cliente", y = "Productos comprados") +
theme_minimal()
ggplot(ventas_por_semana, aes(x = semana, y = n)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(
title = "Productos vendidos por semana",
x = "Semana (fecha de inicio)",
y = "Cantidad de productos"
) +
theme_minimal()
ggplot(ventas_por_dia, aes(x = dia_semana, y = n)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(
title = "Cantidad total de productos vendidos por día de la semana",
x = "Día de la semana",
y = "Productos vendidos"
) +
theme_minimal()
# Graficar con barras apiladas solo para los TOP 5 por día
ggplot(top5_dia, aes(x = dia_semana, y = cantidad_vendida, fill = producto_general)) +
geom_col() +
coord_flip() +
labs(
title = "Top 5 productos más vendidos por día de la semana",
x = "Día de la semana",
y = "Cantidad vendida",
fill = "Producto general"
) +
scale_fill_manual(values = colores) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(RColorBrewer)
# Agrupar y seleccionar top 5 por día
top5_dia <- ventas_dia_producto %>%
group_by(dia_semana) %>%
slice_max(order_by = cantidad_vendida, n = 5) %>%
ungroup()
# Paleta de colores brillantes
colores_vivos <- brewer.pal(n = 8, name = "Set2")
# Gráfico final
ggplot(top5_dia, aes(x = dia_semana, y = cantidad_vendida, fill = producto_general)) +
geom_col() +
coord_flip() +
labs(
title = "Top 5 productos más vendidos por día de la semana",
x = "Día de la semana",
y = "Cantidad vendida",
fill = "Producto general"
) +
scale_fill_manual(values = colores_vivos) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Top 10 productos más vendidos
datos_enriquecidos %>%
count(descripcion, sort = TRUE) %>%
slice_max(n, n = 10) %>%
ggplot(aes(x = reorder(descripcion, n), y = n)) +
geom_col(fill = "orange") +
coord_flip() +
labs(title = "Top 10 productos más vendidos", x = "Producto")
# Tickets por día
datos %>%
group_by(fecha) %>%
summarise(tickets = n_distinct(ticket)) %>%
ggplot(aes(x = fecha, y = tickets)) +
geom_line(color = "steelblue") +
labs(title = "Número de tickets por día", x = "Fecha", y = "Tickets")
# Productos vendidos por día de la semana
datos <- datos %>%
mutate(
fecha = ymd(fecha),
dia_semana = wday(fecha, label = TRUE, abbr = FALSE, week_start = 1)
)
ventas_por_dia <- datos %>%
count(dia_semana)
ggplot(ventas_por_dia, aes(x = dia_semana, y = n)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(
title = "Cantidad total de productos vendidos por día de la semana",
x = "Día de la semana",
y = "Productos vendidos"
) +
theme_minimal()
# Productos vendidos por semana
datos <- datos %>%
mutate(semana = floor_date(fecha, unit = "week", week_start = 1))
ventas_por_semana <- datos %>%
count(semana)
ggplot(ventas_por_semana, aes(x = semana, y = n)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(
title = "Productos vendidos por semana",
x = "Semana (fecha de inicio)",
y = "Cantidad de productos"
) +
theme_minimal()
# Top 10 clientes que más compraron
compras_por_cliente <- datos %>%
group_by(id_cliente) %>%
summarise(productos_comprados = n()) %>%
arrange(desc(productos_comprados))
#SEMANA DEL AÑO
# Top 10 clientes que más compraron
compras_por_cliente <- datos %>%
group_by(id_cliente) %>%
summarise(productos_comprados = n()) %>%
arrange(desc(productos_comprados))
top_10 <- compras_por_cliente %>% slice_head(n = 10)
ggplot(top_10, aes(x = reorder(id_cliente, productos_comprados), y = productos_comprados)) +
geom_bar(stat = "identity", fill = "darkgreen") +
coord_flip() +
labs(title = "Top 10 clientes más compradores",
x = "ID Cliente", y = "Productos comprados") +
theme_minimal()
ggplot(top_10, aes(x = reorder(id_cliente, productos_comprados), y = productos_comprados)) +
geom_bar(stat = "identity", fill = "darkgreen") +
coord_flip() +
labs(title = "Top 10 clientes más que mas unidades compran",
x = "ID Cliente", y = "Productos comprados") +
theme_minimal()
# Unir clusters con tickets limpios
df <- left_join(tickets_limpios, clusteres, by = "id_cliente_enc")
df <- df[ , -c(5,6,7)]  # Eliminar columnas innecesarias
# Clasificación general de productos
df <- df %>%
mutate(
cod_est = as.character(cod_est),
producto_general = case_when(
grepl("^010\\d+", cod_est) ~ "Fruta y verdura",
grepl("^0125\\d+", cod_est) ~ "Legumbres y frutos secos a granel",
grepl("^02\\d+", cod_est) ~ "Carniceria",
grepl("^03\\d+", cod_est) ~ "Congelados",
grepl("^04\\d+", cod_est) ~ "Charcuteria",
grepl("^050\\d+", cod_est) ~ "Lacteos",
grepl("^051\\d+", cod_est) ~ "Lacteos y postres",
grepl("^052\\d+", cod_est) ~ "Huevos y leche fresco",
grepl("^06\\d+", cod_est) ~ "Panaderia",
grepl("^07\\d+", cod_est) ~ "Carniceria",
grepl("^081\\d+", cod_est) ~ "Latas o mermeladas",
grepl("^082\\d+", cod_est) ~ "Latas",
grepl("^083140\\d+", cod_est) ~ "Conservas",
grepl("^083145\\d+", cod_est) ~ "Alimentacion animales",
grepl("^0833\\d+", cod_est) ~ "Snacks",
grepl("^084\\d+", cod_est) ~ "Snacks",
grepl("^080\\d+", cod_est) ~ "Snacks",
grepl("^090\\d+", cod_est) ~ "Salsas y arroces/pastas",
grepl("^091\\d+", cod_est) ~ "Salsas y arroces/pastas",
grepl("^092\\d+", cod_est) ~ "Frigorifico (sin productos de origen animal)",
grepl("^093\\d+", cod_est) ~ "Especies",
grepl("^10\\d+", cod_est) ~ "Panaderia",
grepl("^11\\d+", cod_est) ~ "Alcoholes",
grepl("^1213\\d+", cod_est) ~ "Higiene",
grepl("^13\\d+", cod_est) ~ "Higiene",
grepl("^14\\d+", cod_est) ~ "Platos preparados",
TRUE ~ "Otros"
)
)
# Asegurar tipo de fecha y ordenar días
df$fecha <- ymd(df$dia)
df <- df %>%
mutate(
dia_semana = wday(dia, label = TRUE, abbr = FALSE, week_start = 1),
dia_semana = factor(dia_semana, levels = c("lunes", "martes", "miércoles", "jueves", "viernes", "sábado", "domingo"))
)
# Agrupar por día y categoría
ventas_dia_producto <- df %>%
group_by(dia_semana, producto_general) %>%
summarise(cantidad_vendida = n(), .groups = "drop")
library(RColorBrewer)
# Agrupar y seleccionar top 5 por día
top5_dia <- ventas_dia_producto %>%
group_by(dia_semana) %>%
slice_max(order_by = cantidad_vendida, n = 5) %>%
ungroup()
# Paleta de colores brillantes
colores_vivos <- brewer.pal(n = 8, name = "Set2")
# Gráfico final
ggplot(top5_dia, aes(x = dia_semana, y = cantidad_vendida, fill = producto_general)) +
geom_col() +
coord_flip() +
labs(
title = "Top 5 productos más vendidos por día de la semana",
x = "Día de la semana",
y = "Cantidad vendida",
fill = "Producto general"
) +
scale_fill_manual(values = colores_vivos) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
df <- df %>%
mutate(
dia_semana = wday(dia, label = TRUE, abbr = FALSE, week_start = 1),
dia_semana = factor(dia_semana, levels = c("lunes", "martes", "miércoles", "jueves", "viernes", "sábado", "domingo"))
) %>%
filter(dia_semana != "domingo")  # 🔥 Filtramos domingos
# Gráfico final
ggplot(top5_dia, aes(x = dia_semana, y = cantidad_vendida, fill = producto_general)) +
geom_col() +
coord_flip() +
labs(
title = "Top 5 productos más vendidos por día de la semana",
x = "Día de la semana",
y = "Cantidad vendida",
fill = "Producto general"
) +
scale_fill_manual(values = colores_vivos) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
df <- df %>%
mutate(
dia_semana = wday(dia, label = TRUE, abbr = FALSE, week_start = 1),
dia_semana = factor(dia_semana, levels = c("lunes", "martes", "miércoles", "jueves", "viernes", "sábado", "domingo"))
) %>%
filter(dia_semana != "domingo")  # 🔥 Filtramos domingos
df <- df %>%
mutate(
dia_semana = wday(dia, label = TRUE, abbr = FALSE, week_start = 1),
dia_semana = factor(dia_semana, levels = c("lunes", "martes", "miércoles", "jueves", "viernes", "sábado", "domingo"))
) %>%
filter(dia_semana != "domingo")  #  Filtramos domingos
# Asegurarse de que los códigos son texto
Maestroestr$cod_est <- as.character(Maestroestr$cod_est)
lineas$cod_est <- as.character(lineas$cod_est)
# Renombrar columnas si es necesario
colnames(lineas) <- c("fecha", "ticket", "cod_est", "id_cliente")
# Procesar tabla de líneas
lineas <- lineas %>%
mutate(
fecha = ymd(fecha),
dia_semana = wday(fecha, label = TRUE, abbr = FALSE, week_start = 1),  # lunes a domingo
prefix2 = str_sub(cod_est, 1, 2)
)
# Asegurarse de que los días están en orden (lunes a domingo)
top_prefix_por_dia$dia_semana <- factor(top_prefix_por_dia$dia_semana,
levels = c("lunes", "martes", "miércoles", "jueves", "viernes", "sábado", "domingo"))
# Graficar con etiquetas
ggplot(top_prefix_por_dia, aes(x = dia_semana, y = cantidad_vendida, fill = prefix2)) +
geom_col() +
geom_text(aes(label = prefix2), vjust = -0.5, size = 5, color = "black") +
labs(
title = "Prefijo de producto más vendido por día de la semana",
x = "Día de la semana",
y = "Número de productos vendidos",
fill = "Prefix2"
) +
theme_minimal()
# Gráfico final
ggplot(top5_dia, aes(x = dia_semana, y = cantidad_vendida, fill = producto_general)) +
geom_col() +
coord_flip() +
labs(
title = "Top 5 productos más vendidos por día de la semana",
x = "Día de la semana",
y = "Cantidad vendida",
fill = "Producto general"
) +
scale_fill_manual(values = colores_vivos) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Gráfico final
ggplot(top5_dia, aes(x = dia_semana, y = cantidad_vendida, fill = producto_general)) +
geom_col() +
coord_flip() +
labs(
title = "Top 5 productos más vendidos por día de la semana",
x = "Día de la semana",
y = "Cantidad vendida",
fill = "Producto general"
) +
scale_fill_manual(values = colores_vivos) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(ventas_por_semana, aes(x = semana, y = n)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(
title = "Productos vendidos por semana del año"
x = "Semana (fecha de inicio)",
ggplot(ventas_por_semana, aes(x = semana, y = n)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(
title = "Productos vendidos por semana del año",
x = "Semana (fecha de inicio)",
y = "Cantidad de productos"
) +
theme_minimal()
# Productos vendidos por semana
# Mutar la columna para que 'semana' sea el número de la semana del año
datos <- datos %>%
mutate(semana = floor_date(fecha, unit = "week", week_start = 1),
semana_numero = format(semana, "%U"))  # Esto extrae el número de semana del año
# Crear el gráfico
ventas_por_semana <- datos %>%
count(semana)
ggplot(ventas_por_semana, aes(x = semana, y = n)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(
title = "Productos vendidos por semana del año",
x = "Semana (fecha de inicio)",
y = "Cantidad de productos"
) +
theme_minimal() +
scale_x_date(labels = scales::date_format("%U"), breaks = "1 week") # Muestra el número de la semana
library(recommenderlab)
library(dplyr)
library(tidyr)
library(rsparse)
library(ggplot2)
# cargamos los datos
tickets <- readRDS("Datos\\Transformados\\tickets_Reducidos.rds")
clusteres <- readRDS("Datos\\Transformados\\df_con_clusteres.rds")
productos <- readRDS("Datos\\Originales\\maestroestr.RDS")
objetivos <- readRDS("Datos\\Originales\\objetivos.RDS")
##################################### OBJETIVO 1 ###############################
objetivo1 <- as.data.frame(objetivos[[1]])
objetivo2 <- as.data.frame(objetivos[[2]])
# ------------------------ como en este caso lo que queremos es recomendar a los 10
# usuarios mas relevantes un producto en especifico, el proceso a seguir es este:
# Entrenar el modelo
# cargar la matriz
matriz_general <- readRDS("Datos\\Resultados\\Matriz.rds")
rownames(matriz_general) <- matriz_general$id_cliente_enc
matriz_general <- matriz_general[,-1]
matriz_rec <- as.matrix(matriz_general)
matriz_rec <- as(matriz_rec,"realRatingMatrix")
# --------------------- ESTADÍSTICOS DE LA MATRIZ
matriz <- as(matriz_general,"matrix")
recuentoF <- rowCounts(matriz_rec) # cuantas celditas de una fila son diferentes de NA (cuantas pelis ha valorado cada usuario)
recuentoC <- colCounts(matriz_rec) # cuantas celditas de una columna son diferentes de NA
max(matriz,na.rm=T) ; min(matriz, na.rm=T)
# MEDIAS
media_columnas <- colMeans(matriz_rec,na.rm=T)
media_filas <- rowMeans(matriz_rec,na.rm=T)
hist(media_filas)
hist(media_columnas)
# PARA SABER EL GOODRATING Y EL GIVEN
min(recommenderlab::rowCounts(matriz_rec,na.rm=T))
######################### RECOMENDADORES CON RECOMMENDERLAB ####################
set.seed(8)
# --------------------------- TRAIN Y TEST
eval_scheme <- evaluationScheme(matriz_rec, method = "split",
train = 0.8, given= 1,
goodRating = 2)
# -------------------------- ENTRENAR MODELOS :
algos <- list("random" = list(name = "RANDOM", param = NULL),
"UBCF_10nn" = list(name = "UBCF", param = list(nn = 10)), # vecinos mas cercanos
"UBCF_50nn" = list(name = "UBCF", param = list(nn = 50)),
"IBCF_Pearson" = list(name = "IBCF", param = list(method = "Pearson")),
"popular" = list(name = "POPULAR" , param = NULL),
"svdf_50" = list(name = "SVDF",param = list(k=50)),
"svdf_100" = list(name = "SVDF",param = list(k=100)),
"svdf_200" = list(name = "SVDF",param = list(k=200)))
# ----------- TOPNLIST
eval <- evaluate(eval_scheme, algos, type = "topNList", n = c(1,3,5,10,15,20))
############################### OBJETIVO 1 #####################################
# Creamos el modelo WRMF -------------------------------------------------------
matriz_general <- readRDS("Datos\\Resultados\\Matriz_sinNA.rds")
storage.mode(matriz_general) <- "numeric"
matriz_alreves <- t(matriz_general)
modelo_wrmf_alreves <- WRMF$new(rank = 10L, lambda = 0.1, feedback = 'implicit')
library(recommenderlab)
library(dplyr)
library(tidyr)
library(rsparse)
library(ggplot2)
library(Matrix)
objetivos <- readRDS("Datos\\Originales\\objetivos.RDS")
modelo_wrmf_alreves <- WRMF$new(rank = 10L, lambda = 0.1, feedback = 'implicit')
modelo_wrmf_alreves$fit_transform(matriz_alreves, n_iter = 1000L, convergence_tol=0.000001)
matriz_obj1 <- matriz_general[rownames(matriz_alreves) %in% objetivos$objetivo1$obj, , drop=F]
matriz_obj1 <- as(matriz_obj1,"sparseMatrix")
preds_1 <- modelo_wrmf_alreves$predict(matriz_obj1, k = 1)
matriz_obj1 <- matriz_alreves[rownames(matriz_alreves) %in% objetivos$objetivo1$obj, , drop=F]
matriz_obj1 <- as(matriz_obj1,"sparseMatrix")
preds_1 <- modelo_wrmf_alreves$predict(matriz_obj1, k = 1)
preds_1
lista_1 <- attr(preds,'ids')
lista_1 <- attr(preds_1,'ids')
View(lista_1)
preds_1 <- modelo_wrmf_alreves$predict(matriz_obj1, k = 10)
preds_1
lista_1 <- attr(preds_1,'ids')
